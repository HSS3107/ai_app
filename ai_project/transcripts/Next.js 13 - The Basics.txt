Title: Next.js 13 - The Basics
Channel: Beyond Fireship
Published: 2022-11-01T19:59:20Z
Duration: PT9M
Description: Learn about all the new features in Next.js version 13 with a full tutorial. We build a beginner-friendly CRUD app from scratch using a PocketBase (SQL database) for the backend. 

Source code https://github.com/fireship-io/next13-pocketbase-demo

Next.js Full Course https://fireship.io/courses/react-next-firebase/
Next.js Beta Docs https://beta.nextjs.org/docs
PocketBase https://pocketbase.io/ 
Next.js 13 First Look https://youtu.be/_w0Ikk4JY7U

Transcript:

[00:00:00] the most popular full stack JavaScript
[00:00:01] framework in the world is without a
[00:00:03] doubt next JS and just recently they
[00:00:05] announced version 13 which unleashes a
[00:00:07] brand new paradigm for writing next apps
[00:00:09] with react server components today's
[00:00:11] video is a full tutorial where we build
[00:00:13] a basic crud app for taking notes that
[00:00:15] takes advantage of these brand new
[00:00:16] features it's beginner level so you'll
[00:00:18] learn a lot if you're new to writing
[00:00:19] code or if you're an experienced next
[00:00:21] developer you'll gain a better
[00:00:22] understanding of these new changes
[00:00:23] whenever a popular framework has a major
[00:00:25] change it's very difficult for those
[00:00:27] learning to code I saw it happen when
[00:00:29] angular 1 went to angular 2 when view 2
[00:00:31] went to view 3 and now with next 12 to
[00:00:33] next 13. there are millions of next
[00:00:35] tutorials and courses on the internet
[00:00:36] but as of this week they're all outdated
[00:00:39] well kind of these new features can be
[00:00:41] incrementally adopted which means you
[00:00:43] can still write next code the old way
[00:00:44] the bad news is that learning xjs in
[00:00:46] 2023 will be a little more confusing
[00:00:48] because there are now two different ways
[00:00:50] to do essentially the same thing also
[00:00:52] keep in mind that these new features are
[00:00:53] currently in beta so if anything I show
[00:00:55] you today doesn't work it's not my fault
[00:00:57] go and read the docs to get started
[00:00:58] we'll first want to generate a new next
[00:01:00] 13 app with a CLI and I'll be using
[00:01:02] typescript with the TS flag now I want
[00:01:05] to build a real full stack app here and
[00:01:06] that means we need some kind of backend
[00:01:08] database for that we'll be using pocket
[00:01:10] base which in my opinion is the ultimate
[00:01:12] backend for side projects it's
[00:01:14] incredibly easy to use and can be a
[00:01:16] great option for production as well to
[00:01:17] use it simply go to the website and
[00:01:19] download its executable into the root of
[00:01:21] your project now open the terminal and
[00:01:23] run it with its serve command it'll give
[00:01:25] you a link to the admin UI where you can
[00:01:27] now manage users and add records to a
[00:01:29] database let's go to the database
[00:01:31] section and add a new collection under
[00:01:32] the hood pocketbase uses SQL Lite so a
[00:01:35] collection is like a new table that will
[00:01:37] require a couple of fields like title
[00:01:39] and content for the notes a database is
[00:01:41] secure by default which means we'll need
[00:01:43] to go to the permissions and make all
[00:01:44] the different operations public that's
[00:01:46] all we need for right now let's go ahead
[00:01:48] and get back into our next JS code
[00:01:50] currently in the file system you'll see
[00:01:51] a Pages directory but go ahead and put
[00:01:53] that in the garbage because that's the
[00:01:55] old way of doing things the new way is
[00:01:57] to add your routes in the app directory
[00:01:59] next use file system routing where the
[00:02:01] names of directories Define the actual
[00:02:03] URL structure of your web app when a
[00:02:05] directory is surrounded by bracket that
[00:02:07] means it's a dynamic route which might
[00:02:09] be like an ID or username that can be
[00:02:11] any wildcard value in addition
[00:02:12] directories can be surrounded by
[00:02:14] parentheses which means they'll be
[00:02:15] ignored by the routing system this can
[00:02:17] be useful when you want to place some
[00:02:19] files somewhere but don't want it to
[00:02:20] affect the actual URL structure now to
[00:02:22] build out the UI there's a variety of
[00:02:24] different reserved file names and the
[00:02:26] most common one that you'll use is page
[00:02:28] it exports a default react component
[00:02:30] that defines the actual UI that you want
[00:02:33] to display here that should give us a
[00:02:34] basic hello world let's go ahead and
[00:02:36] save the file and run the application
[00:02:38] before we do that though you should know
[00:02:39] that versel the company that maintains
[00:02:41] nexjs also just released a brand new
[00:02:43] build tool called turbo pack it's
[00:02:45] currently an alpha but I like to live
[00:02:47] dangerously go into the package Json and
[00:02:49] add the turbo flag to the next Dev
[00:02:51] command now in the terminal run npm run
[00:02:54] Dev and you should get that hello world
[00:02:55] in the browser what you'll notice is
[00:02:57] that it automatically detected that we
[00:02:59] were missing a layout.js file which is
[00:03:01] the UI that surrounds the entire
[00:03:03] application if we open it up you can see
[00:03:05] it's a react component that takes
[00:03:07] children and renders them inside the
[00:03:09] body of the HTML document any code you
[00:03:11] define here will be displayed on every
[00:03:13] single page so it might be a good place
[00:03:14] to add a global nav bar and footer
[00:03:17] what's cool about layouts is that they
[00:03:18] can be nested when you have a layout in
[00:03:20] a subdirectory it will only be applied
[00:03:22] to the children of that route and you
[00:03:23] can also fetch data in layouts which
[00:03:25] makes the application much more
[00:03:26] efficient because you don't need to
[00:03:28] re-render and refetch data on the
[00:03:30] subrouts next thing I'm doing is adding
[00:03:31] a global CSS file I'm not going to
[00:03:33] explain the CSS in this tutorial but you
[00:03:36] can copy it from the source code which
[00:03:37] is on GitHub now it's time to start
[00:03:39] thinking about routes we can create a
[00:03:40] route called notes by adding a new
[00:03:42] directory this route will fetch all the
[00:03:44] notes from pocket base and also provide
[00:03:46] a form to create a new node first to
[00:03:48] build out this UI We'll add a page.tsx
[00:03:50] file inside of which exports a default
[00:03:52] react component that will also be marked
[00:03:55] async the cool thing about next 13 is
[00:03:57] that components are server components by
[00:03:59] default we which means they get rendered
[00:04:00] on the server and we can do data
[00:04:02] fetching directly inside of them with
[00:04:04] async await Define an async function
[00:04:06] called get notes that uses the fetch API
[00:04:09] to retrieve data from your backend in
[00:04:11] our case pocketbase comes with a
[00:04:13] built-in rest API where we can point to
[00:04:15] the notes collection and then retrieve a
[00:04:17] paginated list of results we'll say page
[00:04:19] 1 with 30 results per page we can then
[00:04:21] convert that result into Json and then
[00:04:23] return the items which will be an array
[00:04:25] of the data in the database now in the
[00:04:27] component to fetch data all we have to
[00:04:29] do is await a call to this function that
[00:04:31] gives us access to an array of notes
[00:04:33] which we can Loop over in the UI to
[00:04:35] render out a basic note component that
[00:04:37] contains the title content and so on go
[00:04:40] ahead and view the app in the browser
[00:04:41] and you should now see a list of all the
[00:04:43] records you've created in the database
[00:04:44] it's all server rendered however one
[00:04:46] important thing to understand is that
[00:04:48] next will automatically cache this route
[00:04:50] because the route segment is not dynamic
[00:04:52] in other words it's treated like a
[00:04:54] static page but we can go back into our
[00:04:56] code and change that by adding the Cache
[00:04:58] no store option to to fetch and now it
[00:05:01] will refetch the items from the server
[00:05:02] on every request if you've used nexjs in
[00:05:05] the past this is roughly the equivalent
[00:05:06] to get server-side props now I want to
[00:05:09] point out that you don't have to use the
[00:05:10] fetch API here pocketbase has its own
[00:05:12] SDK that works like an orm where we
[00:05:15] could just make a reference to it and
[00:05:16] then grab all the records by saying DB
[00:05:18] records get list notes but now you might
[00:05:21] be wondering how do we change the
[00:05:22] caching Behavior next 13 also has a
[00:05:25] variety of variables that you can export
[00:05:26] from a page to change things like the
[00:05:28] caching behavior and runtime which is
[00:05:30] necessary if you are not using fetch so
[00:05:32] that takes care of our list page now I
[00:05:34] want to show you how to create a dynamic
[00:05:36] route you'll notice in the note
[00:05:37] component that I'm linking to a note
[00:05:39] with a random ID which is generated by
[00:05:42] pocket base to create a dynamic route
[00:05:44] like that we'll add a second directory
[00:05:46] called ID surrounded by brackets that
[00:05:48] tells next that this route segment is a
[00:05:50] wild card and can be any value like
[00:05:52] before we create a page component and
[00:05:54] Export a server component from it let's
[00:05:56] also create a data fetching function
[00:05:58] called git note that retrieves an
[00:06:00] individual item from the database and in
[00:06:02] order to do that it will need the ID
[00:06:04] from the URL but let's once again use
[00:06:06] the fetch API and interpolate the note
[00:06:08] ID into the actual route now I want to
[00:06:10] point out that because this is a dynamic
[00:06:12] route it won't automatically cache every
[00:06:14] request however you may want to update
[00:06:16] the caching Behavior you can Implement
[00:06:18] incremental static regeneration by
[00:06:20] adding the revalidate option to fetch
[00:06:22] this tells next to regenerate the page
[00:06:24] on the server if it's older than a
[00:06:26] certain number of seconds and if you
[00:06:27] want to pre-render these Pages you can
[00:06:29] also export a function called generate
[00:06:31] static params this is the equivalent to
[00:06:33] get static paths in previous versions of
[00:06:36] next now in the component we can call
[00:06:37] this function and pass the params ID
[00:06:40] from the URL as the argument that gets
[00:06:42] the data from the database which we can
[00:06:44] then display in the UI at this point you
[00:06:46] should be able to go to the list of
[00:06:47] nodes click on one of them which
[00:06:49] navigates you to a page just for that
[00:06:51] one note that's pretty cool but next 13
[00:06:53] also has a couple of other tricks up its
[00:06:55] sleeve to manage the loading State and
[00:06:57] UI between routes it can add a loading
[00:06:59] Dot TSX file inside the ID directory it
[00:07:02] simply exports a component with some
[00:07:04] kind of loading indicator that will be
[00:07:06] rendered in place of the page when the
[00:07:07] data is being fetched this results in
[00:07:09] Faster load times because the content
[00:07:11] can be streamed directly into that
[00:07:13] component instead of waiting for the
[00:07:15] entire page to load on a similar note
[00:07:16] you can also have an error file that
[00:07:18] will also be rendered in place of the
[00:07:20] page when an error occurs and that just
[00:07:22] makes it really easy to handle loading
[00:07:24] and error States so far in this tutorial
[00:07:26] we've only looked at data fetching but
[00:07:28] your app will also likely need to write
[00:07:30] or mutate data as well in order to
[00:07:32] handle that we'll need an interactive
[00:07:33] component that's rendered on the client
[00:07:35] in the notes directory let's go ahead
[00:07:37] and create a new component called create
[00:07:39] note but unlike our other components
[00:07:41] this one has use client at the top this
[00:07:43] tells next not to render it on the
[00:07:45] server rather only in the browser in the
[00:07:47] components I'm adding the use State hook
[00:07:49] to add fields for title and content then
[00:07:52] in the jsx I create a form that adds a
[00:07:54] couple of inputs to modify those values
[00:07:56] each input listens to the on change
[00:07:58] event then update the state accordingly
[00:08:00] now let's define a create function
[00:08:02] that's called when the form is submitted
[00:08:04] it will also use fetch to make a request
[00:08:06] to the pocket base API however this time
[00:08:09] it's a post request and sends the data
[00:08:11] from the form as the body of the request
[00:08:13] now let's go ahead and take this client
[00:08:14] component and declare it in the notes
[00:08:16] page if we open up the app we can now
[00:08:18] fill out this form and create a new item
[00:08:20] in Pocket base however in order to see
[00:08:22] that item in the list we need to refresh
[00:08:25] the entire page and that's not ideal
[00:08:27] luckily the new next router has us
[00:08:29] covered if we go back to the client
[00:08:30] component we can import the router from
[00:08:32] next navigation and it has a special
[00:08:34] method called refresh after the new
[00:08:36] record is created in the database it'll
[00:08:38] re-execute the query on the notes page
[00:08:40] to get the list of notes which means you
[00:08:42] will automatically see the new note
[00:08:43] updated in the list without a full page
[00:08:45] refresh congratulations you just built a
[00:08:47] full stack application with next 13. as
[00:08:50] of today next 13 is in beta and still a
[00:08:52] little rough around the edges but I will
[00:08:54] keep you updated as things change so
[00:08:56] make sure to subscribe to the channel
[00:08:57] thanks for watching and I will see you
[00:08:59] in next one
