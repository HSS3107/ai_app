Title: WWDC22: Explore navigation design for iOS | Apple
Channel: Apple Developer
Published: 2024-10-01T22:01:14Z
Duration: PT25M34S
Description: Familiar navigation patterns can help people easily explore the information within your app — and save them from unnecessary confusion. We’ll show you how to take advantage of existing navigation structures to simplify complex interactions in your app without compromising its personality. Learn best practices and common pitfalls when working with tab bars, modality, and more.

Explore related documentation, sample code, and more:
Explore the Human Interface Guidelines: https://developer.apple.com/design/human-interface-guidelines/

More Apple Developer resources:
Video sessions: https://apple.co/VideoSessions
Documentation: https://apple.co/DeveloperDocs
Forums: https://apple.co/DeveloperForums
App: https://apple.co/DeveloperApp

Transcript:

[00:00:00] ♪ instrumental hip hop music ♪
[00:00:03] ♪
[00:00:09] Hi, I'm Sarah McClanahan,
[00:00:11] and I'm a designer
on the Evangelism team.
[00:00:14] Today, I'm going to share
practical tips, guidance,
[00:00:18] and best practices
for how to improve navigation
[00:00:21] on your iOS apps.
[00:00:22] When apps have great navigation,
it's often unnoticed
[00:00:26] because people are able to focus
on the content and experience.
[00:00:31] Navigation involves
teaching people about
[00:00:33] how things behave,
[00:00:36] where things belong,
[00:00:38] and how things work in your app.
[00:00:40] The goal of navigation
is to provide enough
[00:00:43] of a foundation of familiarity
so that people can easily
[00:00:46] discover your content
and interact with your app.
[00:00:50] When navigation deviates
too far from our expectations
[00:00:53] or doesn't match our natural
understanding of the world,
[00:00:57] we often feel frustrated
and sense that an app
[00:00:59] is hard to use.
[00:01:01] But getting navigation right
requires focus and intention.
[00:01:05] And although the concepts
I'm covering today are not new,
[00:01:08] they are fundamental,
[00:01:10] and they're essential to having
a successful app on iOS.
[00:01:14] So whether you're new to
the platform or looking for ways
[00:01:16] to improve your app experience,
then this session is for you.
[00:01:20] Today, we're going
to discuss tab bars,
[00:01:23] a common form
of navigation on iOS.
[00:01:27] Then we'll discuss interactions
for moving between screens
[00:01:30] by exploring
hierarchical navigation
[00:01:34] and modal presentations.
[00:01:36] As you can see, we'll only
be covering a subset
[00:01:39] of the large topic area
of navigation.
[00:01:42] But we'll start here
because these core patterns
[00:01:44] represent a foundation
which we often see misused,
[00:01:49] and understanding them
can set you up for success
[00:01:51] as your app evolves
or supports other devices.
[00:01:56] Let's get started with tab bars.
[00:01:58] Tab bars are a global
navigation control
[00:02:01] that sit at the bottom
of the screen,
[00:02:02] categorizing an app's content
into different sections.
[00:02:06] Think of tabs
as a control to reflect
[00:02:08] your information hierarchy.
[00:02:12] The UI control itself
should translate
[00:02:14] an already-clear grouping
and establish relationship
[00:02:17] between different areas
of your app.
[00:02:20] So the Tab bar represents
your top-level content,
[00:02:23] which should be the top
of your app's hierarchy.
[00:02:26] Each tab communicates
your app's menu of options,
[00:02:29] and these sections should be
meaningful and descriptive.
[00:02:33] This likely sounds
really straightforward,
[00:02:36] but in practice
and for various reasons,
[00:02:39] it can be easy to lose sight of
in your app.
[00:02:42] Let's look at
some good examples.
[00:02:45] Without seeing any
of the content of these apps,
[00:02:47] notice how the tabs
hint at functionality.
[00:02:51] They tell a story about
what the app can do
[00:02:53] just by displaying
concise labels.
[00:02:56] Listen Now and Radio indicate
that this is a content-based app
[00:03:00] with auditory media.
[00:03:04] For this app, Library and Albums
hint at a content-rich app
[00:03:08] with a For You tab that signals
strong personalization.
[00:03:13] This app has tabs that are so
focused that their functionality
[00:03:17] is self-evident and tell me
exactly what I can do
[00:03:20] in those content areas.
[00:03:23] What we see often
is that the first tab of apps
[00:03:26] tend to be loaded
heaviest with features.
[00:03:29] Try to create balance
in your interface
[00:03:31] by distributing functionality
throughout your tabs.
[00:03:34] Let's go through this
with an example
[00:03:36] to explore how tabs can
oftentimes be misguiding
[00:03:39] or confusing.
[00:03:41] Imagine I have a fake app
that lets people discover
[00:03:45] curated routes in cities
just like a local cyclist.
[00:03:48] And if you're traveling,
moving to a new city,
[00:03:51] or just getting into the sport,
then there's an easy way
[00:03:54] to save routes
and create itineraries.
[00:03:57] Here it is.
[00:03:58] Since this app is about
finding routes to bike,
[00:04:01] the first thing you'll see is a
map view with filters for rides.
[00:04:07] Then, there's a section
with an upcoming itinerary
[00:04:10] that I can interact with
by editing the content
[00:04:12] or inviting friends.
[00:04:15] And then there are routes
grouped together
[00:04:17] in collection views.
[00:04:19] It can be tempting to add all
your functionality into one tab
[00:04:22] just like this, because
it's available at a glance.
[00:04:26] Or maybe your app
has evolved over time
[00:04:28] and you've lost sight of
grouping your functionality
[00:04:31] into sections on the tab bar.
[00:04:33] Well today, I invite you
to reconsider this in your app.
[00:04:38] In this design,
people may have to scroll a lot
[00:04:41] for what they're looking for,
and it takes effort
[00:04:43] to mentally parse unrelated,
disparate features.
[00:04:47] Filtering a map view
and editing an itinerary
[00:04:50] are two very different
features -- and mindsets --
[00:04:54] when someone opens
this app to use it.
[00:04:56] Be cautious of combining your
app's functionality in this way
[00:04:59] or doing it out of fear
that people won't interact
[00:05:02] with the rest of your app.
[00:05:03] It's much easier to understand
an app's functionality
[00:05:06] when it's well organized
and clearly communicated.
[00:05:11] One way to do this is to take
a step back and ask yourself,
[00:05:15] Why do people use your app?
[00:05:17] Remember, great apps
have focused solutions.
[00:05:20] They aim to do
a few things really well,
[00:05:22] opposed to trying to solve
everything in one app.
[00:05:25] Let's reconsider the tab bar
on this cycling app.
[00:05:28] People use this app
to find routes
[00:05:30] in the places they care about,
that are right for their level.
[00:05:34] This is one of the most
important views in the app,
[00:05:36] as it represents the content
that people care about the most.
[00:05:39] So let's take a step back
and reassess the tab bar
[00:05:43] to understand how a route
may be used
[00:05:45] and how that content can be
represented in the app
[00:05:48] in a way that feels
more balanced.
[00:05:51] This is a route detail.
[00:05:54] Someone would expect
to see an overview,
[00:05:56] like distance
and elevation gain,
[00:06:00] as well as access to the map
and road surfaces
[00:06:02] throughout the route,
like sidewalks or roads.
[00:06:06] Seeing specific callouts
for steep climbs or descents
[00:06:09] could help me understand if this
route is right for my level.
[00:06:13] And finally, food stops
along the route
[00:06:15] are great for planning.
[00:06:17] OK. So, how do people make sense
of this core functionality
[00:06:22] of viewing routes?
[00:06:24] Well, a route is only helpful
if you know where it is located.
[00:06:29] Routes should likely
have a relationship
[00:06:32] with the city
they're associated with.
[00:06:35] That may lead me
to have a city overview
[00:06:38] that tells me helpful
information about cycling there.
[00:06:41] And if you scroll down the view,
[00:06:43] you'd have that list of all
the routes you can ride.
[00:06:47] But this app also supports
routes in different cities,
[00:06:50] which means each city should go
back to a list of all places.
[00:06:56] Places can become the top level
of the hierarchy
[00:06:59] when navigating to routes.
[00:07:01] As you can see, there's a lot of
content in this workflow alone,
[00:07:04] and it's really key to the value
that this app provides.
[00:07:09] This is great justification
for a tab-bar item.
[00:07:12] Notice now how
it's self-contained.
[00:07:14] It wouldn't make sense
to put anything in this tab
[00:07:17] that isn't about a place.
[00:07:20] Part of designing great tab
bars is organizing your content.
[00:07:24] Look for these natural ways
to address relationships.
[00:07:28] I can go through this exercise
with other key features
[00:07:30] in the app, like itineraries,
and I can ask myself,
[00:07:34] What is an itinerary?
[00:07:35] How will people use it?
[00:07:37] And where can I dedicate
a place for them in my app?
[00:07:41] Even if people are unfamiliar
with the content of your app,
[00:07:44] and perhaps
especially if they are,
[00:07:46] it's best to communicate
your functionality
[00:07:49] and content clearly,
[00:07:51] assess where it belongs
in your hierarchy,
[00:07:53] and how people engage with it.
[00:07:55] Then, this app can improve
from having all of the features
[00:07:58] crammed into the first tab,
to a much clearer
[00:08:02] and straightforward form
of navigation.
[00:08:05] Now, the core functionality
is more balanced on the tab bar
[00:08:09] because these sections
hold up on their own.
[00:08:11] They are related,
[00:08:12] yet distinctly different
content areas and workflows.
[00:08:16] This makes navigation
so much more intuitive.
[00:08:21] Next, I want to discuss
a slightly related topic,
[00:08:24] but we see it
expressed differently.
[00:08:26] Avoid duplicating
your functionality
[00:08:28] and consolidating it
into a single tab.
[00:08:32] In content-rich apps
like this one,
[00:08:34] a tab titled Home, may seem
like an attractive catchall
[00:08:38] to showcase functionality
throughout an app
[00:08:40] in a single place.
[00:08:43] For example, maybe it seems like
people aren't engaging
[00:08:46] with the Itineraries feature,
and you may be worried
[00:08:49] it's because they don't know
the functionality exists.
[00:08:54] So it may seem logical
to encourage engagement
[00:08:57] by repeating actions in
the tab bar for more visibility,
[00:09:00] such as New Itinerary
on the Places cards
[00:09:04] and maybe creating a version
of an itinerary view
[00:09:07] that has the features
front and center,
[00:09:09] such as inviting friends;
[00:09:12] or listing the stops
with an easy action to add.
[00:09:17] It might be tempting to do
this out of fear
[00:09:19] that some functionality won't be
discovered throughout your app.
[00:09:23] And to clarify, this isn't
about duplicating content.
[00:09:27] In many scenarios,
it can make sense
[00:09:29] to have similar types of
content, like songs or photos,
[00:09:33] exist on many tabs, but organized
in a different way.
[00:09:36] But when it's your app's
functionality,
[00:09:38] which are the actions people
can take to achieve things,
[00:09:41] the redundancy
creates confusion.
[00:09:45] And in practice, Home tabs
disrupt an app's hierarchy.
[00:09:49] If functionality from different
tabs or areas throughout an app
[00:09:54] are duplicated and added
to a single screen
[00:09:57] without sufficient context,
[00:09:59] it creates redundancy
and confusion.
[00:10:02] Home becomes the tab
where every feature
[00:10:04] is fighting for real estate,
because the tab
[00:10:07] is trying to solve a problem
of discoverability.
[00:10:10] But in reality, it creates
a dissociation
[00:10:13] between understanding content
and how to act on it.
[00:10:16] If this is your app,
[00:10:18] consider removing
the Home tab altogether.
[00:10:20] The redundancy of features
prohibits people
[00:10:23] from understanding where
things belong and why.
[00:10:26] Another concern about Home tabs
[00:10:28] is that the repeated
functionality
[00:10:30] may cause someone to tab-jump
because the action exists
[00:10:33] in another tab too.
[00:10:35] Transporting someone to another
tab by tapping on an element
[00:10:39] within a view is jarring
and disorienting.
[00:10:42] Never force someone
to change tabs automatically.
[00:10:46] Next, one of the biggest selling
points of a tabbed navigation
[00:10:50] is access to multiple
top-level hierarchies,
[00:10:53] so avoid hiding
or removing the tab bar
[00:10:55] throughout your navigation.
[00:10:58] Persistent access to the tab
bar gives someone the ability
[00:11:01] to toggle between
different levels
[00:11:03] of your information hierarchy
[00:11:05] while maintaining context
in each.
[00:11:08] For example, I can look at a new
route I'm considering riding
[00:11:11] in the Places tab
[00:11:15] and compare it to an itinerary
I'm building
[00:11:17] in the Itinerary tab
[00:11:20] with routes I've already saved
[00:11:23] that are two levels deep
into my hierarchy.
[00:11:26] This only works well
if tabs have defined purpose
[00:11:30] and represent specific
categories of content.
[00:11:34] Finally, all of the work
you invest
[00:11:36] in a solid information
architecture
[00:11:39] should be honored
with clear and concise labels.
[00:11:42] Let's look at
an Apple Design winner
[00:11:43] from the Interaction category
this year.
[00:11:46] This is the Slopes app.
[00:11:48] I think it's so great
that when you launch the app,
[00:11:50] you land on the middle tab,
which is your Logbook
[00:11:53] with your season stats.
[00:11:55] The other tabs are specific.
[00:11:57] They're easy to understand,
and I have an immediate sense
[00:12:01] of what the app does
and how to use it.
[00:12:03] At a glance, this is because
the labels are representative
[00:12:07] of the content.
[00:12:08] Record a ski day,
browse resorts,
[00:12:11] compare stats with friends;
they all represent
[00:12:13] core functionality
with a succinct label.
[00:12:18] Tab bars are a powerful control
for navigation.
[00:12:21] Let's recap everything
we've learned.
[00:12:24] Use tabs to reflect
your information hierarchy.
[00:12:28] Organize your features
in a way that balances them
[00:12:31] across your tabs.
[00:12:33] Avoid duplicating features and
merging them into a single tab.
[00:12:38] Always keep the tab bar
persistent throughout your app.
[00:12:42] Finally, use clear and concise
labels for each tab.
[00:12:46] All right,
let's dive into interactions.
[00:12:49] When it comes to navigating
between screens of an app,
[00:12:52] there are two very common
forms of transition:
[00:12:55] you can navigate through
an app's hierarchy
[00:12:57] with a term we sometimes
refer to as a "push,"
[00:13:00] such as pushing
into more detail.
[00:13:02] Or, you can transition
with a modal presentation.
[00:13:06] These are nonintrusive
and familiar ways
[00:13:09] to traverse an app's hierarchy
and transition between views.
[00:13:12] Let me show you both.
[00:13:14] When you transition
through hierarchical navigation,
[00:13:17] a view pushes,
which means a person
[00:13:19] has tapped on an element
and the next screen
[00:13:21] slides into view
from right to left.
[00:13:24] A push transition
is an expected default
[00:13:27] when drilling further
into an app's hierarchy.
[00:13:30] Pushing is great
because it directly reflects
[00:13:33] your information hierarchy.
[00:13:35] It's a literal representation
of moving through content
[00:13:38] from a high level
and drilling into more detail.
[00:13:41] On the other hand,
a modal is reserved
[00:13:43] for a self-contained task
in an interface.
[00:13:46] Modals work great for workflows
that are independent,
[00:13:49] meaning someone has enough
information in that view
[00:13:52] to make decisions
and complete a task.
[00:13:55] Modals are unique
because they create focus
[00:13:57] by separating people
from the information hierarchy.
[00:14:01] For example,
creating a new itinerary
[00:14:04] is presented in a modal view.
[00:14:07] Someone can make selections
or input data such as a title,
[00:14:11] a city, a range of dates,
and even invite friends.
[00:14:16] This is suitable for a modal
because the UI is intended
[00:14:18] to be edited and completed
before dismissing the view
[00:14:22] or navigating around
the rest of the app.
[00:14:24] Since it's all user input,
the rest of the app isn't needed
[00:14:28] as a reference
to complete the fields.
[00:14:31] Now that you're familiar
with these interactions,
[00:14:33] let's dive deep on both.
[00:14:35] Starting
with hierarchical navigation.
[00:14:37] Here are a couple
of guidelines to consider.
[00:14:40] Use a push transition
to navigate between
[00:14:42] different levels
of your app's hierarchy.
[00:14:46] Hierarchical navigation
reinforces the relationship
[00:14:49] between top-level
and secondary content.
[00:14:52] The top-level content
is higher in the hierarchy.
[00:14:55] As I want more detail,
I access the supplemental views
[00:14:59] by drilling into the hierarchy.
[00:15:03] As I make selections,
I narrow my options
[00:15:05] and eliminate access
to the rest of the hierarchy.
[00:15:09] This is how it should be.
[00:15:11] Content should become
increasingly more specific
[00:15:14] and there should be
fewer options as I push in
[00:15:16] and drill into detail.
[00:15:20] When using a push transition,
[00:15:21] it's really important
that the tab bar
[00:15:23] remains persistently anchored
to the bottom of the screen.
[00:15:27] As we talked about before,
[00:15:29] this is one of the biggest
selling points
[00:15:31] of a tabbed navigation.
[00:15:32] It's consistent.
[00:15:34] It gives access
to core areas of your app
[00:15:36] because it's always available.
[00:15:38] This means people
can explore content
[00:15:40] at different hierarchies.
[00:15:42] As views push in,
it feels natural
[00:15:44] to swipe left to right to go
back to where you came from
[00:15:48] without losing access
to hierarchies
[00:15:50] in other tabs where your state
should be preserved.
[00:15:54] Next, it's important to use
the navigation bar
[00:15:57] at the top of the screen
with appropriate labels
[00:16:00] to orient people
in your hierarchy.
[00:16:02] Let me show you.
[00:16:04] As I drill into content
[00:16:06] and move through
my information hierarchy,
[00:16:08] notice how the back button
in the navigation bar changes
[00:16:12] to reflect the title
of the screen I just came from.
[00:16:16] This is helpful as I navigate
further into an app
[00:16:19] by scrolling screens
and drilling in,
[00:16:22] so I never have to remember
where I came from
[00:16:24] or how to get back there,
because the back button
[00:16:27] can indicate the level up
in the hierarchy.
[00:16:31] The other place to use
hierarchical navigation
[00:16:34] is in all instances when
a disclosure indicator is used.
[00:16:40] A disclosure indicator,
[00:16:41] which is also
referred to as a chevron,
[00:16:43] points in the direction you're
expected to transition to.
[00:16:47] When a chevron initiates
a different transition,
[00:16:50] there's a disconnect
between what the UI represents
[00:16:52] and the interaction
that follows.
[00:16:55] The concept of pushing maps to
our mental model of progression.
[00:16:59] In western cultures,
we read left to right,
[00:17:02] and that direction
indicates progress.
[00:17:05] But in right to left languages,
such as Arabic and Hebrew,
[00:17:08] the mental model of progress is
flowing in the other direction.
[00:17:13] If your app supports
right to left languages,
[00:17:15] then the transition
of pushing is flipped
[00:17:17] to create an association
with the flow of content.
[00:17:22] The last consideration for when
to use hierarchical navigation
[00:17:26] is about the context
of the workflow,
[00:17:28] such as when someone
is navigating frequently
[00:17:31] between content.
[00:17:33] If you're presenting a workflow
that you expect people
[00:17:36] to interact with frequently
by toggling between views often,
[00:17:40] app switching
during the workflow,
[00:17:41] or spending significant time
in the view, then use a push.
[00:17:45] A familiar example
is the Messages app.
[00:17:48] Even though the hierarchy
is relatively flat,
[00:17:50] I can easily move
in and out of the messages
[00:17:53] with a push transition.
[00:17:55] If each message wasn't a push,
but instead a modal,
[00:17:58] it would be difficult
to seamlessly move
[00:18:00] between different chats.
[00:18:02] Messaging should feel fluid,
but dismissing a modal
[00:18:05] when it's not relevant
makes people have to think about
[00:18:08] leaving the screen,
and that feels overcomplicated.
[00:18:11] Pushing allows
frictionless transition
[00:18:13] between core areas of an app.
[00:18:17] That is an overview
of hierarchical navigation.
[00:18:20] Let's review.
[00:18:21] Primarily, push transitions
are used to traverse
[00:18:24] an app's hierarchy.
[00:18:26] Always keep the tab bar
persistently anchored
[00:18:29] to the bottom of the screen.
[00:18:31] Use the navigation bar
of each screen to reflect
[00:18:34] a clear title and back label to
orient people in your hierarchy.
[00:18:38] Use a push when a disclosure
indicator is present.
[00:18:42] And when workflows require
navigating frequently
[00:18:44] between content.
[00:18:47] Hierarchical navigation
is a very common
[00:18:49] and a relatively
simple interaction,
[00:18:51] so this transition is likely to
be used frequently in your app.
[00:18:56] However, modal presentations
are more about a context shift.
[00:19:00] It's about isolating someone
into a focused workflow
[00:19:03] or self-contained task.
[00:19:05] When using modals on iOS,
[00:19:07] always present them
from the bottom of the screen.
[00:19:11] A modal interrupts
information hierarchy.
[00:19:13] It comes from the bottom of the
screen to cover your tab bar.
[00:19:17] This prevents people from
drilling further into your app.
[00:19:20] And it's an intentional
disruption because the purpose
[00:19:23] is to reinforce focus.
[00:19:27] So now you may be wondering,
what is a self-contained task?
[00:19:30] Let's talk about
three broad examples.
[00:19:34] You can use modal presentations
for a simple task,
[00:19:37] a multi-step task,
or for full-screen content.
[00:19:41] I'll share an example of each.
[00:19:45] First, use modality
for a workflow
[00:19:47] that requires accomplishing
a simple task,
[00:19:50] such as creating an event
or setting a reminder.
[00:19:53] Creating a reminder requires
[00:19:55] I edit and modify
the entry fields.
[00:19:58] Locking in focus
while doing this helps someone
[00:20:00] achieve this task
without distraction.
[00:20:03] It also minimizes
the possibility of accidentally
[00:20:06] abandoning the flow by tapping
on another element or tab.
[00:20:11] Second, use modality
for a workflow that accommodates
[00:20:14] a complicated task.
[00:20:16] This is potentially
multiple steps
[00:20:18] such as adding
a transit card to the wallet.
[00:20:21] It may seem counterintuitive
to use a modal
[00:20:24] for a complicated task,
but remember,
[00:20:27] the purpose is to reinforce
focus by hiding the tab bar
[00:20:30] and preventing people
from moving around the app
[00:20:33] before the task is complete
or canceled.
[00:20:37] And third, use a modal
when viewing an article, video,
[00:20:40] or full-screen content
that requires minimal
[00:20:43] additional navigation.
[00:20:45] When in the Fitness app
starting a workout,
[00:20:48] which is presented as a video,
[00:20:50] is a great scenario
for a modal presentation.
[00:20:54] In the hierarchical section,
we talked about the importance
[00:20:57] of the navigation bar
to orient people.
[00:20:59] It's equally important
with modal presentations.
[00:21:03] When looking at
the anatomy of a modal,
[00:21:06] think about the navigation bar
as a guide for wayfinding.
[00:21:09] The use of labels and actions
can make people feel confident
[00:21:13] about where they are
and what actions they can take
[00:21:15] to go other places.
[00:21:19] A title helps orient people
to the content of the screen,
[00:21:22] such as "New Itinerary."
[00:21:25] The right label is intended
to be the preferred action,
[00:21:28] so it's often seen in a bolder
font to emphasize importance.
[00:21:33] The label itself is a concise,
affirmative verb
[00:21:36] that tells me exactly
what to expect when tapped.
[00:21:39] The preferred action
dismisses the modal
[00:21:41] and the previous state
of the app should be preserved.
[00:21:45] If there is not yet input
or interaction on the modal,
[00:21:48] then having the preferred
action be inactive
[00:21:51] is a good way to clarify
that fields are required
[00:21:53] in order to save or continue.
[00:21:57] If you have a preferred action,
then using the left action
[00:22:00] to dismiss the modal
with "Cancel"
[00:22:03] clearly indicates that I'm
abandoning the workflow.
[00:22:06] If I've entered any information
before tapping Cancel,
[00:22:08] this is a good time to display
an alert, or an action sheet
[00:22:12] as you see here.
[00:22:14] Letting someone know that
they will lose the data
[00:22:16] if continuing to cancel.
[00:22:18] But if I haven't
interacted with the UI,
[00:22:21] tapping Cancel should simply
dismiss the modal.
[00:22:25] Use close symbols sparingly and
only when modal presentations
[00:22:29] require minimal interaction
and no text input.
[00:22:33] Sometimes,
you'll see an "X" in a modal
[00:22:36] as the primary way to dismiss,
such as this article
[00:22:38] from the Today tab
in the App Store.
[00:22:41] The close symbol works here
because there is no user input,
[00:22:44] so the subtle dismiss action
[00:22:46] helps someone focus
on the content.
[00:22:49] Here's an example of how the
close symbol can be problematic
[00:22:52] in a modal that requires
input and interaction.
[00:22:55] After I select a filter,
if I tap close,
[00:22:58] will the selections be
applied or canceled?
[00:23:01] Without a clearly labeled
action, people will wonder,
[00:23:04] "What happens if I tap close?"
[00:23:07] So keep in mind that using
labels in the navigation bar
[00:23:10] is usually preferred,
as it's more affirming
[00:23:12] and the actions
are more explicit.
[00:23:15] Lastly, we try to limit
modals over modals
[00:23:19] because it can feel
jarring and overcomplicated.
[00:23:23] It's worth calling out,
that a modal view itself
[00:23:25] can support subviews
and transitions when relevant.
[00:23:29] I mentioned earlier
that this is an edit view,
[00:23:31] meaning that the text fields
and table cells have selections
[00:23:35] and input which are intended
[00:23:37] to be interacted with
and not just viewed.
[00:23:41] For example,
I can tap on a table cell
[00:23:43] of one of my friends
I've added to the itinerary.
[00:23:46] You expect this to push because
it has a chevron, remember?
[00:23:50] When I push in, this view may
show information about Kate
[00:23:53] and give me the option to remove
her from the itinerary.
[00:23:57] But the labels "Add People"
and "Upload Photo" are in
[00:24:01] tint color, which indicates
that these actions are tappable.
[00:24:05] In each of these scenarios,
[00:24:07] they're workflows
within workflows.
[00:24:09] I started by adding
an itinerary,
[00:24:11] now I'm adding
a photo to the itinerary.
[00:24:15] Uploading a photo
is a workflow that includes
[00:24:17] quite a bit of interaction,
[00:24:19] like scrolling through my camera
roll and selecting a new photo.
[00:24:23] I would also define
this as a self-contained task.
[00:24:27] Once a photo is chosen,
that modal is dismissed
[00:24:30] and I'm back to the first modal
of the new itinerary.
[00:24:34] Try to limit
multiple modality stacks,
[00:24:36] but sometimes they're required
[00:24:38] to drive consistency
and focus in subviews.
[00:24:42] That is an overview
of modal presentation on iOS.
[00:24:46] Modals should present
from the bottom of the screen.
[00:24:49] They can be used
for three types of tasks:
[00:24:51] simple, multi-step,
or full-screen.
[00:24:55] Use the preferred and cancel
actions in the navigation bar.
[00:25:00] Use the close symbol for content
with minimal interaction.
[00:25:04] And limit modals over modals.
[00:25:06] I hope this deep dive
was helpful for you.
[00:25:09] When designing navigation
for your iOS apps,
[00:25:12] think about how
content is organized,
[00:25:14] how people interact
with your functionality,
[00:25:16] and how best to represent it
in relation to your hierarchy.
[00:25:20] This way, people can easily
access and interact
[00:25:23] with all of your app's
amazing features.
[00:25:25] Thanks for listening.
[00:25:26] ♪
