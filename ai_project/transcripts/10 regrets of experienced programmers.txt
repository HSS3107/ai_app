Title: 10 regrets of experienced programmers
Channel: Fireship
Published: 2024-05-06T17:21:52Z
Duration: PT8M16S
Description: I recently asked "You are on your deathbed, what do you regret the most about programming?". Let's break down the biggest mistakes shared by most software engineers. 

âš¡Check out https://daily.dev/fireship to keep on on latest developer news!

#programming #tech  #humor

ðŸ’¬ Chat with Me on Discord

https://discord.gg/fireship

ðŸ”— Resources

Original Tweet https://twitter.com/fireship_dev/status/1784964387666804953
How to Flex on Programmers https://youtu.be/r6tH55syq0o

ðŸ”¥ Get More Content - Upgrade to PRO

Upgrade at https://fireship.io/pro
Use code YT25 for 25% off PRO access 

ðŸŽ¨ My Editor Settings

- Atom One Dark 
- vscode-icons
- Fira Code Font

ðŸ”– Topics Covered

- How do I become a better programmer?
- What do programmers regret?
- Pros and cons of learning to code
- Common mistakes in software engineering
- Worst programming languages

Transcript:

[00:00:00] recently I volunteered my time at a
[00:00:02] hospice center for dying programmers
[00:00:04] also known as X and I asked the question
[00:00:06] you're on your deathbed a kid comes to
[00:00:08] your side and says grandpa I want to
[00:00:10] learn how to code what do you regret
[00:00:12] most about programming my immediate
[00:00:14] answer would be something like leave me
[00:00:15] alone kid and let me die in peace but
[00:00:17] it's actually an interesting question
[00:00:19] because programming is not like most
[00:00:21] careers it has billions of possible
[00:00:23] paths with many conflicting opinions and
[00:00:25] no single right way to do things despite
[00:00:27] its unpredictable nature I found that
[00:00:29] there are some Universal traps that
[00:00:31] nearly every developer regrets falling
[00:00:32] into and in today's video we're going to
[00:00:34] look at 10 of them regret number one I
[00:00:36] wish I would have written less code it's
[00:00:38] extremely important to understand that
[00:00:40] code is not an asset it's a liability
[00:00:42] every block of code is something that
[00:00:43] you'll have to maintain in the future
[00:00:45] and something that could break your
[00:00:46] application entirely beginners don't
[00:00:48] write a lot of code because they don't
[00:00:49] know how but as they gain more
[00:00:51] experience they start writing more code
[00:00:52] eventually everybody realizes that less
[00:00:54] is more and the total lines of code
[00:00:56] decrease while productivity increases
[00:00:58] however someday you may trans send to
[00:01:00] the genius level 10x engineer at which
[00:01:02] point the lines of code you produce will
[00:01:04] go negative I for one am not afraid to
[00:01:06] admit that I regret 99% of the code I've
[00:01:08] written I distinctly remember feeling
[00:01:09] like a genius when I implemented my
[00:01:11] first abstraction Factory Singleton
[00:01:13] proxy decorator in JavaScript however a
[00:01:15] few years later an angel came to me in a
[00:01:17] dream and said bro you could have just
[00:01:19] made that a regular function an idiot
[00:01:21] admires complexity a genius admires
[00:01:23] Simplicity and at that point I realized
[00:01:25] my entire life was a lie Simplicity is
[00:01:27] always a good thing to strive for but
[00:01:29] there's a lot of other trade-offs to
[00:01:30] consider like readability performance
[00:01:32] maintainability testability reusability
[00:01:35] and so on in addition what's the
[00:01:37] definition of Simplicity is it about
[00:01:39] brevity or readability or something else
[00:01:41] entirely in my opinion it all comes down
[00:01:43] to time the goal is to minimize the
[00:01:44] amount of time anyone has to spend
[00:01:46] messing around with your garbage code
[00:01:48] regret number two I wish I would have
[00:01:49] learned to code earlier when you're
[00:01:51] young your brain is highly optimized for
[00:01:53] learning but as you get old and crusty
[00:01:55] and your pineal gland is calcified by
[00:01:56] the fluoride in the water your ability
[00:01:58] to learn becomes diminished that's why
[00:02:00] most worldclass musicians start at a
[00:02:02] very young age now you can learn to play
[00:02:03] the piano or learn to code at any age
[00:02:05] hell I learned how to play the Triangle
[00:02:07] Well into my 30s but if you start
[00:02:08] learning how to code when you're 2 or 3
[00:02:10] years old you should easily be able to
[00:02:12] land a six-figure job by the time you're
[00:02:14] 13 now most people won't admit it but
[00:02:16] there's definitely agism in Tech
[00:02:17] employers will often prefer a younger
[00:02:19] programmer with a more malleable brain
[00:02:21] and that's why the median age of
[00:02:23] programmers around the world is around
[00:02:24] 30 obviously starting young is great for
[00:02:26] a lot of things I wish I would have
[00:02:28] bought Microsoft stock back in the'80s
[00:02:29] the only problem is that I wasn't born
[00:02:31] yet so if you want to learn how to code
[00:02:33] the best time to start is in the womb
[00:02:34] but the second best time is right now
[00:02:36] because we're not getting any younger
[00:02:38] before we move on to the next one one
[00:02:39] thing I don't regret is installing the
[00:02:41] Chrome plugin for daily dodev the
[00:02:43] sponsor of today's video it's a
[00:02:45] completely free tool that keeps you up
[00:02:47] to speed on developer news so you never
[00:02:49] miss out on the latest new gamechanging
[00:02:50] JavaScript framework it's a tool built
[00:02:52] by Developers for developers to curate
[00:02:55] all the information you need in the
[00:02:56] programming space but most importantly
[00:02:58] it's a great place to network with other
[00:03:00] like-minded developers not only will you
[00:03:02] find discussions throughout the site but
[00:03:04] you can also join squads to network with
[00:03:06] other professionals using the same text
[00:03:08] stack as you it's truly an amazing
[00:03:09] resource and at the low low price of
[00:03:11] free really every developer should be
[00:03:13] part of the daily dodev community and
[00:03:15] that brings us to regret number three I
[00:03:16] wish I would have finished more projects
[00:03:18] this is what my side projects directory
[00:03:20] looks like and of all these projects I
[00:03:22] finished maybe two or three of them
[00:03:23] finishing a software project almost
[00:03:25] always takes way longer than you'll
[00:03:26] estimate there's something called the
[00:03:28] 9090 rule where when you feel like
[00:03:30] you're 90% done with a project you still
[00:03:32] have 90% to go it's not like building a
[00:03:34] bridge where everything is laid out in a
[00:03:35] blueprint with software you'll almost
[00:03:37] always have all kinds of unexpected
[00:03:39] things come up and if you're a solo
[00:03:41] developer you might get distracted and
[00:03:43] just quit the project and start
[00:03:44] something entirely new from scratch I've
[00:03:46] done that more times than I can count in
[00:03:48] fact I'm even considering not finishing
[00:03:49] this video in retrospect though I really
[00:03:51] regret not finishing those projects I
[00:03:53] don't even want to think about all the
[00:03:54] hours flushed down the toilet with
[00:03:56] nothing to show for it however it's also
[00:03:58] important to be honest with yourself and
[00:04:00] recognize when your app sucks that some
[00:04:02] projects just aren't worth finishing and
[00:04:04] sometimes knowing when to cut your
[00:04:05] losses is even more important than
[00:04:06] finishing a project regret number four I
[00:04:09] wish I would have gotten a computer
[00:04:10] science degree going to college is not
[00:04:12] the most efficient way to learn how to
[00:04:13] code you learn far more in a real world
[00:04:15] job or by building things on your own
[00:04:17] and you don't need a degree to get a job
[00:04:19] even at Big tech companies but going to
[00:04:21] college and networking and doing
[00:04:22] internships is the most Surefire way to
[00:04:24] get a high-paying job in Tech at a young
[00:04:26] age and there are many jobs out there
[00:04:28] that do require a degree even even
[00:04:29] though it's arguably pointless what you
[00:04:31] don't want to do is get scammed like all
[00:04:33] these Millennials who went to college
[00:04:34] for a useless degree like Egyptian
[00:04:36] studies only to find out that there's no
[00:04:38] jobs in that field so they go back to
[00:04:39] school to get a PhD in Egyptian studies
[00:04:42] to teach other kids Egyptian studies
[00:04:44] creating a literal pyramid scheme
[00:04:45] speaking of pyramid schemes regret
[00:04:47] number five I wish I would have bought
[00:04:49] Bitcoin in 2010 had you invested $100 in
[00:04:51] Bitcoin when it was at 25 you'd be worth
[00:04:54] about 25 million today that makes me sad
[00:04:56] but it does bring me some joy to realize
[00:04:58] that there are people out there that
[00:05:00] bought Bitcoin at that price point only
[00:05:01] to throw away their hard drive and are
[00:05:03] now out there searching through
[00:05:04] landfills to try to find them but
[00:05:05] watching their suffering makes me feel a
[00:05:07] little bit better about myself regret
[00:05:09] number six I wish I would have learned
[00:05:10] lower level languages like C most
[00:05:12] programmers today start by learning
[00:05:14] highlevel languages like Python and
[00:05:16] JavaScript and you can build an entire
[00:05:18] career without ever learning anything
[00:05:19] lower than that but that begs the
[00:05:21] question are you a real programmer and
[00:05:23] the answer is no no you are not luckily
[00:05:26] though all you have to do is learn the
[00:05:27] basics of C which is a lot easier than
[00:05:29] you I think you can learn it in 100
[00:05:31] seconds or watch Channels like low-level
[00:05:33] learning either way once you write your
[00:05:34] first Segal you officially become a real
[00:05:36] programmer but seriously even if you
[00:05:38] don't need a low-level language learning
[00:05:40] the basics of C will just make you a
[00:05:42] better programmer I started with highle
[00:05:43] languages like Java and PHP however if I
[00:05:46] could go back I would have learned C
[00:05:48] first because it gives you such a great
[00:05:49] foundation for everything else regret
[00:05:51] number seven JavaScript on the server
[00:05:53] personally I don't regret JavaScript on
[00:05:55] the server at all I use the JavaScript
[00:05:57] in the browser I use it to build mobile
[00:05:58] apps desktop top apps it's smart fridge
[00:06:01] apps I use it for machine learning and
[00:06:02] for VR and everything in between
[00:06:04] including on the server and I have no
[00:06:06] regrets JavaScript may not be the most
[00:06:08] CPU and memory efficient language on the
[00:06:10] server it may not have true type safety
[00:06:12] and some of its npm packages may try to
[00:06:14] mine crypto on your server but for me
[00:06:15] being able to write JavaScript on the
[00:06:17] server results in much faster
[00:06:18] development and iteration because you've
[00:06:20] got a single language across the entire
[00:06:22] text stack regret number eight grinding
[00:06:24] leak code many developers dream of
[00:06:26] getting into a big Tech corporation like
[00:06:28] Google Microsoft or Pi Piper but to do
[00:06:30] that you'll need to get past a technical
[00:06:32] interview or multiple technical
[00:06:33] interviews but the only way to get good
[00:06:35] at algorithms is to practice like many
[00:06:37] programmers I've spent countless hours
[00:06:39] practicing on Le code but every single
[00:06:41] time my solution is to brute force it
[00:06:43] with a hash table in retrospect though I
[00:06:45] regret wasting all this time here
[00:06:46] because the Pinnacle of my career has
[00:06:48] been teaching people how to center divs
[00:06:49] on YouTube regret number nine I wish I
[00:06:51] would have prioritized my health earlier
[00:06:53] sitting on your ass in front of a
[00:06:54] computer all day is one of the least
[00:06:56] healthy activities you can do according
[00:06:58] to science it's right up there with
[00:06:59] obesity and smoking if you combine this
[00:07:01] activity with high amounts of stress and
[00:07:03] a bad diet chances are your heart's
[00:07:05] going to explode by the time you're 30 I
[00:07:06] think a lot of people underestimate the
[00:07:08] dangers of this career there's no way to
[00:07:10] avoid being in front of a computer but
[00:07:12] there's a lot of things you can do to
[00:07:13] reduce the risk like get a standing desk
[00:07:15] take regular breaks and don't consume
[00:07:17] products like Prime which is currently
[00:07:19] being sued for having a massive amount
[00:07:20] of cancer-causing pfas inside every
[00:07:22] bottle in addition when you take care of
[00:07:24] your physical health your mental health
[00:07:26] and sharpness will also improve as a
[00:07:28] result thus making you a a better
[00:07:29] programmer and finally that brings us to
[00:07:31] regret number 10 I wish I never would
[00:07:33] have learned a code in the first place
[00:07:34] I've always found writing code very
[00:07:36] satisfying but sometimes it feels like
[00:07:38] we're not doing anything real like we're
[00:07:39] just creating fake vaporware for a boss
[00:07:42] with a fake job title who needs to hit
[00:07:43] kpis for some fake performance metrics
[00:07:46] to make some fake money for investors I
[00:07:48] envy the scuba instructor who gets to
[00:07:49] swim with turtles all day or the
[00:07:51] paramedic who saves lives every day
[00:07:53] these jobs might not pay as well but at
[00:07:54] least they feel real I fear in my final
[00:07:56] moments my grandchild will inquire about
[00:07:58] my life's eon lishments and the most
[00:08:00] impressive feed I can muster is
[00:08:02] something
[00:08:05] like the Wilson back in 24 I once
[00:08:08] managed to fix a production bug while
[00:08:10] only creating three more bugs in the
[00:08:12] process thanks for watching and I will
[00:08:14] see you in the next one
