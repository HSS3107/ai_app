Title: How To Build A $1,000,000 SaaS In 7 Hours
Channel: Web Dev Simplified
Published: 2024-10-22T16:01:00Z
Duration: PT6H30M15S
Description: Try Clerk: https://go.clerk.com/J5ucSbS
Try Neon: https://fyi.neon.tech/wds2


Building a SaaS is the ultimate goal of many software developers, but it is not easy. In this video I will show you how to create a clone of the Parity Deals site (which earns well over $1,000,000 per year in revenue. I will also show you best practices for creating large scale SaaS applications so that you can expand these concepts to any SaaS.

üìö Materials/References:

GitHub Code: https://github.com/WebDevSimplified/parity-deals-clone
Try Clerk: https://go.clerk.com/J5ucSbS
Try Neon: https://fyi.neon.tech/wds2


üåé Find Me Here:

My Blog: https://blog.webdevsimplified.com
My Courses: https://courses.webdevsimplified.com
Patreon: https://www.patreon.com/WebDevSimplified
Twitter: https://twitter.com/DevSimplified
Discord: https://discord.gg/7StTjnR
GitHub: https://github.com/WebDevSimplified
CodePen: https://codepen.io/WebDevSimplified


‚è±Ô∏è Timestamps:

00:00:00 - Introduction
00:01:10 - Project Demo/Overview
00:04:35 - Next.js Setup
00:07:35 - ShadCN Setup
00:09:07 - Navbar Design
00:15:50 - Clerk Setup
00:18:29 - Landing Page Design
00:46:44 - Sign In/Sign Up Pages
00:50:16 - Dashboard Navbar Design
00:54:04 - Private Route Setup
00:56:44 - Database Setup
00:59:40 - Type Safe Environment Variables
01:03:40 - Drizzle Setup
01:19:17 - Clerk Webhooks
01:26:51 - IMPORTANT: Database Clean Code
01:29:28 - Finish Clerk Webhooks
01:33:00 - Dashboard Home Page
01:37:25 - New Products Form
02:04:30 - Product Grid
02:31:00 - IMPORTANT: Caching System
02:52:40 - Edit Product Details Form
03:08:34 - Edit Product Country Discounts Form
03:52:10 - Start Edit Product Customization Form
03:54:36 - IMPORTANT: User Permissions
03:58:10 - Finish Edit Product Customization Form
04:16:49 - More User Permissions
04:24:40 - User Subscription Page
04:36:10 - Stripe Integration
05:08:49 - Banner API
05:31:52 - Analytics Page
06:25:57 - Fixing Mistakes


#SaaS #WDS #NextJS

Transcript:

[00:00:00] by the end of this video I'm going to
[00:00:01] show you all the code you need to write
[00:00:02] to create a business that can easily
[00:00:04] earn over a million dollars a year and
[00:00:07] I'm going to be doing it using the
[00:00:08] latest and greatest nextjs features and
[00:00:10] I'm even going to show you how you can
[00:00:11] write your code in a way that is very
[00:00:13] modular modern and clean so you can
[00:00:15] extend this project to be as large and
[00:00:17] complex as you need it's honestly some
[00:00:19] of the best code that I've ever written
[00:00:21] that I'm going to show you in this video
[00:00:22] and to create this seven figure business
[00:00:24] we're going to be making a clone of the
[00:00:26] site parody deals this is a real
[00:00:27] application that as you can see I
[00:00:29] currently use I pay about $500 to $1,000
[00:00:31] a year to this service and same with all
[00:00:33] of these other people they're all paying
[00:00:35] hundreds or even thousands of dollars to
[00:00:37] this service I'm going to show you how
[00:00:38] to create a clone of it that does all of
[00:00:39] the same things and even improves on
[00:00:41] many of the problems that this site has
[00:00:43] and throughout this entire process I'm
[00:00:45] going to be explaining exactly what I do
[00:00:46] step by step so you can understand why
[00:00:48] the code works why I'm writing it the
[00:00:50] way I'm writing it and what actually
[00:00:51] makes it clean code this is going to be
[00:00:53] a really long video but I guarantee if
[00:00:54] you stick through the entire thing
[00:00:55] you're going to learn invaluable skills
[00:00:57] that'll help you with this project and
[00:00:58] any other project you build
[00:01:00] [Music]
[00:01:03] welcome back to web dev simplified my
[00:01:04] name is Kyle and my job is to simplify
[00:01:06] the web for you so you can start
[00:01:07] building your dream project sooner and
[00:01:09] to understand how this project can earn
[00:01:10] over a million dollars a year we first
[00:01:12] need to understand what the project is
[00:01:13] that we're building I already talked
[00:01:15] about it being a clone of the parody
[00:01:17] deals website and essentially all this
[00:01:18] website does is figure out what country
[00:01:20] a user is coming from and then it shows
[00:01:22] them a different coupon based on where
[00:01:24] they're coming from so that someone from
[00:01:25] India for example can get a higher
[00:01:27] discount than someone from the US where
[00:01:28] maybe they don't even need a discount so
[00:01:31] for example I have here multiple
[00:01:32] different products and if I were to go
[00:01:34] into edit one of these products you can
[00:01:35] see if I click on the countries tab I
[00:01:37] can determine exactly what discount I
[00:01:38] want to give to different groups of
[00:01:39] countries and all these countries are
[00:01:41] grouped by the amount of discount that
[00:01:42] they should get so for example the
[00:01:44] purchasing poty in this group of
[00:01:46] countries is anywhere between 20 to 30%
[00:01:48] of the purchasing power in the US so
[00:01:50] someone from this group has about 20% of
[00:01:52] the buying power somewhere from the us
[00:01:54] so we can offer them a rather large
[00:01:55] discount while someone up here in this
[00:01:57] higher group we may not want to offer
[00:01:58] any discount at all because they already
[00:02:00] have really good purchasing power now
[00:02:01] since I'm from the US I put a discount
[00:02:03] of 12% in here with a coupon Cod of test
[00:02:05] and if we go to the website where this
[00:02:06] is hosted you can see I get a banner at
[00:02:08] the top saying hey you're from the
[00:02:09] United States we support this purchasing
[00:02:11] imp parody here's a coupon of the code
[00:02:13] test to get 12% off anything on our site
[00:02:15] and the really nice thing is is we can
[00:02:16] actually customize exactly what this
[00:02:17] Banner looks like in this customization
[00:02:19] section we can change the text we can
[00:02:21] change the colors we can change the font
[00:02:22] size for example I can make it a really
[00:02:24] large font size give that a quick save
[00:02:26] now if I come over here refresh you can
[00:02:27] see it's much larger I can customize EX
[00:02:30] everything I want to do and I even have
[00:02:32] set up for CSS prefixes so you can
[00:02:34] manually customize the exact CSS that
[00:02:36] comes out so you can really configure it
[00:02:38] to be anything that you want it to be on
[00:02:39] top of that we have in-depth analytics
[00:02:41] on exactly what's happening for example
[00:02:43] we can see you know each day who's
[00:02:45] coming to our site we can see exactly
[00:02:46] what groups these people are coming from
[00:02:48] and even the individual countries
[00:02:49] everyone that's visiting our site is
[00:02:51] coming from and we can even determine it
[00:02:52] based on each individual product we can
[00:02:54] change the ranges and we can even change
[00:02:56] the time zone that we show this
[00:02:57] information in so for example if you
[00:02:59] want to see it in your your local time
[00:03:00] zone or UTC you can change that right
[00:03:02] there lastly we can manage all of the
[00:03:03] information about our subscription and
[00:03:05] that's because this is a full SAS
[00:03:06] application which is how it can earn
[00:03:08] over a million dollar a year because you
[00:03:09] can see on this highest plan you have to
[00:03:11] pay $100 a month and you only need a
[00:03:13] th000 people paying $100 a month
[00:03:15] actually less than a th000 people
[00:03:16] technically but a th000 people paying
[00:03:18] $100 a month is over a million dollars
[00:03:20] of year in income for your product and
[00:03:22] that's something that you can easily
[00:03:23] achieve with the product that I'm about
[00:03:24] to show you how to build so you can see
[00:03:26] here we have a SAS with different
[00:03:27] permissions and different levels of
[00:03:28] things that they can have for example
[00:03:29] about how many products their different
[00:03:30] monthly usage and so on and you can even
[00:03:32] manage your description and all this is
[00:03:34] handled inside a stripe so you can go
[00:03:35] ahead update your pan update your
[00:03:36] payment information and so on literally
[00:03:38] everything you would ever want to change
[00:03:39] or you can just you know manually say I
[00:03:41] want to swap to the $100 a month version
[00:03:43] and here you go I can just click Swap
[00:03:44] and it's that easy we also have in-depth
[00:03:46] permission handling for example if I log
[00:03:47] into a separate account that is on the
[00:03:49] basic free subscription plan you can see
[00:03:51] they don't have access to analytics and
[00:03:53] they don't have access to Banner
[00:03:54] customization and they can only have one
[00:03:55] product so for example if I try to
[00:03:57] create a new product I get a warning
[00:03:58] saying hey permission denied if I try to
[00:04:00] access analytics again permission denied
[00:04:02] or if I try to edit my product and I
[00:04:03] want to customize it again permission
[00:04:05] denied these are not things that you can
[00:04:06] change I'm going to show you how to
[00:04:07] build all of that in this video and the
[00:04:09] best part is I'm going to show you how
[00:04:10] to do it using modern tools such as
[00:04:12] nextjs and I'm going to show you how to
[00:04:14] build it in a way that is clean code and
[00:04:15] maintainable which means that we're
[00:04:17] going to be able to handle all these
[00:04:18] things like permissions in a way that
[00:04:20] it's super extendable to literally
[00:04:21] anything you want same thing with
[00:04:23] caching we're going to have a really
[00:04:24] robust caching system I'm going to have
[00:04:26] different rules and clean code practices
[00:04:27] in place to make this the best code that
[00:04:29] you could possibly write so no matter
[00:04:31] how large this code base grows it's
[00:04:33] still going to be just as easy to work
[00:04:34] on as when you just getting started now
[00:04:36] to get started I just have a blank text
[00:04:37] edit to open we're going to be using
[00:04:38] nextjs for our framework of choice so
[00:04:40] npx create next app at latest to get the
[00:04:45] latest version and we're going to
[00:04:46] install that in the current version of
[00:04:47] our directory I'm going to hit yes to
[00:04:49] proceed I'm going to say I want to use
[00:04:50] typescript eslint Tailwind CSS The
[00:04:52] Source directory the app router and I
[00:04:54] don't really care about customizing my
[00:04:55] import Alias now that's going to go
[00:04:57] ahead and install and while that's
[00:04:58] happening I want to talk about our full
[00:04:59] Tech stack we have nextjs for our
[00:05:01] framework we're going to be using Shad
[00:05:03] CN and Tailwind UI for all of our CSS
[00:05:05] and styling we're going to use stripe
[00:05:07] for handling all of our different
[00:05:08] payment billing SAS Integrations and so
[00:05:10] on we're going to be using clerk for our
[00:05:12] authentication and we're going to be
[00:05:13] using neon for our database which is
[00:05:15] built on top of drizzle and postgress
[00:05:17] which is what we're going to be using
[00:05:17] for our omm and behind the- scenes
[00:05:19] database now Clerk and neon are sponsors
[00:05:21] of this video and it's really great that
[00:05:23] they're able to sponsor videos like this
[00:05:24] because they're tools that I already use
[00:05:26] anyway and it allows me to build these
[00:05:28] massive large projects in enely for free
[00:05:30] for you to be able to use because these
[00:05:32] take weeks of my time even months
[00:05:34] sometimes to build out so be able to
[00:05:35] share this with you for free is only
[00:05:37] possible with Clerk and neon sponsoring
[00:05:38] so I highly recommend checking them out
[00:05:40] if you like their product in the video
[00:05:41] now once we have our basic application
[00:05:42] up and running we can just npm run Dev
[00:05:45] and that's going to start our
[00:05:46] application we can open up on Local Host
[00:05:47] 3000 and we'll just see the boiler plate
[00:05:49] nextjs screen now before we go ahead and
[00:05:51] actually do anything the very first
[00:05:52] thing that I want to do is just take our
[00:05:54] code and clean it up a little bit cuz we
[00:05:55] don't need a lot of the default stuff
[00:05:57] for example I don't really care about
[00:05:58] having this vacon we can change it to
[00:06:00] our own inside of here I'm going to
[00:06:01] pretty much get rid of all of these
[00:06:02] basic Styles except for the Tailwind
[00:06:04] ones I'm just going to leave that in
[00:06:05] there and our layout we can keep these
[00:06:07] default fonts that they give us that's
[00:06:08] okay you can see we have our font
[00:06:10] showing up right here and then finally
[00:06:11] in our page I'm just going to get rid of
[00:06:13] everything and Export a default function
[00:06:16] homepage and I'm just going to return
[00:06:18] null from there just so we have a blank
[00:06:19] page to start with now the final thing I
[00:06:21] want to do is to set up our Tailwind
[00:06:22] config because inside this layout we
[00:06:24] have these different fonts that we want
[00:06:25] to be able to use so if we come into
[00:06:27] Tailwind we can get rid of this
[00:06:28] extension for the colors since we're not
[00:06:29] actually using those base colors anymore
[00:06:31] and instead we can extend the font
[00:06:33] families so I'm going to copy in the
[00:06:35] code for this if we look over at our
[00:06:36] page our layout you can see here that we
[00:06:38] have a mono font being imported and a
[00:06:40] Sans font being imported so inside of
[00:06:42] here all that I'm doing is I'm saying
[00:06:44] okay for my Sans font I want to use that
[00:06:46] and for my mono font I want to use that
[00:06:48] and otherwise I'm going to fall back to
[00:06:49] the default F font family so we can get
[00:06:51] that font
[00:06:53] family from Tailwind CSS and that's
[00:06:56] going to be coming from the default
[00:06:58] theme so we can just just type in like
[00:07:00] that and there we go now we've extended
[00:07:01] our font family to use that font family
[00:07:03] directly from nextjs that we're
[00:07:05] importing the next thing I want to do is
[00:07:06] I want to slightly modify how my
[00:07:08] container looks so for my container I
[00:07:10] want to center it by default and this is
[00:07:12] just the container class that you add on
[00:07:14] to anything so anytime I add a container
[00:07:16] class I want to make sure that it's
[00:07:17] going to be centered I want to have some
[00:07:18] padding on the sides of 1.5 RM and I
[00:07:21] want to make it fill 100% of my screen
[00:07:23] size up to 1200 pixels at the maximum
[00:07:25] size it'll never be larger than 1200
[00:07:27] pixels just so it doesn't get too wide
[00:07:29] so so those the only changes I'm going
[00:07:30] to be making to my Tailwind config and
[00:07:32] that's just going to make it so my
[00:07:33] container looks a little bit better we
[00:07:34] can close out of that and we can close
[00:07:36] out of our layout now the next step I
[00:07:37] want to go through before we start
[00:07:38] building out some code is to install
[00:07:39] Shad CN so we can just go through the
[00:07:41] installation steps they're rather easy
[00:07:43] we can just run npx Shad CN at latus and
[00:07:45] knit and if you just put- D it uses the
[00:07:47] default values which is what we're going
[00:07:48] to do so I'm just going to install that
[00:07:50] right now and what that's going to do is
[00:07:52] it's going to essentially set up a bunch
[00:07:53] of different files for us if we just
[00:07:55] wait a second for that to finish you'll
[00:07:56] see inside of our source folder we now
[00:07:58] have a lib folder that contains all of
[00:08:00] our utils and if I were to add something
[00:08:01] like this button component which I'm
[00:08:03] just going to paste in here to add
[00:08:04] you'll now see that that's going to add
[00:08:06] a components folder and inside that
[00:08:07] component's folder is going to be our
[00:08:09] button right here which we can make any
[00:08:10] changes that we need to now the very
[00:08:12] first change that I want to make to our
[00:08:13] application is back inside of our layout
[00:08:15] I want to change some of the styles that
[00:08:16] we have here right now we have our fonts
[00:08:18] in this anti-alias thing but I also want
[00:08:20] to make sure that I set this to font
[00:08:21] sand to make sure it Imports the actual
[00:08:23] custom fonts and I want to set my
[00:08:25] background to my background color that
[00:08:27] way it has a slightly different
[00:08:29] background color on our page now I also
[00:08:30] want to modify some of the variables in
[00:08:32] our CSS file because that's really the
[00:08:34] beauty of using Shad CN is you can
[00:08:36] change any of these variables to exactly
[00:08:37] what you want in our case I want to
[00:08:38] change what our accent color is cuz by
[00:08:40] default the accent color is the same as
[00:08:42] this muted in secondary color I want
[00:08:43] this to be like a blue color that's
[00:08:45] going to be what our application is so
[00:08:46] we're going to use 193 as our Hue we're
[00:08:49] going to use 82% here as our saturation
[00:08:52] and then we're going to use 31% for our
[00:08:54] lightness and you could also add in a
[00:08:56] dark mode version of this but there is
[00:08:57] no dark mode in our site so I'm just
[00:08:58] going to ignore that for now and move on
[00:09:00] to the foreground version and for our
[00:09:01] foreground version we're just going to
[00:09:03] set this to 0 0 and 100% which is
[00:09:06] essentially Pure White now before we
[00:09:07] bother with stripe Clerk or neon I want
[00:09:09] to go ahead and just work on creating
[00:09:11] the actual homepage this landing page of
[00:09:13] our application so the best way for us
[00:09:15] to do that is to separate our app into
[00:09:17] two distinct groups we're going to have
[00:09:19] our group for marketing this is like our
[00:09:21] homepage and so on and then we're going
[00:09:23] to have a group for our dashboard and
[00:09:24] I'm actually going to put our dashboard
[00:09:26] group in its own URL so everything
[00:09:28] that's SL dashboard is going to be for
[00:09:30] our dashboard Pages like our creating
[00:09:32] products and all those different
[00:09:34] customizations that we talked about
[00:09:35] while anything in this marketing folder
[00:09:37] is specifically for things like our
[00:09:38] homepage and so on and the nice thing
[00:09:40] with doing it this way is it makes it
[00:09:41] really easy to see okay everything in
[00:09:43] dashboard is for our dashboard
[00:09:44] everything in marketing is for all of
[00:09:45] like our homepages and so on our landing
[00:09:47] pages and marketing and pricing tables
[00:09:49] all that jazz so in here let's go ahead
[00:09:51] and create a layout. TSX this is going
[00:09:54] to be a function which is our marketing
[00:09:57] layout let's get the children in side of
[00:09:59] there and we're going to say the
[00:10:01] children are a react node just like that
[00:10:04] now inside of this component it's going
[00:10:05] to be pretty straightforward I'm just
[00:10:06] going to return a div that allows us to
[00:10:08] actually create some styling to wrap
[00:10:10] everything I'm going to have a nav bar
[00:10:12] inside of here this is a custom
[00:10:14] component we're going to create outside
[00:10:15] of this component and then I'm going to
[00:10:17] render out our children below that now
[00:10:19] the only thing that I want to do inside
[00:10:21] of my nav is you can see on this page
[00:10:22] when I highlight it gives me this nice
[00:10:24] color of like pink when I highlight so I
[00:10:25] want to add that pink color so let's add
[00:10:27] a class name here we can specify the
[00:10:29] selection class that's for tailwind and
[00:10:31] we can specify when we want to modify
[00:10:33] the background and we want to give it a
[00:10:35] specific color I'm just going to copy
[00:10:36] over that color just like that so we can
[00:10:39] see that this color is going to be this
[00:10:40] purplish color but it's at a 20% opacity
[00:10:43] so now if I were to actually highlight
[00:10:45] something for example I put some text
[00:10:46] inside of there come back to my
[00:10:48] application and of course right now when
[00:10:49] I'm refreshing nothing happens and
[00:10:50] that's cuz it's rendering this blank
[00:10:52] page here we don't actually need this
[00:10:53] page to be here I want it to be in my
[00:10:55] marketing layout so now it's going to
[00:10:57] render that blank page inside of here so
[00:10:59] let's make sure we give everything a
[00:11:00] quick save close out of that there we go
[00:11:03] and now if I give my page a refresh you
[00:11:05] notice we're getting errors that's
[00:11:06] because this should be a default export
[00:11:08] there we go so now when I highlight this
[00:11:10] pink text or this text you can see I get
[00:11:11] this nice pink background it looks
[00:11:13] relatively good now let's go ahead and
[00:11:15] focus on our nav bar because that's the
[00:11:16] next thing I want to work on and also to
[00:11:18] help keep my code clean I could put this
[00:11:20] component directly in my component's
[00:11:22] folder but this Navar is only for pages
[00:11:24] on my marketing layout so instead I'm
[00:11:26] going to actually put that directly in
[00:11:27] this folder here called under score
[00:11:29] components by putting an underscore in
[00:11:31] front of a folder name it means it's
[00:11:32] ignored for all routing purposes so this
[00:11:34] will not do any routing and now inside
[00:11:36] of here I can create my navb bar. TSX
[00:11:39] file this is really great because now
[00:11:40] all my marketing only components can be
[00:11:42] in this folder right here this is just
[00:11:44] one small step on creating clean code
[00:11:46] which we're going to cover a lot in this
[00:11:47] video so now here I want to export that
[00:11:49] Navar component it's not going to take
[00:11:51] in anything and it's going to start by
[00:11:53] having a header because this is going to
[00:11:54] be the header of our application inside
[00:11:56] of there we're going to have a nav which
[00:11:57] is going to contain all of our different
[00:11:58] links and we can go ahead and create our
[00:12:00] links which come from nextjs now this
[00:12:02] very first link is just going to link to
[00:12:04] our homepage so we'll give it that right
[00:12:05] there and it's also going to push
[00:12:06] everything off to the right hand side
[00:12:07] you can see here we have our big link on
[00:12:09] the left and if I just expand my screen
[00:12:11] a little bit grab all of our other links
[00:12:12] obviously this is not super well mobile
[00:12:14] optimized but all those links you can
[00:12:15] see are pushed off to the right hand
[00:12:17] side again this parody deal site has a
[00:12:19] lot of improvements that could be made
[00:12:20] to it and we're going to be making those
[00:12:21] improvements so to push all of our other
[00:12:23] links to the right we'll say margin
[00:12:24] right of Auto and we also need to have a
[00:12:27] flex container to be inside of here to
[00:12:29] make that margin right work so we'll
[00:12:30] make this a flex container there we go
[00:12:32] we'll also put our items in the center
[00:12:34] while we're at it so we'll say items
[00:12:35] Center and a gap of 10 to separate
[00:12:37] essentially this parody deals from the
[00:12:39] text on the right otherwise if we don't
[00:12:40] do that we're going to run into a
[00:12:41] problem where we have all the text
[00:12:42] squished up together so we're going to
[00:12:44] fix that by putting in a gap there I'm
[00:12:46] also going to give this the container
[00:12:47] class to make sure all of the content
[00:12:49] inside this nav does not get too large
[00:12:51] for example if we increase the screen
[00:12:52] size here and we zoom out you can see
[00:12:54] here it confines the size of the space
[00:12:56] that our nav can take up so that's
[00:12:57] essentially what our container is
[00:12:59] allowing us to do is just confine the
[00:13:00] space that everything takes up lastly
[00:13:02] just to make my font pop a little bit
[00:13:04] we're going to say our font is going to
[00:13:05] be semi bold so it's just a slightly
[00:13:06] more bold than normal font now inside of
[00:13:08] here I'm actually going to put my brand
[00:13:10] logo and I'm going to put that inside of
[00:13:11] its own component that's because I'm
[00:13:13] going to use this in a lot of different
[00:13:14] places and I'm going to use this both on
[00:13:16] my homepage as well as inside of my
[00:13:18] dashboard so this is a component that
[00:13:19] makes sense to put in this component's
[00:13:21] folder so we'll say here that we have
[00:13:23] our brand logo. TSX because this will be
[00:13:26] used everywhere inside of our
[00:13:27] application now I'm just going to copy
[00:13:29] the code over for our brand logo and
[00:13:30] explain what it is cuz it's relatively
[00:13:32] straightforward all we have is a single
[00:13:33] span which we have a flex container set
[00:13:35] up on with a gap of two to give it a
[00:13:37] little bit of space we made the font
[00:13:38] semi bold which in this case is not
[00:13:40] super required but again we're just
[00:13:42] reinforcing that it's semi bold we're
[00:13:43] making sure it can't shrink down at all
[00:13:45] and then finally we're making sure
[00:13:47] everything is pushed off to the right
[00:13:48] hand side we could probably get rid of
[00:13:49] this that should still work just fine
[00:13:50] and we're also making this so our text
[00:13:52] is a little bit larger finally inside
[00:13:53] here we have this globe icon that's
[00:13:55] showing up and we have this span
[00:13:57] obviously you can create your own custom
[00:13:58] icon so on but this is just a really
[00:14:00] basic Bare Bones version we can get
[00:14:01] working so now let's import all this to
[00:14:03] actually see if what we've written is
[00:14:05] working so inside here we're going to
[00:14:06] import that nav bar and if we go back to
[00:14:08] our application you can see at the very
[00:14:10] top here we have our logo showing up so
[00:14:11] far we don't have any other crazy
[00:14:13] styling going on but at least we have
[00:14:14] something working now to make it a
[00:14:15] little bit more obvious that essentially
[00:14:17] we have our nav bar at the top with
[00:14:19] different styles on it to distinguish it
[00:14:21] from the rest of our application let's
[00:14:22] style our header a little bit by giving
[00:14:24] this some class names so we can say here
[00:14:26] the class name on this is going to be
[00:14:27] Flex to be a flex container we're also
[00:14:29] going to put some padding in the y
[00:14:31] direction of six to space things out I'm
[00:14:33] going to add a large Shadow on it so if
[00:14:35] we give that a quick save you can
[00:14:36] already see that now we have at least
[00:14:37] separated this a little bit I'm also
[00:14:39] going to fix this to the top of the
[00:14:41] screen so we'll say fixed with a top of
[00:14:42] zero and we're going to make sure it
[00:14:44] fills the full width by using a w of
[00:14:46] full lastly to make sure it shows up on
[00:14:47] top we'll put a z index on it and the
[00:14:50] background color I'm going to make it
[00:14:51] partially transparent so I'm going to
[00:14:53] use my background color but I'm going to
[00:14:55] make it 95% opaque so that means it has
[00:14:57] a slight transparency which which means
[00:14:59] if there's any text behind here it'll
[00:15:00] slightly show through which is exactly
[00:15:02] how the parody deal site works if I
[00:15:04] expand this and I scroll down you can
[00:15:05] see that you can see all the text behind
[00:15:07] it our site's going to have that exact
[00:15:09] same feature inside of our navigation as
[00:15:11] well now we're going to want to add the
[00:15:12] rest of our links down so let me just
[00:15:13] paste in a couple more links we have a
[00:15:15] features link a pricing link and an
[00:15:16] about link they're all exactly the same
[00:15:18] text of large and right now we're not
[00:15:19] going to create these pages so I just
[00:15:21] gave them blank HFS except for pricing
[00:15:23] it has an HF with an anchor on it that's
[00:15:24] because we're going to put the pricing
[00:15:25] on our page so this will scroll to that
[00:15:27] section so there is the rest of our
[00:15:29] links right there and again they do
[00:15:30] absolutely nothing when you click them
[00:15:31] now the final thing I want to add is
[00:15:33] going to be a link for signing in and
[00:15:34] signing out so we're going to have a
[00:15:36] span here to make that text large so
[00:15:37] we'll say text large just like that and
[00:15:39] then what I want to do is I want to come
[00:15:41] in here and I want this to either say
[00:15:42] dashboard or I want it to say log in so
[00:15:45] if we are signed in I want it to say one
[00:15:46] thing versus the other so this is where
[00:15:48] we're going to need to integrate clerk
[00:15:49] into our application which is a
[00:15:51] relatively easy process and it contains
[00:15:53] all the components that we need so the
[00:15:54] first thing we need to do is to install
[00:15:56] clerk so we want to say at clerk SL JS
[00:15:59] because we're using nextjs that's going
[00:16:01] to install all the different components
[00:16:02] that we need inside of our application
[00:16:04] and once we get that done we can
[00:16:06] actually see now inside of here we have
[00:16:08] a component for signed in and this is
[00:16:10] going to be only rendering out the
[00:16:12] content in here if the person is signed
[00:16:13] in so in here we can put a link that
[00:16:16] goes to our dashboard page if they are
[00:16:18] signed in just like this dashboard so
[00:16:21] now if the user is logged in it'll show
[00:16:23] dashboard we also have a component for
[00:16:25] signed out and this is only going to
[00:16:27] render if they are signed out and we can
[00:16:28] render the signin button so we can just
[00:16:30] say signin button like that and it's
[00:16:32] going to say the text log in now we are
[00:16:34] going to get some errors when I try to
[00:16:35] render this out because we don't have
[00:16:37] clerk set up on our application the
[00:16:39] first thing we need to do is to handle
[00:16:40] some Clerk middleware and we also need
[00:16:41] to wrap our entire application in a
[00:16:43] clerk provider so if we go to our layout
[00:16:45] we can come in here and wrap the entire
[00:16:46] thing inside of a clerk provider so this
[00:16:49] clerk provider just gives us access to
[00:16:51] the authenticated user and our entire
[00:16:53] application that's step number one the
[00:16:55] second step is implementing our
[00:16:56] middleware and then we need to hook up
[00:16:58] everything so let's go ahead and get
[00:16:59] started on creating an application just
[00:17:01] create an application inside a clerk
[00:17:02] determine how you want users to log in
[00:17:04] let's say that we want to be able to log
[00:17:05] in with GitHub Google and email that
[00:17:07] works fine let's give our application a
[00:17:09] name of easy PPP because that is kind of
[00:17:12] the name we gave our application we'll
[00:17:14] click create application and that's
[00:17:16] going to get us setup and now we can
[00:17:17] click on nextjs for installation steps
[00:17:19] and this will actually tell us how to
[00:17:20] install everything with nextjs we've
[00:17:22] already gone ahead and installed this we
[00:17:23] can set up our environment variables
[00:17:25] next so I'm going to copy that over come
[00:17:27] over to our application and I'm going to
[00:17:29] create a EnV
[00:17:30] file just like that and paste in our
[00:17:33] file variables right here and the thing
[00:17:35] that I want to make sure that I do with
[00:17:36] this environment variable so I want to
[00:17:37] make sure I ignore this from our get
[00:17:39] ignore so we can come in here EnV and
[00:17:41] we're going to make sure that that is
[00:17:42] completely ignored from our application
[00:17:44] now the reason I'm using EnV like this
[00:17:46] is because when I start to use drizzel
[00:17:48] it requires a EnV file so I can't use
[00:17:50] like env. loal so now we have those
[00:17:52] environment variable saved the next
[00:17:54] thing that we need to do is to create a
[00:17:55] middleware file and give it this exact
[00:17:57] code so I'm going to copy this code I'm
[00:17:58] I'm going to create a brand new file
[00:18:00] called middleware dots I'm going to
[00:18:03] paste in that clerk code right there by
[00:18:04] default this doesn't make any of our
[00:18:06] routes protected at all everything is
[00:18:08] still publicly accessible but we can at
[00:18:10] least do login and sign up and so on and
[00:18:11] I'll show you how to protect routes when
[00:18:13] we get to that point finally we need to
[00:18:14] wrap everything in cler provider like we
[00:18:16] did and that's literally it we're
[00:18:17] entirely done so now back to our
[00:18:19] application we should see hopefully if
[00:18:21] we refresh here everything will work and
[00:18:22] now you can see we have a login button
[00:18:23] because we are currently not logged in
[00:18:25] and when I click on this it's going to
[00:18:26] redirect me to the login page and so on
[00:18:28] so now that we're done setting up clerk
[00:18:30] before we bother with doing like signin
[00:18:31] sign out logic and so on I just want to
[00:18:33] go ahead and finish out our homepage cuz
[00:18:34] right now it's pretty Bare Bones so
[00:18:36] inside of our homepage we'll go to the
[00:18:38] actual page section and we should
[00:18:39] probably render out more than just null
[00:18:41] so I'm going to come in here I'm going
[00:18:42] to render out a fragment and I'm going
[00:18:43] to break each of my different sections
[00:18:45] into a section tag so the very first
[00:18:47] section I want to cover is going to be
[00:18:48] this like homepage section so if we
[00:18:50] bring this out you can see here it has
[00:18:51] this kind of interesting radial
[00:18:53] background with some text as well as
[00:18:55] like a getting started button so I want
[00:18:56] to be able to incorporate all of that
[00:18:58] into our own page
[00:18:59] so the very first thing that I want to
[00:19:00] do is to work on that fancy background
[00:19:02] so we can come in here we can say the
[00:19:03] class name is going to have a Min height
[00:19:05] of screen it's just going to make sure
[00:19:06] this section fills 100% of the screen
[00:19:08] height and then we can specify our
[00:19:10] background now I'm going to copy over
[00:19:12] the value for this background because
[00:19:13] it's just a very complicated radial
[00:19:15] gradient and I'll explain exactly what's
[00:19:17] going on so we have a radial gradient
[00:19:18] right here and essentially we're going
[00:19:20] between a few different colors we
[00:19:21] essentially have this first color which
[00:19:23] is going to be either that purple or
[00:19:24] that pinkish looking color and our
[00:19:26] second color which is the other version
[00:19:27] of that purplish pinkish color and then
[00:19:29] finally we're fading out to our
[00:19:30] background color at around 60% and
[00:19:32] that's just to make it so that this
[00:19:33] radial gradient only fills up this
[00:19:35] middle portion of our screen and doesn't
[00:19:37] extend to fill our entire screen now if
[00:19:39] I give that a quick save you can now see
[00:19:40] we have that purplish orish radial
[00:19:42] gradient in our screen that Fades out to
[00:19:44] 60 at 60% to our background if I were to
[00:19:47] remove this section with my background
[00:19:49] you'll see that this fills my entire
[00:19:50] screen not what I want that's why I have
[00:19:52] this background section on there so we
[00:19:53] have our really big complicated radial
[00:19:55] gradient set up next thing I want to do
[00:19:57] is just Center everything so we'll say
[00:19:58] Flex items in the center justify
[00:20:01] everything in the center and I'm going
[00:20:03] to put my text in the center and I'm
[00:20:05] also going to use text of balance which
[00:20:07] makes it so that when I shrink down my
[00:20:08] screen size my text stays as close to
[00:20:11] possible on the best looking lines
[00:20:12] instead of just having like one text on
[00:20:14] the bottom line like this one will it'll
[00:20:16] actually perfectly balance my text
[00:20:18] across multiple lines so it'll look even
[00:20:19] better than the homepage that we're
[00:20:20] trying to copy finally I want to make
[00:20:22] sure that I have a flex direction of
[00:20:24] column I want to have a gap of eight and
[00:20:26] I want to have some padding on the right
[00:20:28] and left of four so now what we can do
[00:20:30] is we can get our text inside of here
[00:20:32] I'm going to have an H1 for my main text
[00:20:34] this price smarter sell bigger section I
[00:20:36] might as well just copy that text
[00:20:37] because we're going to use the exact
[00:20:38] same text then I'm going to have a
[00:20:40] paragraph tag next and that's going to
[00:20:42] copy this exact text so we'll paste that
[00:20:44] into there and then finally I'm going to
[00:20:46] have a button and this is going to be a
[00:20:47] sign up button so all I'm going to do is
[00:20:49] when I click get started for free it's
[00:20:50] going to bring me to the sign up page so
[00:20:52] we're going to have our sign up button
[00:20:53] and inside that we're going to have our
[00:20:54] button from Shad CN now I'm going to
[00:20:56] specify quite a few classes on here for
[00:20:58] example I want this to be a large button
[00:21:00] so I'm going to have a large text size
[00:21:02] on here just like that I'm going to have
[00:21:04] some pretty large padding on the sides
[00:21:06] and the top so I'm just going to say p
[00:21:07] of six just like that I want it to be a
[00:21:10] rounded XL so it's slightly larger on
[00:21:12] the rounding a flexed as well as a gap
[00:21:14] of two and that's because inside of here
[00:21:15] I'm going to have the text get started
[00:21:17] for free and then finally I'm going to
[00:21:19] have an arrow that is going to the right
[00:21:21] so I want to get the arrow right icon
[00:21:24] and we can also specify a size of that
[00:21:26] which is going to be a size of five so
[00:21:28] now if I come back over to here you can
[00:21:29] see I have that button set up with all
[00:21:31] the different styling I want all I need
[00:21:32] to do is style my text to make it look a
[00:21:34] little better but first you'll notice
[00:21:35] when I shrink down my screen size you
[00:21:37] can see it's perfectly balancing my text
[00:21:39] across multiple different rows which is
[00:21:40] really something that's quite amazing I
[00:21:42] love that CSS feature so let's come in
[00:21:44] here and we can style out what our
[00:21:45] heading is going to look like we want
[00:21:47] our text to be rather large so we're
[00:21:48] going to say 6 XL but if we're on a
[00:21:50] large screen size I want it to be 7 XL
[00:21:53] and if we're on an even larger screen
[00:21:54] size I want it to be 8 XL so it's going
[00:21:56] to scale the font size with large my
[00:21:59] screen is I also want my font to be bold
[00:22:01] I'm going to set the tracking to tight
[00:22:03] to make my letters a little closer
[00:22:04] together and then add some margin I'll
[00:22:06] show you what that tracking tip does if
[00:22:07] I remove this you'll notice how far
[00:22:09] apart my letters are spaced while when I
[00:22:11] add that back in it brings my letters
[00:22:12] closer together generally when you have
[00:22:14] larger font sizes it's better to use a
[00:22:17] tighter tracking because it makes your
[00:22:18] font a little bit easier to read instead
[00:22:20] of spreading everything out while with
[00:22:22] smaller font sizes it's better to have
[00:22:23] larger line spacing and have larger
[00:22:25] tracking to space out your letters a
[00:22:27] little more so again it's easier to read
[00:22:29] now for our paragraph here we can change
[00:22:31] our text I'm going to make it a large
[00:22:32] text by default but on a large screen
[00:22:35] I'll make it a text of three XL to make
[00:22:37] it quite a bit bigger and I'll also
[00:22:39] maximize the size that this can bring to
[00:22:41] my extra large screen so that way it
[00:22:43] doesn't get too large so now if I just
[00:22:45] come in here and I make this a little
[00:22:46] bit bigger you'll notice that my font
[00:22:48] stays super big and it never actually
[00:22:50] becomes too wide because I'm making sure
[00:22:52] I'm clamping the size that it can
[00:22:53] actually be so it looks really really
[00:22:55] good on multiple different screen sizes
[00:22:56] so that's essentially the top section of
[00:22:58] our entire thing done we can close that
[00:23:00] down and move on to the second section
[00:23:02] which is a section that's like hey
[00:23:03] here's all the different companies that
[00:23:04] use this particular product this is a
[00:23:06] really great thing to have on a sales
[00:23:08] page to be like hey look at the proof
[00:23:09] I'm this good and all these other
[00:23:10] companies use me so we can come back
[00:23:12] over to our application here I want to
[00:23:14] have this section b a class name with a
[00:23:16] background of primary and I want to have
[00:23:18] my text be primary foreground so
[00:23:20] essentially it's going to invert my
[00:23:21] colors we're going to have this nice
[00:23:22] blackish background with white text on
[00:23:24] top of it then inside of here I'm going
[00:23:26] to have an H2 that's because we already
[00:23:28] used H1 up here so I want to have a
[00:23:30] heading for my second section being H2
[00:23:32] and this is going to be the text right
[00:23:34] here I'm just going to copy the text
[00:23:35] over same exact thing that's on their
[00:23:36] page trusted by the top modern companies
[00:23:39] and we can add some styles to this for
[00:23:40] example we can make our text quite large
[00:23:43] we can Center it we can balance it and
[00:23:45] we can also make sure that it's a little
[00:23:46] bit Bolder by saying it's a font of semi
[00:23:49] bold give that a quick save and that
[00:23:51] should look pretty good as you can see
[00:23:52] down here and actually I don't really
[00:23:53] like that semi bolt so I'm going to
[00:23:54] remove that I think it looks a little
[00:23:55] better without that now in order to make
[00:23:57] sure that everything is spaced out
[00:23:58] correctly I'm actually going to come in
[00:23:59] here with a div that I'm going to put
[00:24:00] all my content inside of and first thing
[00:24:02] I want to do is add the container class
[00:24:04] just to space everything out a little
[00:24:05] bit better that's at least going to give
[00:24:07] us a little bit of padding and margin on
[00:24:08] the right and left hand side and if we
[00:24:10] expand our screen you can see it looks
[00:24:11] relatively good we need to give some
[00:24:12] padding on the top and the bottom as
[00:24:14] well so we're going to come in here with
[00:24:15] a py of 16 that's going to give us a ton
[00:24:17] of space on the top and bottom of this
[00:24:20] we're going to say that everything in
[00:24:21] here is going to be flexed in the column
[00:24:23] Direction with a gap of 16 as well to
[00:24:25] really space things out and we're going
[00:24:26] to give even extra padding on the right
[00:24:28] and left so we're going to say PX of 8
[00:24:30] but on larger screen sizes we're going
[00:24:31] to give it even more padding of 16 there
[00:24:34] we go so now everything should be super
[00:24:36] well spaced out make sure I do that like
[00:24:38] that and now we can work on creating a
[00:24:40] grid of all of our different logos
[00:24:41] because this you can see is essentially
[00:24:43] just a grid layout that scales as your
[00:24:45] screen gets larger and smaller so that's
[00:24:47] what we want to emulate as well so below
[00:24:49] our H2 we're going to have a div which
[00:24:51] we're going to give a class of grid by
[00:24:53] default it's going to have two equal
[00:24:54] sized columns on the medium screen size
[00:24:57] it's going to have three sized columns
[00:24:59] and then finally on the extra large
[00:25:01] screen size we're going to go all the
[00:25:02] way up to five columns cuz we have
[00:25:04] enough space to support that and we're
[00:25:05] going to have a nice big gap of 16 in
[00:25:07] between each different section now for
[00:25:09] our icons I could copy over all these
[00:25:11] different icons but instead what I
[00:25:12] decided to do is I decided to just use
[00:25:14] icons for the clerk and neon since
[00:25:16] they're sponsoring this video I figured
[00:25:17] that I should just throw in their icons
[00:25:19] so all I did is I took the actual SVG
[00:25:21] icons for them and I converted them over
[00:25:23] into a react component as you can see
[00:25:26] here this is the clerk SVG icon and if I
[00:25:28] come over to here I have the neon SVG
[00:25:30] icon as well if you want to be able to
[00:25:32] get these icons directly from react you
[00:25:34] can just come over to the GitHub
[00:25:35] repository Linked In the description and
[00:25:36] you can copy both of these different
[00:25:38] components over to your application or
[00:25:40] you can create them yourself if you want
[00:25:41] but I figured I would give them to you
[00:25:42] if you want to be able to use them so
[00:25:44] now I can come in here I can create a
[00:25:46] link tag so let's make sure we import
[00:25:48] that which an href that's going to go to
[00:25:49] either Clerk or neon in our case let's
[00:25:51] make this a link to Neon so we'll put
[00:25:53] neon's homepage inside there and then
[00:25:55] we're going to render out our neon icon
[00:25:57] component just like that so now if we
[00:25:59] give that a save and we come over to our
[00:26:00] application we should see we have the
[00:26:02] neon component showing up right there I
[00:26:04] can copy this down and do the same exact
[00:26:06] thing for the clerk homepage so this one
[00:26:07] is just
[00:26:09] clerk.com just like that and we can come
[00:26:11] over and render out our clerk icon there
[00:26:14] we go give that a save and now you can
[00:26:15] see our clerk icon shows up and I can
[00:26:16] just copy this down a few times to have
[00:26:18] 10 total icons so this is going to be 4
[00:26:20] 6 8 10 give that a save and now you can
[00:26:23] see I have 10 different icons showing up
[00:26:25] but obviously this last icon should be
[00:26:26] hidden when my screen is showing three
[00:26:28] icons cuz it kind of looks weird with
[00:26:29] this extra one so this final bottom icon
[00:26:32] I'm going to have a class name on and
[00:26:33] whenever I'm between the sizes of medium
[00:26:36] and extra large I want to hide this so I
[00:26:38] can say that I want to have this be a
[00:26:40] medium with a maximum of extra large and
[00:26:42] it's going to be hidden so between
[00:26:44] medium and extra large it's going to
[00:26:45] hide this last final icon so I give that
[00:26:47] a save and now you can see the icon is
[00:26:49] removed on smaller screen sizes you can
[00:26:51] see I'm going down to two icons
[00:26:53] accidentally click the link to Neon
[00:26:54] there and if I zoom my page out and make
[00:26:56] it wider you'll see eventually I jump
[00:26:57] over to to five icons as well on a
[00:26:59] larger screen size so this is super
[00:27:01] mobile responsive and it's looking
[00:27:02] really great on all different screen
[00:27:04] sizes now we finished up this entire
[00:27:06] section and I could go through and build
[00:27:07] each one of these sections one to one
[00:27:09] from this homepage but honestly that's
[00:27:10] not the important part of this
[00:27:11] application so instead what I'm going to
[00:27:13] do for the very last section as I'm
[00:27:14] going to build out a pricing section
[00:27:16] because obviously that's something you
[00:27:17] need to have on pretty much any homepage
[00:27:19] and it's going to show us a lot of
[00:27:20] really important best practice clean
[00:27:21] coding things we can do which you're
[00:27:23] going to see the benefit of as we build
[00:27:24] out the rest of this project it's going
[00:27:25] to save us so much time so first of all
[00:27:27] I'm going to give this an ID here of
[00:27:29] pricing just so we can actually link to
[00:27:31] this page there we go pricing so that
[00:27:33] way when I click this pricing link it's
[00:27:35] going to bring me to this exact section
[00:27:36] down here and if I put the text pricing
[00:27:38] in there and I scroll up click pricing
[00:27:40] you can see it brings me down to that
[00:27:41] page where the pricing text is at the
[00:27:42] bottom now for our sizing for everything
[00:27:45] I want to have PX of 8 and I want to
[00:27:47] have a py of 16 to give us a ton of
[00:27:49] space again and for this one I want to
[00:27:51] have a background of accent but I want
[00:27:52] it to be very light it's only going to
[00:27:54] be 5% of our accent color so it's just
[00:27:56] going to give us a very light bluish
[00:27:57] color it honestly might not even show up
[00:27:59] on the recording but as soon as we put a
[00:28:01] white card over top of it you'll
[00:28:03] definitely be able to see the difference
[00:28:04] between this very off blue color and the
[00:28:06] white card that's on top of it the next
[00:28:08] thing we want to do is to add in our
[00:28:09] heading so we'll come in here we'll add
[00:28:11] in what our heading is you can see my
[00:28:12] font size is going to be 4XL centered
[00:28:14] and balanced with a semi bold and some
[00:28:16] margin on the bottom so I give that a
[00:28:17] save you can see we get our nice pricing
[00:28:19] section header right there and then
[00:28:20] finally we can move on to our grid so
[00:28:22] this is going to be a grid we want to
[00:28:24] have two columns so we're going to say
[00:28:25] grid columns 2 but on a large screen
[00:28:28] size we're going to move up to a grid
[00:28:29] Columns of four in this because I'm
[00:28:31] going to have four pricing tiers so it
[00:28:32] makes sense to either have a two column
[00:28:34] Grid or a four column grid for this and
[00:28:36] then I want to also make sure that I
[00:28:37] have some gaps in here so a gap of four
[00:28:40] the max screen for this is going to be
[00:28:42] extra large again so it doesn't get too
[00:28:44] large and we're going to center it by
[00:28:45] using MX Auto so we can bring that down
[00:28:48] now and all I want to do in here is
[00:28:49] render out all four my different pricing
[00:28:51] tiers but I want to be able to get this
[00:28:53] information in a place that I can
[00:28:54] reference all over my application so
[00:28:56] when I'm doing things like permissions I
[00:28:57] can reference it whenever I want to
[00:28:58] render my pricing cards in a different
[00:29:00] location I can reference what are the
[00:29:02] things that each different tier can do
[00:29:04] so what I'm going to do in my
[00:29:05] application here inside my source folder
[00:29:07] I'm going to create a brand new folder
[00:29:09] called data and this is where I'm going
[00:29:10] to put things that are constant things
[00:29:12] that never change inside my application
[00:29:14] I'm going to create a brand new file
[00:29:15] called subscription tiers. TS make sure
[00:29:18] I spell that properly
[00:29:21] subscription tiers there we go and now
[00:29:23] inside here I want to write out all the
[00:29:25] information for each one of my
[00:29:26] subscription tiers now I'm going to
[00:29:27] paste this down but I'm going to go over
[00:29:29] exactly how everything in sear works so
[00:29:31] you can see I have this object with all
[00:29:32] my subscription tiers I have free basic
[00:29:35] standard and premium and I'm including
[00:29:36] all the information I need for example
[00:29:38] what is the name of this how much does
[00:29:39] it cost in cense what is the maximum
[00:29:41] number of products the person can create
[00:29:43] what is the maximum number of times I
[00:29:45] can show the banner for the user and
[00:29:46] then what are their different
[00:29:47] permissions can they access the
[00:29:48] analytics can they customize the banner
[00:29:50] can they remove The Branding and then
[00:29:51] finally to link everything up with
[00:29:53] stripe I'm going to add this stripe
[00:29:54] price ID for now we can just get rid of
[00:29:56] this section because we don't have
[00:29:57] stripe in our application we'll come
[00:29:59] back and add that in a little bit later
[00:30:00] but this is all of our different
[00:30:01] subscription tiers now I want to make
[00:30:03] sure I order these in the correct order
[00:30:05] so I'm going to export another constant
[00:30:07] variable called subscription tiers in
[00:30:09] order I'm going to set that equal to an
[00:30:11] array and what I can do inside of here
[00:30:13] is I can say I want to get my free tier
[00:30:15] and then I want to get my basic tier so
[00:30:17] we're going to have basic I'm going to
[00:30:18] bring this down for my standard tier and
[00:30:21] then finally I'm going to add in my
[00:30:23] premium tier as the last one so this is
[00:30:24] in order from cheapest to most expensive
[00:30:26] because that's how I want to show that
[00:30:28] I'm going to set that as a constant
[00:30:29] variable cuz I never want this to change
[00:30:31] so now we have this file that contains
[00:30:32] all of the source of Truth for
[00:30:34] everything related to our subscriptions
[00:30:35] and how different things are handled and
[00:30:37] if we wanted to be able to update this
[00:30:38] and say you know what on the basic plan
[00:30:39] actually 20,000 people can view it we
[00:30:41] can change that in one place and it
[00:30:42] updates everywhere in our application
[00:30:44] even on our homepage I'll show you what
[00:30:46] I'm talking about inside of here we can
[00:30:47] Loop through those subscription tiers so
[00:30:49] I want to just map through each one of
[00:30:51] those tiers and I want to render them
[00:30:53] out inside of a pricing card so I'm
[00:30:55] going to say pricing card just like that
[00:30:58] we have the key be our tier just like
[00:31:00] that make sure I spell all this properly
[00:31:02] and I can make sure I actually get the
[00:31:03] subscription tiers in order because
[00:31:05] that's what I really need so now I can
[00:31:07] see I get all my information the name I
[00:31:08] know is unique and then I just want to
[00:31:10] pass along all my different information
[00:31:12] for my tier along to this pricing card
[00:31:14] which is a component I'm going to create
[00:31:16] right inside this file so we'll say
[00:31:18] pricing card just like that now what I
[00:31:20] need to do is I need to specify all the
[00:31:21] different properties being passed along
[00:31:23] to this so for example I have a name I
[00:31:25] have a price in cents
[00:31:29] and I have all the other information
[00:31:30] that I've determined that I need to have
[00:31:32] that I set inside this subscription TI
[00:31:34] file and take the type of this I can
[00:31:36] just say that this is going to be a type
[00:31:38] of it's going to be my subscription
[00:31:40] tiers in order and I want to get an
[00:31:42] individual one so we're going to say get
[00:31:44] a number from there so what this is
[00:31:45] essentially saying give me the type of
[00:31:47] what one of the elements inside this
[00:31:49] array is going to be and that's going to
[00:31:50] give me all of this information and I
[00:31:52] can use this inside my pricing card now
[00:31:54] just to show you that this is working
[00:31:55] I'm just going to return the name
[00:31:56] directly from here and give this a quick
[00:31:58] save and if we scroll down you can see I
[00:31:59] get my names being printed out in order
[00:32:01] now we do have an error just cuz this is
[00:32:03] being imported it doesn't need to be
[00:32:04] imported and once we clean that up now
[00:32:06] all we need to do is render out what our
[00:32:07] pricing card looks like so to use the
[00:32:09] pricing card I'm going to be using Shad
[00:32:10] CN and I'm going to import the card
[00:32:12] component so let's get the card
[00:32:13] component imported from Shad CN so now
[00:32:15] inside of here I can render out a card
[00:32:18] directly from Shad CN and inside of
[00:32:20] there we're going to have a card header
[00:32:22] and inside of that we're going to have a
[00:32:23] card title and then also I'm going to
[00:32:25] put a card description into here as well
[00:32:28] so for my card title this is just going
[00:32:30] to be whatever the price is so I'm going
[00:32:31] to put a dollar sign and I'm going to
[00:32:33] put whatever my price in senses times
[00:32:36] 100 there we go and I want that per
[00:32:38] month so now that's just going to render
[00:32:40] that out so if I look here you can see
[00:32:41] we get our prices right there now it
[00:32:43] looks like things are wrong because this
[00:32:44] should be divided by 100 there we go
[00:32:47] obviously I wanted to convert from cents
[00:32:48] to dollars not multiplying by 100
[00:32:49] dividing by it now inside of my
[00:32:51] description this is actually where I
[00:32:52] want to put the information for how many
[00:32:54] visits they can show up on the page so
[00:32:56] this is going to be my Max number of
[00:32:59] visits put that inside of
[00:33:01] here and this is going to say pricing
[00:33:04] page visits per month give that a quick
[00:33:07] save and now you can see we get 5,000
[00:33:08] 10,000 a million and so on but that's
[00:33:10] kind of ugly I want to format this in a
[00:33:12] compact number way so I'm going to
[00:33:14] create a function called format
[00:33:16] compact number just like this and pretty
[00:33:19] much anytime in your application you
[00:33:20] have code you know you're going to use
[00:33:22] in multiple places for example a
[00:33:23] formatter for formatting compact numbers
[00:33:25] I highly recommend breaking that out
[00:33:27] into its own file so in this lib folder
[00:33:29] I'm going to create a formatters file so
[00:33:31] we'll say formatters TTS I'm going to
[00:33:34] export a function which is called format
[00:33:36] compact number it's going to take in a
[00:33:39] number and it's going to format it in a
[00:33:41] compact style for me so up here I'm
[00:33:44] going to say const compact
[00:33:46] number
[00:33:48] formatter is equal to intl. number
[00:33:51] format I want to get a new one of these
[00:33:54] I want to set the low cal to be
[00:33:56] undefined that way on where the user is
[00:33:58] coming from it'll show it to them in
[00:34:00] their actual local and then I want to
[00:34:01] specify the notation to be Compact and
[00:34:04] if we do that real quick let me just
[00:34:06] finish out what this function is going
[00:34:07] to be we just want to call format and
[00:34:09] pass in our number now if I import that
[00:34:11] into this file right here you'll notice
[00:34:12] it's going to take things like 5,000 and
[00:34:14] convert it to 5K 1 million is 1 M
[00:34:17] 100,000 is 100k it's just much easier to
[00:34:19] look at and read and again if we change
[00:34:20] our numbers it's automatically going to
[00:34:22] change our formatting for us now we also
[00:34:24] want to put the name of our product in
[00:34:25] here I'll put this inside the header at
[00:34:27] the top and for this one I wanted to
[00:34:28] have some distinct Styles so we're going
[00:34:30] to say the text is going to be our
[00:34:32] accent color so it's going to be that
[00:34:33] blue color we're going to say the font
[00:34:35] is going to be semi bold and we'll put
[00:34:36] the margin bottom of eight on this close
[00:34:39] that off and inside of there we'll put
[00:34:41] our name just like that so now if we
[00:34:42] give it a save you can see it says free
[00:34:44] at the very top which looks really good
[00:34:45] and we can even make our card title
[00:34:47] stand out a little bit more by making
[00:34:48] the text a little bit bigger so we'll
[00:34:50] say text extra large and font of bold so
[00:34:53] that our price really sticks out
[00:34:54] compared to everything else so that's
[00:34:56] our header completely done and now we
[00:34:57] can work on the content section so we
[00:34:59] can say card content I want to make sure
[00:35:02] that I import this file there we go and
[00:35:04] inside of here I'm going to have a
[00:35:05] button for signing up so we're going to
[00:35:06] have a sign up button and inside of that
[00:35:08] I'm going to render out a button
[00:35:10] component directly from Shad Cen so
[00:35:12] there we go and our button component is
[00:35:13] just going to say get started so now you
[00:35:15] can see I have a get started button
[00:35:16] right here but I want to change exactly
[00:35:18] how this looks for different pages so
[00:35:20] for my standard one I want this to be
[00:35:22] considered my most popular one so it's
[00:35:24] going to have like a fancy styling and
[00:35:26] coloring to make it look a little bit
[00:35:27] different so what I can do here is I can
[00:35:29] say const is most popular is equal to
[00:35:33] and let me make sure I spell this right
[00:35:35] const move it up here so if the name is
[00:35:38] equal to standard then it is the most
[00:35:40] popular so if we're the most popular one
[00:35:42] I want to change my variant so is most
[00:35:45] popular it's going to have one style
[00:35:47] otherwise it's going to have a different
[00:35:49] so by default I just want to use my
[00:35:51] default style otherwise I want to use my
[00:35:53] accent Styles but by default there is no
[00:35:55] accent variant inside of shad so we need
[00:35:58] to create our own accent variable which
[00:36:00] is going to essentially change it so
[00:36:02] we're going to have a background of
[00:36:03] accent so all I want to do is change my
[00:36:05] background here to Accent I want to
[00:36:07] change my text to be accent essentially
[00:36:09] so we can say text accent foreground
[00:36:11] just like that I want it to have a
[00:36:13] shadow I also wanted to have a hover
[00:36:15] where its background accent and
[00:36:16] essentially I want to change that to a
[00:36:18] 90% opacity so essentially it's the
[00:36:20] exact same thing as our default but I
[00:36:21] changed everything to accent so now we
[00:36:23] should have a purple button for our
[00:36:25] accent button let me just make sure
[00:36:26] everything else is working good is most
[00:36:28] popular should be working for our button
[00:36:30] give that a save and now you can see we
[00:36:31] have a blue button for our standard
[00:36:33] button I also want to change our Styles
[00:36:34] a little bit so we're going to come in
[00:36:35] here with a class name I'll make my text
[00:36:37] a little bit larger make the width full
[00:36:39] width and I'll make it a little bit more
[00:36:41] rounded so we'll say rounded of large so
[00:36:44] now we have this big button that's
[00:36:45] essentially saying hey get started in
[00:36:46] bold letters that's the call to action
[00:36:48] for our page now the final thing that we
[00:36:50] need to do that we have our sign up
[00:36:51] button done is to finish up what our
[00:36:53] card content is going to be and that's
[00:36:54] going to be inside of our card footer
[00:36:56] that's where each of our different
[00:36:57] featur feat is going to go I'm going to
[00:36:58] create my own component for those cuz
[00:37:00] this is something we're going to have
[00:37:01] repeated everywhere in our application
[00:37:03] so a feature is going to be really basic
[00:37:05] it's just going to have a child and it's
[00:37:06] going to have a class name just like
[00:37:08] that and I want to make sure that I
[00:37:10] actually give this some Styles so we'll
[00:37:11] say children is going to be a react node
[00:37:14] and then we're going to have our class
[00:37:15] name which is an optional string that we
[00:37:17] can pass into here let me make sure I
[00:37:19] have all that spelled out properly there
[00:37:20] we go that looks like it should be good
[00:37:22] import react node and now we just need
[00:37:24] to use that information so we can return
[00:37:26] here a div which is going to have all my
[00:37:28] different classes and I want to have a
[00:37:30] check icon so we can say check icon just
[00:37:32] like that that's going to be that check
[00:37:33] mark that we want to show up so for this
[00:37:35] one I'm going to have a size of four I'm
[00:37:38] going to specify my stroke as an accent
[00:37:40] color and the background is going to be
[00:37:42] the same thing but with 25% opacity I'm
[00:37:44] going to make it a full circle and I'm
[00:37:46] going to give it a very very small
[00:37:47] amount of padding of 0.05 just like that
[00:37:50] so now we have our check icon showing up
[00:37:52] I can look at what this looks like by
[00:37:54] just rendering out a
[00:37:55] feature just like this and I need to
[00:37:58] pass it along some really basic
[00:37:59] information for example whatever I want
[00:38:01] my children to be that's going to be
[00:38:02] some text that I'm going to render
[00:38:03] inside of its own span right here there
[00:38:07] we go so give that a quick save and you
[00:38:09] can see we have our check mark with some
[00:38:10] text showing up obviously I want this to
[00:38:12] be side by side so I'm going to use some
[00:38:14] class name information right here and
[00:38:15] for this I want to use the CN library
[00:38:17] that way I can combine for example my
[00:38:19] Flex item Center and GAP 2 class with
[00:38:24] the classes that I passed in that are
[00:38:25] custom in case I need any custom classes
[00:38:27] so now you can see that lines these up
[00:38:29] side by side and I can also pass in
[00:38:30] custom classes if I want so now let's go
[00:38:32] ahead and create all of our different
[00:38:33] features first of all I want to style
[00:38:35] this a little bit inside my card footer
[00:38:36] so I'm going to say class name which is
[00:38:38] going to be a flex column with a gap of
[00:38:40] four and the items are all going to be
[00:38:42] in the start just like that so now if I
[00:38:44] have multiple features you can see
[00:38:45] they're spaced out from one another now
[00:38:47] what I want to do is I want to have this
[00:38:48] first feature be for the maximum number
[00:38:50] of products they can have and I want
[00:38:52] this one to be bold so we'll say font
[00:38:54] bold just like that and inside of here I
[00:38:56] want to take my max number of products
[00:38:59] and then after that I just want to put
[00:39:00] the text products give that a quick save
[00:39:02] now you can see if I look down here and
[00:39:04] I make sure to actually refresh my page
[00:39:06] that you can see it says one products
[00:39:07] five products 30 and 50 now obviously I
[00:39:09] want to get rid of the s in the case
[00:39:11] that I have one product so I'm going to
[00:39:12] add a little bit of extra styling into
[00:39:14] here so I'm just going to say if my max
[00:39:16] number of products is equal to one then
[00:39:19] the text is going to be product
[00:39:22] otherwise my text is going to be
[00:39:24] products now if I give that a save you
[00:39:25] can see it says one product or going to
[00:39:27] have an S at the end for all the other
[00:39:29] different quantities so now let's go
[00:39:30] ahead and get the rest of my features
[00:39:32] implemented so we're going to have a
[00:39:33] feature here and this feature is going
[00:39:35] to be the ability to have PPP discounts
[00:39:37] this is something every single tier has
[00:39:39] access to and now for the rest of these
[00:39:41] features I just want to check hey can I
[00:39:43] customize the banner well if so then I
[00:39:46] want to have a feature that says Banner
[00:39:48] customization there we go so now you can
[00:39:51] see that only the tiers that have the
[00:39:53] ability to customize the banner which is
[00:39:54] the standard and premium show that
[00:39:56] particular feature I can do the same
[00:39:58] thing here for if we can access the
[00:39:59] analytics well I want to add in advanced
[00:40:03] analytics give that a quick save and now
[00:40:05] you can see only the ones that have
[00:40:06] access to analytics have that
[00:40:08] information and I'm actually going to
[00:40:09] bump this up one just so it shows up
[00:40:11] over top the banner customization and
[00:40:13] I'm going to paste this down one more
[00:40:14] time and this is going to be for anyone
[00:40:16] that can remove branding so we're going
[00:40:18] to say can remove branding and this is
[00:40:20] saying
[00:40:21] remove
[00:40:23] easy
[00:40:24] PPP branding there we go so so now
[00:40:27] anything that has the option to remove
[00:40:28] our branding which are these particular
[00:40:30] ones can do that and again I'm going to
[00:40:31] move this all the way up here right by
[00:40:33] the analytics there we go so now all
[00:40:35] these tiers have analytics and can
[00:40:37] remove The Branding and only these ones
[00:40:38] can customize the actual Banner so as
[00:40:40] you can see now even on larger screen
[00:40:42] sizes we have a really nice and robust
[00:40:44] looking pricing system and the best part
[00:40:46] is let's say I go ahead and I'm like you
[00:40:47] know what I want to change how my
[00:40:49] different tiers work well I can go into
[00:40:50] here and say you know what the free tier
[00:40:52] now is actually going to be 10 products
[00:40:54] give that a save boom it automatically
[00:40:55] updates everywhere in our application
[00:40:57] that's why I love having these data
[00:40:58] files that contain all of our static
[00:41:00] data now the final section I want to
[00:41:01] work on is pretty much a section that
[00:41:03] almost every site has which is just this
[00:41:04] really large footer section right here
[00:41:06] as you can see on parody deal site so
[00:41:08] I'm just going to create our own version
[00:41:09] of that let's scroll all the way up here
[00:41:11] and create a brand new section but this
[00:41:13] one is going to be a footer because
[00:41:14] obviously it's the footer of our
[00:41:15] application I want to add a class name
[00:41:18] here of container to contain it in a
[00:41:19] size I want to have pading top of 16
[00:41:22] padding bottom of eight we're going to
[00:41:24] make it a flex but on a small size it's
[00:41:25] going to be Flex column again make it
[00:41:27] mobile responsive we're going to have a
[00:41:29] gap of eight except for on small screen
[00:41:31] sizes we'll have a gap of four between
[00:41:32] all of our different sections we'll
[00:41:34] justify the content to have a between
[00:41:36] and we'll say the items are going to be
[00:41:38] at the start so now we can go ahead and
[00:41:40] actually put all of our information
[00:41:41] inside here which has two distinct
[00:41:43] sections the first is going to be a link
[00:41:45] which is going to go to our homepage and
[00:41:47] that's going to use our brand logo so
[00:41:49] we've already used our brand logo once
[00:41:51] so again this is why we created a
[00:41:52] component for that so now down here you
[00:41:54] can see we have our brand logo in the
[00:41:55] footer then we're going to have a
[00:41:57] section which contains all of our
[00:41:58] different links so we're going to come
[00:41:59] in here it's going to be Flex it's going
[00:42:01] to be in the column Direction and on the
[00:42:03] small sizes we're going to put them in
[00:42:04] the row Direction otherwise we'll have a
[00:42:06] gap of eight and if we look back at the
[00:42:08] parody deal site essentially I want to
[00:42:10] have all these different groups you can
[00:42:11] see here I have a group with all these
[00:42:13] links I have another group with all
[00:42:14] these links and another group with all
[00:42:15] these links that's what each of these
[00:42:16] divs is and for each of these divs
[00:42:18] inside of there I need to have a div for
[00:42:19] the actual footer links so what's come
[00:42:21] in here I'm going to create a div class
[00:42:23] name flex and flex column with a gap of
[00:42:26] eight that's going to be if we come back
[00:42:28] to here again for each of these
[00:42:31] individual sections so this very first
[00:42:33] Dev I created was for all the sections
[00:42:35] combined together and this each
[00:42:36] individual div inside of there is for
[00:42:38] each of the three different columns I
[00:42:39] have so we can come back into here
[00:42:41] scroll all the way up so this div right
[00:42:43] here is for our column and I'm going to
[00:42:45] create a separate component for this
[00:42:46] called footer link group and this footer
[00:42:49] link group is going to have a few things
[00:42:51] it's going to have a title in our case
[00:42:53] this will say help and then it's going
[00:42:54] to have our links and the links is going
[00:42:56] to be an array of objects where we're
[00:42:57] going to have a
[00:42:59] label just like this for example this
[00:43:01] one we say PPP discounts and then it's
[00:43:04] going to have an href in our case all of
[00:43:05] our HS are just going to be empty like
[00:43:08] this and if I make sure I clean up my
[00:43:10] code by putting these brackets in place
[00:43:12] give that a save you can now see we have
[00:43:13] our first link showing up I'm going to
[00:43:14] put this on one line so it reads a
[00:43:16] little bit
[00:43:17] better there we go and I'm just going to
[00:43:20] copy this down because we're going to
[00:43:21] have two links inside of here give that
[00:43:24] a save and let's change this one to a
[00:43:26] discount AP
[00:43:28] there we go and now we just need to
[00:43:30] create this footer link group so all the
[00:43:32] way down here function footer link group
[00:43:35] and we know that it's going to be taking
[00:43:36] a title that comes inside of our props
[00:43:39] and it's also going to be taking our
[00:43:41] links now if we type these out our title
[00:43:44] is a
[00:43:45] string and we're going to have our links
[00:43:47] which is going to be an object which is
[00:43:49] a label which is a string an href which
[00:43:52] is a string and we're going to have an
[00:43:53] array of those there we go and now we
[00:43:55] can render out what this group looks
[00:43:56] like so the first thing is I need a div
[00:43:58] to contain all of them and we're going
[00:44:00] to have these be in the column Direction
[00:44:01] with a gap of four between them then the
[00:44:04] next thing I need to do is to put my
[00:44:05] header which I'm going to use an H3 for
[00:44:07] so we'll say H3 close that off and this
[00:44:10] is going to be whatever that title for
[00:44:12] my group is going to be and I just want
[00:44:13] to give it a few Styles so we'll say
[00:44:15] class name font of semi bold there we go
[00:44:18] the next thing I'm going to want to do
[00:44:19] is to have a list which contains all my
[00:44:20] information and for this list I want it
[00:44:22] again to be in the column Direction but
[00:44:24] with a smaller Gap so we'll use gap of
[00:44:25] Two And even some smaller text then
[00:44:29] we'll Loop through each one of our links
[00:44:31] so for each link what I want to do is I
[00:44:33] want to render out An Li since we're
[00:44:35] inside of an ordered list with a key
[00:44:37] that's going to be link. href because
[00:44:39] that's the only thing that's going to be
[00:44:41] the same or guaranteed to be unique then
[00:44:43] we're going to come in here with a link
[00:44:45] and this is going to be an href which is
[00:44:46] my link. href and the label for this is
[00:44:49] link. Lael relatively straightforward so
[00:44:52] now if we give that a quick save we make
[00:44:54] sure that everything that we need for
[00:44:55] this footer group is like it should be
[00:44:57] so footer link group footer link group
[00:45:00] we have title we have links everything
[00:45:01] should be good we're getting an error
[00:45:02] though oh and that's just because I need
[00:45:04] to make sure I return our jsx from here
[00:45:06] so now back to our application scroll
[00:45:08] down to the very bottom and it looks
[00:45:10] like this is not rendering out like we
[00:45:11] wanted to let's make sure we save still
[00:45:13] not showing up my guess is inside of
[00:45:15] here I didn't render out something
[00:45:16] properly looks like all that is proper
[00:45:18] so that should be working my next guess
[00:45:20] is related to caching I'm just going to
[00:45:21] do a hard refresh and there we go it was
[00:45:23] related to caching so we have our
[00:45:24] information showing up and if we go to a
[00:45:26] larger screen size you can see it's
[00:45:28] still working but obviously looks like
[00:45:30] our Flex is actually swapped you can see
[00:45:32] on small screen sizes it shows up side
[00:45:33] by side while on large screen sizes it
[00:45:35] shows top to bottom so we have something
[00:45:36] swapped with our Flex so if we go ahead
[00:45:38] and we look at our footer here this is
[00:45:40] where we have our Flex swapped on the
[00:45:41] small screen sizes we should have a flex
[00:45:43] of row so let me change that to row and
[00:45:46] normally we should have a flex of column
[00:45:48] that should hopefully fix that so you
[00:45:50] can see on a small screen size it's
[00:45:51] stacked like that and a larger screen
[00:45:53] size it stacked side by side now what we
[00:45:55] need to do is just to finish out the
[00:45:56] rest of our footer link groups so inside
[00:45:58] of here the next section I have is for
[00:45:59] Solutions so you can see we have our
[00:46:01] help and solution stacked on top of each
[00:46:02] other and now I essentially just need to
[00:46:03] copy this section multiple times so
[00:46:05] instead of making you watch me actually
[00:46:07] typ this information out I'm just going
[00:46:08] to come in here and I'm going to copy it
[00:46:09] over for you because it's again exactly
[00:46:12] the same if I copy this down you can see
[00:46:14] if I minimize it this is the exact same
[00:46:16] style and inside of here we just have
[00:46:17] footer link groups with each of our
[00:46:18] different links so if I give that a
[00:46:20] quick save you can now see all of our
[00:46:22] links are showing up and when we shrink
[00:46:23] down to a smaller screen size you can
[00:46:25] see they stack vertically like this and
[00:46:26] that just because we swapped everything
[00:46:28] to flex column on the smaller screen
[00:46:29] sizes so there we go that's our entire
[00:46:31] homepage entirely done for our
[00:46:33] application and it looks relatively good
[00:46:35] obviously you can make different changes
[00:46:37] to this and it looks a little bit zoomed
[00:46:38] in right now cuz my screen size is very
[00:46:39] zoomed in but on a more normal screen
[00:46:42] size this looks even better than it does
[00:46:43] on this more zoomed in screen size now
[00:46:45] the next thing that I want to work on
[00:46:46] now that we're done with our homepage is
[00:46:47] to work on our sign in and sign out
[00:46:49] workflow right now it works just fine
[00:46:51] but you'll notice in our URL bar it
[00:46:52] actually redirects us to a different
[00:46:54] site that's because we haven't set up
[00:46:55] our own signin and sign out pages so
[00:46:57] we're going to do that next and with
[00:46:59] clerk it's incredibly easy to do all you
[00:47:01] need to do is to create a folder for
[00:47:03] sign in and sign out and I'm actually
[00:47:05] going to put that inside of its own
[00:47:06] group called off again just to keep
[00:47:08] things separated and so I can use a
[00:47:10] single layout file which we'll create
[00:47:12] now for both of our different off pages
[00:47:14] so to create your own sign-in sign out
[00:47:16] workflows just create a folder called
[00:47:18] sign in make sure you spell signin
[00:47:20] properly there we go and inside that
[00:47:22] folder you need to create another folder
[00:47:23] for a catch all so this is going to be
[00:47:25] double brackets triple
[00:47:27] followed by the text sign in and again
[00:47:30] close that off with a double bracket and
[00:47:32] then inside of here just create a page.
[00:47:34] TSX now you would think we have to write
[00:47:36] out a bunch of different code for
[00:47:38] creating our own signin page but clerk
[00:47:40] has a component for us that we can use
[00:47:41] so we'll call this sign in just like
[00:47:43] that make sure it's a default function
[00:47:46] and I'll call it signin page and that's
[00:47:48] because the component we're going to be
[00:47:49] using is just called sign in all we have
[00:47:51] to do is just import that component and
[00:47:53] our signin page is entirely done now I'm
[00:47:55] going to copy the exact same thing for
[00:47:57] sign up so make sure that we call this
[00:47:59] sign up just like that we're going to
[00:48:01] name this to be sign up so it's the
[00:48:03] exact same thing but instead of sign in
[00:48:05] we use sign up let me just make sure I
[00:48:07] restart my server that should hopefully
[00:48:09] fix that there we go and now inside of
[00:48:12] our sign up page we want to use the sign
[00:48:14] up component from clerk so let's get
[00:48:16] that and rename this to sign up that's
[00:48:19] how easy it is to get working with that
[00:48:21] now the only other thing I want to do is
[00:48:23] to create a layout so we're going to say
[00:48:25] default function and that's going to be
[00:48:27] our sign or actually our off
[00:48:31] layout and to save us some time I'll
[00:48:33] just copy the code over for this all
[00:48:35] we're doing is we're making sure it
[00:48:36] fills the full screen and it positions
[00:48:38] everything in the center as literally
[00:48:40] the only thing that this does so now
[00:48:42] when we go to our signin page we should
[00:48:44] hopefully see that it's centered in the
[00:48:45] page and it goes to our own URL but
[00:48:46] you'll notice it still goes to this
[00:48:48] clerk URL that's because we have one
[00:48:49] more step that we need to finalize and
[00:48:51] this is telling clerk that we created
[00:48:52] these brand new sign-in Pages for it to
[00:48:54] use to do that all we need to do is go
[00:48:55] into our environment variables here
[00:48:57] where we have our other clerk
[00:48:58] information I'm going to come down and
[00:49:00] we're going to paste in this next public
[00:49:02] clerk signin URL and the same thing for
[00:49:05] sign up URL and point them to our new
[00:49:07] signin and sign up page that's all you
[00:49:09] need to do so now when I click on the
[00:49:10] login button for our page give it a
[00:49:12] quick refresh everything works click on
[00:49:14] login you can see it redirect me to my
[00:49:15] own Local Host 3000 things are much more
[00:49:17] zoomed in because I'm zoomed in on my
[00:49:19] current page and you can see we're on
[00:49:21] our own URL which is really really great
[00:49:23] now a few more cleaning house things
[00:49:25] that I want to do before we start
[00:49:26] working on our dashboard is you'll
[00:49:27] notice that we have a lot of environment
[00:49:29] variables it's hard to keep track of
[00:49:30] these environment variables especially
[00:49:32] when you clone your code for a brand new
[00:49:33] time so I'm going to create a brand new
[00:49:35] file called env. example this is going
[00:49:38] to be essentially a list of all of our
[00:49:39] different environment variables with
[00:49:41] sample values for anything that we can
[00:49:43] keep in there for example our sign in
[00:49:44] and sign up URL we don't want to change
[00:49:46] that so we'll keep those in there but
[00:49:47] our secret keys that we have here we're
[00:49:49] going to keep those hidden so I'm going
[00:49:50] to make sure that those are completely
[00:49:52] empty now when someone pulls down this
[00:49:53] code brand new they'll have this file to
[00:49:55] give them an overview of what our
[00:49:56] different environment variables look
[00:49:57] like I'm also going to label this to say
[00:50:00] that this is our clerk environment
[00:50:01] variables and when we move to other
[00:50:03] environment variables we'll put them in
[00:50:04] their own section I'm going to do the
[00:50:05] exact same thing inside of here put our
[00:50:07] clerk environment variable label so now
[00:50:09] we know that these are all clerk related
[00:50:11] environment variables this just helps
[00:50:12] with people in the future downloading
[00:50:14] our application and using it so now
[00:50:15] let's open up our dashboard and create a
[00:50:17] layout file for us to use we'll say
[00:50:19] layout TSX and we'll create a page and
[00:50:21] this page for now we'll say
[00:50:24] default and that's going to be a
[00:50:26] function
[00:50:27] dashbo page for now is just going to
[00:50:30] have nothing inside of it just so we
[00:50:31] have something there to render and then
[00:50:33] here export default function and this is
[00:50:36] going to be our dashboard layout make
[00:50:38] sure here that I spell layout
[00:50:41] properly and inside of this dashboard
[00:50:43] layout we're going to be getting our
[00:50:45] children in here so we're going to say
[00:50:47] children and that is a react
[00:50:50] node there we go and inside of here I
[00:50:53] want to create a div to wrap everything
[00:50:55] and that's going to have a background of
[00:50:56] accent and that's going to be at that
[00:50:58] color five again opacity of five so it's
[00:51:00] very very faint but it makes it so that
[00:51:02] white will really pop and we're going to
[00:51:04] make it so that it's at least always the
[00:51:05] same size of our screen that way that
[00:51:07] blue background covers our entire screen
[00:51:09] now inside of here we're going to render
[00:51:11] out a Navar but we're not going to get
[00:51:12] the nav bar from our marketing folder
[00:51:14] instead we're going to create our own
[00:51:15] nav bar specifically for our dashboard
[00:51:17] pages and then lastly I'm going to have
[00:51:20] a div that contains all of our different
[00:51:21] children I'm going to give it the
[00:51:22] container class and some padding on the
[00:51:24] top and the bottom and we'll put our
[00:51:26] children directly inside of there give
[00:51:28] that a quick save make sure I return
[00:51:30] this and now we at least have our
[00:51:31] dashboard and if we just comment out
[00:51:33] this nav bar for now when we go to our
[00:51:35] dashboard for example slash dashboard
[00:51:38] and go enter you can see we just get
[00:51:39] that blank page with that slight blue
[00:51:41] background now I'm going to go ahead and
[00:51:42] work on creating our nav bar next so
[00:51:44] let's comment this in and to do that I'm
[00:51:46] just going to create a brand new folder
[00:51:47] underscore components and this is where
[00:51:49] we're going to put the components that
[00:51:50] are specific only to our private
[00:51:53] dashboard pages so we'll come in here
[00:51:55] export function
[00:51:57] nav
[00:51:59] bar this nav bar has no components that
[00:52:02] it takes in and we just want to render
[00:52:03] out a header kind of like we did before
[00:52:06] inside of here we're going to have a nav
[00:52:08] and inside of here we're going to have a
[00:52:09] bunch of different links so the very
[00:52:10] first link I have is going to be for our
[00:52:13] main page so we'll say class name that's
[00:52:15] going to go to our
[00:52:18] dashboard there we go and it's going to
[00:52:20] make sure oops this should actually be
[00:52:22] our href not our class name there we go
[00:52:25] and for our class name
[00:52:27] name this is going to be where we put
[00:52:29] our margin right on the auto so now
[00:52:31] let's make sure we import our link just
[00:52:33] like that and inside of here we can put
[00:52:35] whatever we want and in our case we want
[00:52:36] to put our brand logo again so let's
[00:52:38] just get our brand logo render that out
[00:52:40] and again let's go to our dashboard page
[00:52:44] make sure I go to that page and you can
[00:52:45] now see hopefully at the top of our page
[00:52:47] if we make sure that we have this
[00:52:48] imported properly give that a quick save
[00:52:51] you can see we get our logo at the top
[00:52:52] when we click on it it brings us to our
[00:52:54] dashboard page now obviously I want to
[00:52:56] style things so it looks a little better
[00:52:57] so we're going to come in here make this
[00:52:59] a flex container py of four to give it
[00:53:02] some spacing again we'll give it a
[00:53:03] shadow this will be a more neutral
[00:53:05] Shadow and we'll make it a background
[00:53:07] color of white essentially which is our
[00:53:09] background right there also for our nav
[00:53:11] I'm going to make this have some Styles
[00:53:12] so we'll say class name here is going to
[00:53:14] be Flex we're going to Center the items
[00:53:17] in here and we're going to give them a
[00:53:18] gap of 10 and finally I'm going to make
[00:53:20] this a container just to give us some
[00:53:22] padding and make everything look a
[00:53:23] little bit better so now we have our
[00:53:24] first link let's move on to our next
[00:53:26] link right here and this link is going
[00:53:28] to be for dashboard SL
[00:53:31] products and you can guess that this
[00:53:33] will say products inside of it and we're
[00:53:35] just going to copy this down a couple
[00:53:36] times because we're going to have our
[00:53:41] analytics and we're also going to have
[00:53:43] our subscription that we're going to
[00:53:45] manage Subs whoops subscription there we
[00:53:49] go and then finally we want to be able
[00:53:50] to have a button for managing our user
[00:53:52] profile clerk makes this super easy by
[00:53:54] giving us just a user button component
[00:53:56] we can import we don't need to do
[00:53:57] anything else just give that a save and
[00:53:59] now you can see we have this user button
[00:54:00] over here just give it a refresh make
[00:54:02] sure it shows up properly and actually
[00:54:03] the reason that nothing is rendering
[00:54:05] over here is because right now I'm on
[00:54:06] this page but I'm currently not signed
[00:54:08] in we don't have any authentication set
[00:54:10] up which is a huge problem so we need to
[00:54:12] go over to our middleware and actually
[00:54:13] set up this authentication so inside
[00:54:15] this middleware this clerk middleware
[00:54:17] function is where we make sure we
[00:54:18] protect the pages we want to protect so
[00:54:19] this function actually takes another
[00:54:21] function as an argument and in this
[00:54:23] function that we're passing into it
[00:54:24] takes an off as well as our requ EST
[00:54:26] information so if we want we can call
[00:54:28] off. Protect and what that's going to do
[00:54:30] is make it so that you must be signed in
[00:54:32] to view this page but we only want to
[00:54:34] protect the pages that are private so to
[00:54:36] do that I'm going to actually create a
[00:54:37] variable called is public route this is
[00:54:39] going to be a
[00:54:41] function just like this and I'm going to
[00:54:43] be using the create route matcher
[00:54:45] function which comes directly from Clerk
[00:54:47] and this allows us to pass in
[00:54:49] essentially the same thing we pass this
[00:54:50] matcher down here and it's going to
[00:54:52] match okay if this page is matched then
[00:54:54] it's going to be a public route versus
[00:54:55] not so just want to put in here a list
[00:54:57] of all the pages that are public so our
[00:54:59] homepage is going to be public also our
[00:55:01] sign-in pages are public so we can say
[00:55:03] sign in and by using this dot with a
[00:55:06] star inside parentheses this says
[00:55:08] anything that comes after signin also
[00:55:10] counts so if we go to slash signin SL
[00:55:13] something else it'll still be marked as
[00:55:14] public now I want to do the exact same
[00:55:16] thing for our sign up page so I'm going
[00:55:18] to come in here with sign up and then
[00:55:20] finally we're going to have an API for
[00:55:21] this application so I'm going to put our
[00:55:23] API in here as public as well because
[00:55:25] that's how people show the banners on
[00:55:27] their particular pages so now we can use
[00:55:29] this by saying if it is a public route
[00:55:32] or if it is not a public route sorry
[00:55:33] passing our request well if we don't
[00:55:35] have a public route then we should
[00:55:36] probably protect that route so now if
[00:55:38] we've done that and we give our page a
[00:55:40] refresh over here we should see we get
[00:55:41] redirected to the signin because we are
[00:55:43] on a page that is currently public so
[00:55:46] let's just go back to our actual Local
[00:55:48] Host right here and what I want to do is
[00:55:49] I want to click that I want to log in or
[00:55:51] get started so we'll say get started for
[00:55:52] free because I need to sign up I'm going
[00:55:54] to create an account using GitHub so
[00:55:55] we're going to use my GitHub account
[00:55:57] give that a quick sign in I've obviously
[00:55:58] already signed in before with GitHub so
[00:56:00] it just worked perfectly out of the box
[00:56:02] but it redirected me to the homepage I
[00:56:04] want to redirect to the actual dashboard
[00:56:06] I don't want to have to click on this
[00:56:07] link to get there I just want to be
[00:56:08] automatically redirected to that page
[00:56:10] luckily with clerk this is incredibly
[00:56:12] easy and again it's just a couple
[00:56:13] environment variables so I'll paste
[00:56:15] these down for you you can see that they
[00:56:16] are the next public clerk sign in or
[00:56:18] sign upore Force redirect URL and this
[00:56:21] is just saying redirect people to this
[00:56:23] page after they sign in or after they
[00:56:25] sign up so now let's make sure we add
[00:56:27] those to our example environment
[00:56:29] variables as well so now if I just sign
[00:56:31] out of my application I'm on this normal
[00:56:33] dashboard page and I click that I want
[00:56:34] to log in log in with GitHub and you can
[00:56:36] see it's going to redirect me to the
[00:56:38] dashboard when I'm done signing in which
[00:56:39] is super great so now we have our
[00:56:41] authentication essentially ironed out we
[00:56:42] really don't need to change anything at
[00:56:44] all the very next thing that I want to
[00:56:45] work on is to be able to get our
[00:56:47] database set up because we really can't
[00:56:48] do anything on these dashboard Pages
[00:56:50] unless we have a database set up so to
[00:56:53] get our database set up we're going to
[00:56:54] be using drizzle I absolutely love it
[00:56:56] and you'll see in this video especially
[00:56:57] how amazing drizzle is compared to
[00:56:59] something like Prisma because of the
[00:57:00] flexibility we get so to get started
[00:57:02] with Drizzle we're going to be using it
[00:57:03] with neon which again they sponsor this
[00:57:05] video they're amazing for database
[00:57:06] provider hosting all we need to do is
[00:57:08] copy over this code right here and we
[00:57:10] need to paste it down to import all
[00:57:12] these different libraries then you can
[00:57:13] see down here we have the code right
[00:57:15] here that we need to import into a
[00:57:16] particular file to get started with
[00:57:18] Drizzle so I'm just going to copy that
[00:57:19] code create a brand new folder called
[00:57:21] drizzle and inside that I'm going to
[00:57:23] create a folder called db. TS which is
[00:57:25] where to paste in this code right here
[00:57:27] and I just want to make sure I export
[00:57:29] the information I need so here I have
[00:57:30] this constant called DB I'm just going
[00:57:32] to export that from this file so that
[00:57:34] gives me access to my database now I'm
[00:57:36] going to call this just my database URL
[00:57:38] just like this from my environment
[00:57:40] variables so I'm going to come into my
[00:57:41] environment variables we'll create a
[00:57:43] section at the top here for our database
[00:57:47] and we have a
[00:57:48] database URL we need to set it to some
[00:57:51] specific string also I want to make sure
[00:57:53] I put this in my environment variable
[00:57:55] for the example file as well so people
[00:57:57] know they need a database URL now to get
[00:57:58] a database URL we're just going to set
[00:58:00] things up on neon so I'm going to come
[00:58:02] over to Neon all we need to do is give
[00:58:03] our project a name we'll call this easy
[00:58:05] PPP we're going to give our database a
[00:58:07] name easy PPP is fine and we're going to
[00:58:11] say create this project just that easy
[00:58:13] you can see the really nice thing about
[00:58:14] neon is I have the ability to branch
[00:58:16] which means I have my production
[00:58:17] database right here and I can create a
[00:58:19] development database just for me click
[00:58:20] this one button now I'm working on my
[00:58:22] own production database now I'm going to
[00:58:24] just make this a full screen because
[00:58:26] this works better this way and what I
[00:58:27] want to do is I want to actually connect
[00:58:29] to this particular database so the
[00:58:31] easiest way to do that is I could just
[00:58:32] copy over this string or I could come
[00:58:34] over and I can make sure I'm doing this
[00:58:35] properly by going to this overview Tab
[00:58:37] and I click on this connect button right
[00:58:39] here for this particular database I want
[00:58:40] to make sure that I'm on the branch that
[00:58:43] is correct I'm on the main branch I want
[00:58:44] to make sure I navigate to my Kyle
[00:58:45] Branch here and then I click connect and
[00:58:47] I want to make sure I use a pulled
[00:58:48] connection the reason for this
[00:58:50] especially if you're dealing with
[00:58:51] production is that if you have something
[00:58:53] that's going to be produced on the edge
[00:58:55] which neon is great for Edge databases
[00:58:57] it's going to make it so that you
[00:58:58] actually have enough connections because
[00:58:59] a lot of times databases only allow you
[00:59:01] like five different connections and if
[00:59:03] you're using something serverless on the
[00:59:04] edge you're possibly going to have
[00:59:05] hundreds or thousands of connections so
[00:59:07] this is just going to make sure that
[00:59:08] your database will work flawlessly on
[00:59:09] the edge so we're just going to copy
[00:59:11] over this database URL and that's all we
[00:59:13] need to do from neon to get this started
[00:59:15] and working so let's come over to here
[00:59:17] make this a little bit smaller so it's
[00:59:18] easier to work with and paste down our
[00:59:20] database URL into here and now we should
[00:59:22] have everything we need to get started
[00:59:23] working you'll notice we have a little
[00:59:24] bit of an error in here that's because
[00:59:26] this database URL could be undefined it
[00:59:28] doesn't know we could say you know what
[00:59:30] I guarantee this is going to be a string
[00:59:32] typescript type this and that's going to
[00:59:33] work fine but if someone forgets to
[00:59:35] import their database URL they're going
[00:59:36] to get a weird error because it doesn't
[00:59:38] have a database URL to connect to so I'm
[00:59:40] actually going to go ahead and I'm going
[00:59:41] to set up a file for all of our
[00:59:43] environment variables and I'm going to
[00:59:44] do that using the T3 environment
[00:59:46] variable package so what we can do is we
[00:59:47] can install this package npmi this is
[00:59:51] T3 environment DJs this is going to make
[00:59:55] it really easy for for us to have type
[00:59:56] safe environment variables we also need
[00:59:58] to make sure we have Zod for this so I'm
[01:00:00] going to npmi Zod as well to do all of
[01:00:02] our different validation so now that we
[01:00:04] have that done we can go ahead in our
[01:00:06] data folder and I want to create a brand
[01:00:07] new folder for my environment variables
[01:00:09] and I'm going to have them for my client
[01:00:11] and I'm also going to have them for my
[01:00:13] server just like that you can combine
[01:00:15] these together but I like to keep them
[01:00:16] separate to be really distinct which
[01:00:18] one's are client and which one's our
[01:00:19] server now the documentation for getting
[01:00:20] this set up is incredibly easy to
[01:00:22] understand and use all we need to do is
[01:00:23] export what we're going to put our
[01:00:25] environment variables in we're going to
[01:00:26] call this EnV and that's coming from
[01:00:28] create EnV just like that and this takes
[01:00:31] in an object the first thing you want to
[01:00:32] Define is empty strings as undefined
[01:00:34] that way if you pass in for example
[01:00:36] something that's completely blank it'll
[01:00:37] convert that to undefined which is
[01:00:39] probably what you want next we want to
[01:00:41] Define what all of our server
[01:00:42] environment variables are since we're in
[01:00:43] our server. TS file so I have a database
[01:00:47] URL just give it the exact same name you
[01:00:49] used before and then for our validation
[01:00:51] we know that this is a string and we
[01:00:53] know it is a URL so let's make sure we
[01:00:55] import this from Zod just like that so
[01:00:57] we're saying this is a string from Zod
[01:00:59] and the last thing we need to do import
[01:01:01] is going to be our runtime environment
[01:01:03] there's also an experimental runtime
[01:01:04] environment which is what I'm going to
[01:01:06] be using because it allows you to just
[01:01:07] pass in process.env for all your server
[01:01:10] environment variables and it'll hook up
[01:01:11] everything for you if you use the normal
[01:01:13] runtime you actually need to manually
[01:01:15] say that our database URL is equal to
[01:01:18] process. env. database URL this is kind
[01:01:21] of a clunky amount of code to write
[01:01:23] which is why I think it's much better to
[01:01:24] just use the experimental version like
[01:01:25] like this which works great for our
[01:01:27] server now for our client it's going to
[01:01:29] be slightly different we're going to
[01:01:30] paste this in and instead of server this
[01:01:32] is going to say client here and every
[01:01:34] single client variable obviously must
[01:01:35] start with next public underscore
[01:01:38] whatever our variable is going to be so
[01:01:40] if we come into our environment
[01:01:41] variables we have all these different
[01:01:43] environment variables I'm going to copy
[01:01:44] them over so we know what the names are
[01:01:46] come into here going to put them down
[01:01:48] just below so we have our clerk
[01:01:50] publishable key we know that this is
[01:01:52] going to be a string just like that I'm
[01:01:55] going to copy this down to few times cuz
[01:01:56] we have all these other variables so we
[01:01:58] have our redirects let me make sure I
[01:02:00] get those we have our sign up URL and
[01:02:02] our sign in url all of those are going
[01:02:04] to be strings and they're all required
[01:02:06] now the unfortunate thing about the
[01:02:08] experimental runtime is you actually
[01:02:09] need to pass it in everything for your
[01:02:11] client side code so I must say that for
[01:02:13] example my public key here is equal to
[01:02:16] process EnV do and whatever I call that
[01:02:20] variable which is just the exact same
[01:02:21] name I need to do this manually for
[01:02:23] every single one which is a bit of a
[01:02:24] pain so I'm just going to copy this down
[01:02:26] make this a little wider so it shows up
[01:02:27] on one line for you and I'm just going
[01:02:30] to paste the correct names down for both
[01:02:32] of these there we go one more to go and
[01:02:36] there we go that cleaned up all of our
[01:02:37] different errors so now we have
[01:02:38] everything hooked up for all of our
[01:02:39] different environment variables I just
[01:02:41] want to make sure I get my last
[01:02:42] environment variable in here which I
[01:02:43] believe is called clerk secret key there
[01:02:46] we go clerk secret key and this one is a
[01:02:49] string there we go that's everything we
[01:02:50] need so now we have type safe access to
[01:02:52] all of our environment variables so back
[01:02:54] into here what I can do do instead of
[01:02:56] just getting my variable directly from
[01:02:58] process. EnV I can say EnV make sure I
[01:03:00] get my server variables and now I have
[01:03:02] typesafe access to my database URL and
[01:03:05] if for some reason I don't include my
[01:03:06] database URL I'm going to get an error
[01:03:07] when I try to run my application for
[01:03:09] example I'll just completely remove this
[01:03:11] and show you what I'm talking about give
[01:03:12] this a quick save it's going to reload
[01:03:14] everything and now if I try to access
[01:03:15] anything in my application that uses
[01:03:17] that database URL it'll throw an error
[01:03:19] now right now I'm not accessing my
[01:03:20] database URL but you would see myself
[01:03:22] get an error if I did try to access that
[01:03:24] information for example if my Seeker key
[01:03:26] was empty then I would get an error when
[01:03:28] I tried to deal with logging in
[01:03:29] information and so on so like if I try
[01:03:30] to sign out I may get an error if I try
[01:03:32] to log in I may get an error but again
[01:03:34] I'm not seeing any of these errors
[01:03:35] showing up because I'm not using those
[01:03:37] particular variables but as soon as I
[01:03:38] use them you will see those errors now
[01:03:39] to finish our setup for drizzle we need
[01:03:41] to also create a new file called
[01:03:43] drizzle.
[01:03:54] config.sys config I said my schema is in
[01:03:56] this folder I say all my migrations are
[01:03:58] going to go into a folder called
[01:04:00] migrations in my Jal folder everything
[01:04:01] is going to be postgress strict true and
[01:04:03] verbose true just make it so when you do
[01:04:05] migrations it's going to give you extra
[01:04:07] warnings and validation on what's going
[01:04:08] on and then finally I'm actually seeing
[01:04:10] my database credentials right here
[01:04:11] inside of this so now I have all my
[01:04:13] stuff hooked up and again I'm using that
[01:04:15] environment variable that I created on
[01:04:16] the server so now we need to get started
[01:04:18] with our database configuration which is
[01:04:20] all going to happen in this schema file
[01:04:22] so let's just go ahead and the first
[01:04:23] thing I want to do is export a constant
[01:04:25] variable called Product table and we're
[01:04:27] going to set that to PG table just like
[01:04:30] that from r o RM and then we can give it
[01:04:33] all the different names in columns so
[01:04:34] the first thing is we need to give it a
[01:04:35] name we're going to call this products
[01:04:37] just like that and we're going to give
[01:04:39] all of our different columns inside of
[01:04:40] here so for example I'm going to have an
[01:04:41] ID column with a uu ID set it to ID just
[01:04:45] like that and we're going to say we're
[01:04:46] going to have a primary key default that
[01:04:48] to be a random uu ID also each of our
[01:04:51] products is going to be linked to a user
[01:04:52] so we'll give it a clerk user ID which
[01:04:55] is going to be a text field clerk
[01:04:57] user ID and we'll set that equal to not
[01:05:01] n there we go and make sure again that I
[01:05:04] import this text field directly from my
[01:05:06] PG core because we're using postgress we
[01:05:08] need to use the PG core now there's a
[01:05:10] few other columns that I want to have
[01:05:11] inside of here so I'm going to paste
[01:05:13] these down a name which is a text which
[01:05:15] is not null description which is a text
[01:05:16] that can be null and then a URL that
[01:05:18] again cannot be null I'll even put it
[01:05:20] above my description so all our not null
[01:05:22] stuff is up there then I want to have a
[01:05:23] created at and updated at but I'm going
[01:05:25] to put these on like every single field
[01:05:26] I have so what I'm going to do just
[01:05:28] going to copy these over again is I'm
[01:05:29] going to create a variable called
[01:05:30] created at and updated at which are
[01:05:32] going to be timestamp variables and
[01:05:34] they're going to have a time zone
[01:05:35] associated with them generally in
[01:05:37] postgress if you're dealing with
[01:05:38] timestamps you want to add a time zone
[01:05:39] in there it's not going to change your
[01:05:41] database by taking up more space is just
[01:05:43] going to make it easier to work with
[01:05:44] your times in the future and again let's
[01:05:46] make sure this is created at and updated
[01:05:48] at our created at field is not null and
[01:05:50] it defaults to whatever the current time
[01:05:51] is whenever we add it same thing with
[01:05:53] updated at and whenever we updated it it
[01:05:55] converts the time to the actual current
[01:05:57] date so it automatically updates that
[01:05:58] date field for us so now we have our
[01:06:00] product table completely done now the
[01:06:02] next thing I want to do on this table is
[01:06:03] I actually want to add an index indexes
[01:06:05] are really important if you're working
[01:06:07] with data where you need to access data
[01:06:08] based on specific fields for example I'm
[01:06:11] almost always going to be getting my
[01:06:12] products based on this clerk user ID so
[01:06:14] where clerk user ID equals 1 2 3 and so
[01:06:17] on so I want to set up an index on this
[01:06:19] clerk user ID so that way it makes those
[01:06:20] queries even quicker than before that's
[01:06:22] what indexes are useful for so here I'm
[01:06:24] going to say that I'm going have a clerk
[01:06:26] user ID index I'm going to use the index
[01:06:29] property from the PG core I'm going to
[01:06:31] give it a name which is products. clerk
[01:06:34] user ID index and then finally I want to
[01:06:37] say what table that's going to be on
[01:06:39] which is our table. clerk user ID so I'm
[01:06:41] just setting up an index on that
[01:06:43] particular Row in our database to make
[01:06:44] our queries on our product table using
[01:06:46] that row much quicker now the next table
[01:06:48] that I want to work on is going to be
[01:06:49] the customization table because I can
[01:06:51] customize what the banner looks like I
[01:06:53] need to have a table for storing that
[01:06:54] information so I'm going to have a
[01:06:56] product customization table this is
[01:06:58] going to have an ID it's also going to
[01:06:59] have a class prefix this is like what I
[01:07:01] put before my CSS and this is the only
[01:07:03] thing that I can have be null because I
[01:07:05] can also not have a class prefix I need
[01:07:07] to have a product ID so that's not null
[01:07:10] and it's going to reference my product
[01:07:11] table and by putting on delete of
[01:07:13] cascade that means what's going to
[01:07:14] happen is if I delete my product it's
[01:07:16] going to delete the customization
[01:07:18] associated with that as well I also
[01:07:19] marked this as unique because each
[01:07:21] product can only have one customization
[01:07:23] table for it so each product has one row
[01:07:26] in the customization table so by making
[01:07:28] this unique it enforces that actual
[01:07:30] thing now the rest of this information
[01:07:31] is just all the different things that I
[01:07:33] can customize for example I can
[01:07:34] customize what my message is I can
[01:07:35] customize background color text color
[01:07:37] font size Banner container and whether
[01:07:39] or not this is going to be sticky to the
[01:07:40] top of the page and for each of them I
[01:07:42] gave them a default value so they all
[01:07:44] have default values so even if person
[01:07:46] does no customization they're going to
[01:07:48] have something that will display on the
[01:07:49] screen with all these defaults and then
[01:07:51] finally are created at and updated at
[01:07:52] Fields down there now the next thing we
[01:07:54] need to do with Drizzle is to set up a
[01:07:55] relation between our product and our
[01:07:57] product customization this will make
[01:07:58] doing certain queries much easier in the
[01:08:00] future so we can export a const called
[01:08:03] Product relations and we can set that to
[01:08:06] relations just like that again make sure
[01:08:08] we get that from the OM on our product
[01:08:10] table so these are going to be all the
[01:08:11] associations for our product table and
[01:08:13] this is going to take in a function just
[01:08:16] like this and this function takes in two
[01:08:18] parameters which is going to be either a
[01:08:20] one or a many so depending on if you
[01:08:22] have a one to one or a many to many or
[01:08:24] many to one relationship you Define that
[01:08:26] using this right here and this is going
[01:08:27] to return to us an object so let me just
[01:08:29] wrap this in some parenthesis there we
[01:08:31] go and the first thing I want to have is
[01:08:33] my product
[01:08:35] customization just like that that is a
[01:08:37] one toone relationship where each one of
[01:08:39] these has one product customization so
[01:08:41] I'm just saying my product table has one
[01:08:43] product customization in it and I call
[01:08:45] that product customization let me make
[01:08:47] sure I got enough parentheses to close
[01:08:49] everything off and you can see that that
[01:08:50] works fine now I'm going to copy this
[01:08:52] down here and this is going to be for my
[01:08:54] product customization
[01:08:57] relations there we go so product
[01:08:59] customization relations this is on my
[01:09:01] product
[01:09:03] customization table and again I can
[01:09:05] specify whether I have one to one or
[01:09:07] many to many in this case I only have a
[01:09:09] one: one relationship and I have one
[01:09:11] product so this one product is on my
[01:09:15] product table and I also need to specify
[01:09:17] a few different things because whichever
[01:09:18] table has the ID you need to specify a
[01:09:21] few other things on that relationship I
[01:09:22] need to specify what the fields are so
[01:09:24] in my case I have a product
[01:09:26] customization table. product ID the
[01:09:29] fields just references okay what field
[01:09:31] am I using for my foreign key in that
[01:09:33] case it's my product ID and then the
[01:09:34] referencing section says okay what does
[01:09:37] this reference in the other table well
[01:09:38] this references my product table ID so
[01:09:40] this just allows me to create really
[01:09:41] easy join queries between these two
[01:09:43] tables CU I know what the relation
[01:09:44] between them is now if we go back to my
[01:09:46] homepage so we can look at the pricing
[01:09:48] section you may remember that specific
[01:09:50] tiers have different abilities for how
[01:09:51] many times you can view the pricing page
[01:09:53] this is how many times the product can
[01:09:55] have Banner show up so we need a way to
[01:09:57] be able to track how many times each
[01:09:58] page has been viewed and then also use
[01:10:00] that information for analytics so the
[01:10:02] next table that I want to create is
[01:10:03] going to be the product view table and
[01:10:05] the product view table all that's going
[01:10:07] to do is it's going to be okay which
[01:10:09] product am I viewing and which country
[01:10:11] am I viewing from which is a table we're
[01:10:12] going to create in a little bit and then
[01:10:14] when did I actually view that so this
[01:10:15] when information is very useful for our
[01:10:17] actual analytics this country
[01:10:19] information is very useful for we
[01:10:21] analytics again so we can see where is
[01:10:23] everyone coming from and then obviously
[01:10:24] the product is very very important so we
[01:10:26] can associate how many times has each
[01:10:28] individual product been viewed so we can
[01:10:29] make sure we limit how many pricing page
[01:10:31] visits we have per month so that way we
[01:10:33] can make sure people upgrade from the
[01:10:34] free tier and so on to earn us more
[01:10:36] money so as I mentioned this uses a
[01:10:38] country table so let's create a country
[01:10:40] table here this is relatively
[01:10:41] straightforward all it has is a name and
[01:10:43] a code which again we're making sure
[01:10:44] that these are unique and we're giving
[01:10:46] it a country group ID which allows us to
[01:10:48] group our different countries together
[01:10:50] because when we edit our coupon codes we
[01:10:52] have the ability to view all the
[01:10:53] different groups for our coupon code so
[01:10:55] for for example all the people in the
[01:10:56] group with 20% purchase power versus 30%
[01:10:59] versus 40% versus 50% if you remember
[01:11:01] that edit page where it had all the
[01:11:02] flags that's exactly what each group
[01:11:04] represents so each country belongs to
[01:11:06] exactly one group so let's go ahead and
[01:11:08] we're going to create our group as well
[01:11:10] so we're just going to paste that down
[01:11:11] into here and then finally that should
[01:11:12] be the last thing we need for getting
[01:11:14] all the different stuff for these tables
[01:11:16] Associated so we have our country name
[01:11:17] code and group and our group all it has
[01:11:19] is a name and it has a recommended
[01:11:21] discount percent this is just helping
[01:11:23] people that are starting up creating
[01:11:24] their first product they don't really
[01:11:26] know how much of a discount to give for
[01:11:28] each different country so this says okay
[01:11:30] for these countries we recommend around
[01:11:31] a 50% discount or so on obviously they
[01:11:34] can change it but this just helps make
[01:11:35] their life much easier so again we have
[01:11:37] our groups we have our countries we have
[01:11:39] our product views and we have our
[01:11:41] customizations and our products now this
[01:11:43] still isn't nearly enough to get
[01:11:44] everything done but now we can set up
[01:11:46] the relations between all of these
[01:11:48] different things for example on our
[01:11:50] product we now have relations to other
[01:11:51] things namely we can have a bunch of
[01:11:54] different views for our product product
[01:11:55] so we have a many relationship that's on
[01:11:57] our product views so there's many
[01:12:00] product views that are associated with
[01:12:01] the product view table there we go now
[01:12:04] if we move down to our product view we
[01:12:05] need to create the relations for this as
[01:12:07] well I'm just going to copy this over
[01:12:09] because it's relatively straightforward
[01:12:10] code we're creating a on toone
[01:12:12] relationship where it has one product
[01:12:13] and one country and we're using these ID
[01:12:15] fields for those references then we can
[01:12:17] move on to our country which again is
[01:12:19] very similar and rather straightforward
[01:12:21] you can see here our country is going to
[01:12:23] have a single country group group and it
[01:12:25] can have many different views in our
[01:12:27] product view table finally we have our
[01:12:29] country group relationship which again
[01:12:31] is going to be rather straightforward
[01:12:32] each country can have multiple different
[01:12:34] country groups now you'll notice in here
[01:12:35] we also have this section called country
[01:12:37] group discount so the way that I've
[01:12:39] structured our database is we have a
[01:12:41] country and each country has a group
[01:12:43] that it falls in so this is whether it's
[01:12:44] going to be parody purchasing group of
[01:12:46] like 2 to three or 3 to four or four to
[01:12:48] 5 and so on and then each of those
[01:12:50] groups we can give a specific discount
[01:12:52] code too in our application so that's
[01:12:54] where this next table is going to come
[01:12:56] from it's going to be associating all of
[01:12:58] our different discounts for an
[01:12:59] individual group for an individual
[01:13:01] product so here if we take a look at
[01:13:03] this particular table you can see that
[01:13:05] this table has a country group ID which
[01:13:07] is going to reference our country group
[01:13:08] table it's going to have a product ID to
[01:13:10] reference our product table and then we
[01:13:11] have what our coupon code is as well as
[01:13:13] what our discount percentage is going to
[01:13:15] be so this is where the individual user
[01:13:17] saves a particular coupon and a
[01:13:19] particular discount percentage for a
[01:13:21] particular country group so this way if
[01:13:23] I want people in India and all other
[01:13:25] countries in that group to have 30% off
[01:13:27] using the coupon India I can put all
[01:13:29] that information in here and save that
[01:13:31] also I made sure that the primary key
[01:13:33] for this table is just my country group
[01:13:35] ID and my product ID because there's no
[01:13:37] way that I can have multiple entries for
[01:13:39] a individual product and individual
[01:13:41] group ID I can only have one coupon code
[01:13:43] and one discount percentage for this
[01:13:45] combination information so it made sense
[01:13:47] to make this my primary key I can also
[01:13:48] go ahead and set up My Relations so as
[01:13:50] you can see here my group discount
[01:13:51] relations is going to have one product
[01:13:53] and it's going to have one country group
[01:13:55] again based on these particular IDs I
[01:13:57] also can modify our product relation at
[01:13:59] the very top of our page because now we
[01:14:00] have another many to many relationship
[01:14:02] that I need to De with and this is my
[01:14:04] country group discounts which is going
[01:14:06] to be a manyu relation on my country
[01:14:09] group discount table now the final table
[01:14:11] that I need to add to my database is
[01:14:13] going to be for handling my subscription
[01:14:15] so are they on the free tier the basic
[01:14:16] plan standard premium and so on I need
[01:14:18] all of that inside of its own table so
[01:14:20] this table right here has a clerk user
[01:14:22] ID so I can associate it with an
[01:14:24] individual user it's going to have
[01:14:25] information related to stripee so I'm
[01:14:27] going to have the stripe subscription
[01:14:28] item the subscription ID and the
[01:14:30] customer ID this makes it so that I can
[01:14:31] let the user change their subscription
[01:14:33] between different tiers without making
[01:14:35] them have to sign up for multiple
[01:14:36] subscriptions it'll automatically change
[01:14:38] one subscription to the next without
[01:14:39] like canceling or restarting it's
[01:14:41] important that you store all this
[01:14:42] information for subscriptions then we
[01:14:44] have the tier that they're going to be
[01:14:45] in which is going to be an enum I'll
[01:14:47] create in just a second so for example
[01:14:48] are they the standard the premium the
[01:14:50] basic or so on and then I have a few
[01:14:52] different indexes again to make my
[01:14:54] queries easier because I'm always going
[01:14:55] to be creating this table based on
[01:14:57] either the user or the stripe index so
[01:14:59] that's why I have those different tiers
[01:15:01] now let's create that index or that tier
[01:15:03] so we're going to say cons tier enum
[01:15:06] equals and that's using PG enum just
[01:15:08] like that and we're going to call this
[01:15:10] tier and what I want to do for this is I
[01:15:13] want to get it based on all of my
[01:15:14] different subscription tiers so I have
[01:15:16] my subscription tiers just like this but
[01:15:18] I want to get just the keys so we're
[01:15:19] going to say object. keys just like that
[01:15:22] that's going to give me all of my
[01:15:23] different keys for this particular your
[01:15:25] user but this is just going to be an
[01:15:26] array of strings it doesn't know
[01:15:28] typescript isn't smart enough to know
[01:15:30] that this is specifically just the names
[01:15:32] of my tiers so I need to say that this
[01:15:34] is actually going to be an array of tier
[01:15:36] names so to do that I'm going to create
[01:15:38] this tier names type so we'll say up
[01:15:40] here type tier names is going to be
[01:15:43] equal to all we're going to do is take
[01:15:45] the type of my subscription tiers and I
[01:15:47] want to get the keys of that so now if I
[01:15:49] hover over this tier names you can see
[01:15:51] it's free basic standard or premium so
[01:15:54] let's export that
[01:15:55] type just like that and now inside of
[01:15:58] here if I import that tier names that's
[01:16:00] smart enough for postgress to now know
[01:16:02] and drizzle to know that hey I have this
[01:16:04] information if I hover over this tier
[01:16:05] enum you can see it's either free basic
[01:16:07] standard or premium and that is
[01:16:08] absolutely everything set up for my
[01:16:10] database now I know I went through this
[01:16:11] rather quickly but that's because it's a
[01:16:13] lot of typing of code and overall the
[01:16:15] important thing is to get the high level
[01:16:16] of how the database works so I'm going
[01:16:18] to go through that real quick first a
[01:16:20] user can create a product and this
[01:16:21] product has the ability to be customized
[01:16:23] through our product customization table
[01:16:25] and we have the ability to have specific
[01:16:27] discounts associated with that product
[01:16:29] using our country group discount table
[01:16:31] now we only can put discounts for
[01:16:33] individual country groups so instead of
[01:16:35] putting a discount per country itself we
[01:16:37] put a discount for each group of
[01:16:39] countries so that's why we have this
[01:16:40] country group table and this country
[01:16:42] table to make sure we track okay which
[01:16:44] group is each country in and we can
[01:16:46] easily change what group a country is in
[01:16:48] based on how the economy in that country
[01:16:49] changes over time for example if India
[01:16:52] all of a sudden gains a lot of wealth
[01:16:54] and a lot of purch in power for
[01:16:55] individuals increases in India India may
[01:16:57] move to a different pricing tier and
[01:17:00] nobody in our application needs to do
[01:17:01] anything we can just move that country
[01:17:03] from one tier to another and it's
[01:17:04] automatically going to work everywhere
[01:17:06] else now we also have a table for
[01:17:08] tracking how many times a product has
[01:17:10] been viewed which allows us to make sure
[01:17:11] that we're not showing the product more
[01:17:13] than they're paying for and we can show
[01:17:15] different analytics to our user finally
[01:17:17] at the very bottom we have the ability
[01:17:18] to store which tier a user subscribed to
[01:17:21] so that way we know are they on the free
[01:17:22] tier the basic tier the standard tier
[01:17:23] and so on so we can give them different
[01:17:25] permissions and allow them to use
[01:17:26] different things in our application
[01:17:27] based on what tier they're a part of so
[01:17:29] now once we have our schema entirely
[01:17:30] done we can go back to this drizzle file
[01:17:32] here and we need to make sure that we
[01:17:34] pass along our schema into this
[01:17:36] particular section of drizzle so let's
[01:17:38] import Star as schema from our schema
[01:17:43] file this is just going to make sure
[01:17:44] that drizzle knows what our schema looks
[01:17:46] like so we can do something like dbquery
[01:17:48] Dot and it's going to give us all the
[01:17:50] different tables we've created and it
[01:17:51] allows us to do all the different
[01:17:52] relationships between them and so on
[01:17:54] it's really important that you do this
[01:17:55] otherwise you won't get any type safety
[01:17:57] now to work with Drizzle we need to run
[01:17:58] a few different commands so what I'm
[01:18:00] going to do is actually go into my
[01:18:01] package Json and I'm going to create a
[01:18:02] script for all the different commands we
[01:18:04] need to run I'm just going to paste this
[01:18:06] down here we go we have our DB generate
[01:18:08] command which is going to run drizal kit
[01:18:09] generate we have a migrate command to
[01:18:11] run migrate and we have a studio command
[01:18:12] to run Studio the generate command will
[01:18:14] generate migration files for us so now
[01:18:16] that we've changed our schema we should
[01:18:18] probably create those migration files
[01:18:19] npm run DB
[01:18:22] generate there we go give that a quick
[01:18:24] second to run and we should see it's
[01:18:25] going to run and if we look over into
[01:18:27] our DB folder you can see we have this
[01:18:29] migration folder and in here this is all
[01:18:31] of the SQL code that needs to run to
[01:18:33] create our entire database and every
[01:18:35] time we make changes We'll add a new
[01:18:36] file to that Migration by using the
[01:18:38] generate command now we can use the
[01:18:40] migrate command to actually push those
[01:18:42] changes up to our database so now that
[01:18:44] we have our database URL we're actually
[01:18:46] pushing those changes to our database
[01:18:47] and now if I go to Neon and I look at
[01:18:49] all the tables for our particular
[01:18:50] database you can see we have a table for
[01:18:52] all of the different things that we've
[01:18:53] created inside of our application so now
[01:18:56] we've actually connected our database
[01:18:57] with the changes that we just made using
[01:18:59] that migrate command the last thing is
[01:19:01] the studio command and this just allows
[01:19:03] us to actually view our application from
[01:19:05] our Local Host if we really want to if I
[01:19:07] open this up you can see that now we can
[01:19:09] view inside of here essentially the same
[01:19:11] thing we can view inside a neon all of
[01:19:13] the different rows in our database
[01:19:14] there's no information in there right
[01:19:15] now so we can just close out of that now
[01:19:17] even before we start working on more
[01:19:19] information for our dashboard I want to
[01:19:21] make sure all of our users have a
[01:19:22] subscription tier as soon as they sign
[01:19:24] up because because we have this free
[01:19:25] tier I want to associate someone with a
[01:19:27] free tier as soon as they sign up for
[01:19:28] our application and clerk makes this
[01:19:30] really easy to do if we go back over to
[01:19:32] clerk we actually have the ability to
[01:19:34] configure different things inside of our
[01:19:35] application I'll make this a little bit
[01:19:36] larger click on configure and if we
[01:19:38] scroll down we have this web hook
[01:19:39] section this web hook section allows us
[01:19:41] to actually run specific code in our
[01:19:43] application when certain things happen
[01:19:45] such as creating a user so let's add in
[01:19:47] an endpoint we need to give this a
[01:19:49] particular URL and then we can associate
[01:19:51] it with specific events such as user
[01:19:53] created that's the only one we really
[01:19:54] care about you can also make sure when
[01:19:56] the users are deleted that you do
[01:19:57] certain things in your application and
[01:19:59] so on but for ours we're just going to
[01:20:00] deal with user created for now actually
[01:20:02] let's go ahead and do user deleted while
[01:20:04] we're at it might as well now to make
[01:20:05] sure we understand how everything in
[01:20:07] here works we can go up to this view doc
[01:20:08] section that's going to open up the
[01:20:10] documentation for this and if we scroll
[01:20:12] all the way down it's actually going to
[01:20:13] tell you exactly what each of these web
[01:20:14] hooks looks like and it's going to tell
[01:20:16] you how everything works and most
[01:20:17] importantly it's going to give you the
[01:20:18] code to actually implement this inside
[01:20:20] of your own application so this section
[01:20:22] for sync data to your database if we
[01:20:24] click here this is going to give us a
[01:20:25] step-by-step guide on exactly what we
[01:20:27] need to do first we need to actually
[01:20:29] expose our application to the Internet
[01:20:31] so that we can hook up to it with clerk
[01:20:33] they tell you to use endro but if you're
[01:20:34] using vs code the ability to port
[01:20:36] forward is built into vs code click on
[01:20:38] ports and click forward a port and just
[01:20:40] type in your port for ours it's going to
[01:20:42] be Port 3000 this is going to set up a
[01:20:44] forwarded address and we need to make
[01:20:46] sure we set the visibility to public so
[01:20:48] that way clerk can access this
[01:20:49] information then all we need to do is
[01:20:51] just copy that address and inside of
[01:20:53] clerk where we need to set up the
[01:20:54] endpoint you URL copy in that address
[01:20:56] this is how they're going to connect to
[01:20:57] our application then what we need to do
[01:20:59] inside of clerk if we come back over to
[01:21:01] here is this going to tell us exactly
[01:21:02] what to create so first create the
[01:21:04] endpoint in our clerk dashboard that's
[01:21:05] what we're going through right now so
[01:21:07] inside of here let's go ahead and just
[01:21:08] click create since we have our events
[01:21:09] that we want to listen for and that's
[01:21:11] going to give us a bunch of information
[01:21:12] most importantly our signing secret so
[01:21:14] let's go ahead and we're going to copy
[01:21:16] that over this is our web hook secret
[01:21:17] for clerk so in our environment
[01:21:19] variables we need to make sure that we
[01:21:20] add that information in so we'll call
[01:21:22] this clerk web hook Secret
[01:21:25] there we go I'm going to copy that over
[01:21:27] into our example as well and then also
[01:21:30] since we're using this as an environment
[01:21:32] variable that needs to be inside of here
[01:21:33] as well that is our clerk web hook
[01:21:35] secret which is a z. string there we go
[01:21:38] that's all we need to do to get our
[01:21:39] environment variable hooked up back to
[01:21:41] our documentation on what to do next we
[01:21:42] need to add that signing secret we
[01:21:44] already did that so that's already done
[01:21:45] and then finally we can set up a web
[01:21:47] hook route inside of our middleware so
[01:21:49] make sure that that is public we've
[01:21:50] already done that inside of our
[01:21:52] middleware because if we go to our
[01:21:53] middleware file and we open this up you
[01:21:55] can see our API is currently public and
[01:21:57] that's where our web Hook is going to
[01:21:58] lay so we already know that that is
[01:22:00] public finally we need to install this
[01:22:02] SV Library this is how they actually do
[01:22:05] the communication to verify everything
[01:22:07] is coming from Clerk and then finally we
[01:22:09] just need to create the endpoint for it
[01:22:11] and put this exact code inside there so
[01:22:12] I'm going to copy this code over and I'm
[01:22:14] going to create an endpoint inside of
[01:22:15] that API route so inside of here create
[01:22:18] an API folder and inside of that API
[01:22:20] folder I'm going to put a folder
[01:22:21] specifically for handling all of my web
[01:22:23] Hooks and I'm going to create a folder
[01:22:25] specifically for clerk so in here route.
[01:22:28] TS and we can paste in all of the code
[01:22:30] that it gives us this is what we need to
[01:22:31] run and it literally is essentially as
[01:22:33] simple as that now I'm going to clean up
[01:22:35] this code slightly so the very first
[01:22:36] thing I'm going to do is I'm going to
[01:22:37] take all this stuff for getting all of
[01:22:39] our different headers I'm going to paste
[01:22:40] in my own code version of that so you
[01:22:42] can see we're getting our headers and
[01:22:43] we're getting the information
[01:22:45] specifically related to svix and we can
[01:22:47] check if any of this information is not
[01:22:49] there we're going to return an error
[01:22:50] down to the user so at least we know
[01:22:52] that we have all the information that we
[01:22:53] need the next thing I need to do is to
[01:22:55] be able to get the information for the
[01:22:56] payload this is like all the Json
[01:22:58] information for our new user being
[01:23:00] passed up to us and then we can get our
[01:23:02] web hook secret which is our EnV dot
[01:23:04] make sure I import EnV from the server
[01:23:07] version there we go and this is going to
[01:23:08] be our clerk web hook secret so we're
[01:23:10] going to be passing that directly into
[01:23:12] here and that's going to give us back an
[01:23:13] event I'm going to rename this to event
[01:23:15] just to make it a little easier to work
[01:23:16] with there we go it's a little more
[01:23:18] descriptive that way so we've created
[01:23:19] our web hook we've created our event now
[01:23:21] what we're doing is we're verifying that
[01:23:23] all of our information is correct and
[01:23:24] I've rened these variables to be a
[01:23:26] little bit more you know JavaScript
[01:23:27] focused by making them camel case like
[01:23:29] that so now we have verified based on
[01:23:31] our headers we're verifying okay does
[01:23:33] this body correctly signatured by this
[01:23:35] svx Library it's just making sure that
[01:23:37] other people don't post information to
[01:23:39] this and it guarantees all this
[01:23:41] information is coming directly from
[01:23:42] clerk so then the next thing we need to
[01:23:43] do is way down here we can set up a
[01:23:45] simple switch statement so we're going
[01:23:47] to say switch on event. type and now we
[01:23:50] can say you know what in the case that
[01:23:51] we have a user created I want to run
[01:23:53] some specific specific set of code so
[01:23:55] inside of here this is going to be user
[01:23:58] created and I can access that event by
[01:24:00] saying event. dat. I get all the
[01:24:03] information from my new user such as the
[01:24:04] ID of the user which is really all I
[01:24:06] care about so now let's go ahead and
[01:24:07] write the code to create this user
[01:24:09] subscription so we can access our
[01:24:11] database by saying DB Dot and we can do
[01:24:13] an insert statement on our user
[01:24:14] subscription table what I want to do is
[01:24:16] I want to insert the values so for my
[01:24:18] data inside of here you can see we have
[01:24:20] our clerk user ID and our tier that are
[01:24:22] the only required things so our clerk
[01:24:24] user ID is our event. data. ID then what
[01:24:27] we can do is we can pass in the tier and
[01:24:29] by default we want to sign them up for
[01:24:31] the free tier so that's all we need to
[01:24:32] do to actually give the values that
[01:24:34] we're inserting into our database we
[01:24:35] obviously want to await this to make
[01:24:37] sure that it runs but that's literally
[01:24:38] all we need to do to add a user to our
[01:24:40] database once that's done we can just
[01:24:42] add in a break statement here make sure
[01:24:43] occurred is spelled correctly and that's
[01:24:45] it so pretty much all this code is
[01:24:47] directly from the clerk documentation
[01:24:49] and that is actually going to run every
[01:24:50] time we create a brand new user now I've
[01:24:52] already created my user so what I'm
[01:24:54] going to do is I'm going to delete my
[01:24:55] user so we can go over to our dashboard
[01:24:57] real quick click on my user here click
[01:24:59] on manage account and I want to just
[01:25:00] delete this account so we'll say delete
[01:25:03] account there we go now we're back onto
[01:25:05] this page and I can do a quick login and
[01:25:07] sign up for a user so we'll click sign
[01:25:09] up I want to sign up with GitHub give
[01:25:11] that a quick second and you can see that
[01:25:12] now we've actually signed in with GitHub
[01:25:14] and it should have called out to our API
[01:25:16] to actually connect and create a brand
[01:25:18] new user Force as you can see it's
[01:25:20] already made get request to all that
[01:25:21] made a get request to here but I don't
[01:25:23] think it actually made our post post
[01:25:24] request what we can do is we can go over
[01:25:26] to our dashboard to check to see if this
[01:25:28] is working in our endpoint so in our
[01:25:30] overview for our endpoint we can click
[01:25:31] on our endpoint itself click on this one
[01:25:34] and you can see no messages were
[01:25:35] received or sent but you can see right
[01:25:37] here actually there was two succeeded
[01:25:39] messages for user created and user
[01:25:41] deleted so it was actually properly
[01:25:42] sending information over so let's check
[01:25:44] our neon console to see if we have a
[01:25:46] user subscription and it looks like we
[01:25:47] don't have a user subscription being
[01:25:49] created so let's make sure that
[01:25:50] everything is working as we expected to
[01:25:52] we can minimize this down a little bit
[01:25:54] we can put a console log inside of here
[01:25:57] that just says hi so we know that we're
[01:25:59] hitting this particular endpoint and
[01:26:00] what we can do is we can actually call
[01:26:01] this replay function which is just going
[01:26:03] to resend this message for us so we'll
[01:26:05] come in here click resend and that is
[01:26:07] going to resend this and you can see it
[01:26:08] did make a post request but it went to
[01:26:10] post slash that's because I didn't
[01:26:12] actually add in my apiweb hooks SL clerk
[01:26:17] there we go so I'm making sure I call
[01:26:18] the correct endpoint now let's try
[01:26:20] retrying that again we should hopefully
[01:26:21] see if we do that retry properly it
[01:26:23] should actually log out high you can see
[01:26:26] it's compiling that page and it looks
[01:26:27] like we're getting high being logged out
[01:26:29] we are getting some warnings but we can
[01:26:30] pretty much ignore but we should see in
[01:26:32] our database if we refresh that we now
[01:26:34] have a row inside of our table and we do
[01:26:36] and if we scroll over you can see that
[01:26:38] they should be set to the free tier
[01:26:39] which they are so this is working really
[01:26:41] really well so now every time a user is
[01:26:43] created we actually have them being
[01:26:44] hooked up to a particular tier so now I
[01:26:47] should be able to have that free tier on
[01:26:49] this user account and I can do different
[01:26:50] verification now before we dive into
[01:26:52] that I want to do a huge thing that's
[01:26:53] going to massively clean up our code
[01:26:56] it's really easy when you're working
[01:26:57] with a database to just write a bunch of
[01:26:58] DB statements all over your application
[01:27:00] and then all of a sudden you realize
[01:27:01] that your database code is literally
[01:27:03] everywhere scattered throughout all of
[01:27:04] your application it's difficult to track
[01:27:06] what's going on to fix errors and so on
[01:27:08] so what I want to do is I want to create
[01:27:09] a brand new section in our application
[01:27:11] for only storing database related
[01:27:13] queries so I'm going to put a server
[01:27:15] folder for all of our server related
[01:27:16] code and inside of here I'm going to
[01:27:18] create a database folder now in this
[01:27:20] database folder I'm going to create a
[01:27:21] bunch of different files for all the
[01:27:22] database interactions we can do for
[01:27:24] example anytime I want to deal with a
[01:27:26] subscription it's going to be in this
[01:27:27] subscription. TS file and now I can
[01:27:30] create a function that's going to create
[01:27:31] a user subscription so I can export a
[01:27:34] function called create user
[01:27:37] subscription just like that and it's
[01:27:39] going to take in whatever data is
[01:27:41] related to creating this so to easily
[01:27:43] get that we can just say type of that's
[01:27:44] going to be coming from our user
[01:27:47] subscription table Dot and we can just
[01:27:49] use the infer insert that's going to
[01:27:52] essentially say that this data is
[01:27:53] whatever we can insert into our
[01:27:54] particular table then we can just do our
[01:27:56] database call so I'm going to come back
[01:27:58] to here I'm going to take this entire
[01:27:59] database call copy that out of here I'm
[01:28:02] going to paste that directly into here
[01:28:03] and we're just going to return that for
[01:28:05] now we'll say DB just like that and this
[01:28:07] is going to be taken in all of our data
[01:28:09] so we're just going to pass in our data
[01:28:10] as our values so now this is where we do
[01:28:12] our create we can come back into here
[01:28:14] and what I want to do is I want to call
[01:28:16] that create function just like this pass
[01:28:18] it in this information and now my
[01:28:20] database information is being stored in
[01:28:22] this one file so every time I want to
[01:28:24] deal with a subscription in my database
[01:28:25] I can write the code in this file and I
[01:28:27] can reuse it everywhere in my
[01:28:28] application and I can even make sure I
[01:28:30] get rid of all these different Imports I
[01:28:32] don't need and you should see if you do
[01:28:33] this that the database file is never
[01:28:36] imported anywhere except for inside this
[01:28:38] DB folder that makes your code much
[01:28:39] easier to clean and if you ever want to
[01:28:41] change from drizzle to prismo or
[01:28:43] something else you can just change these
[01:28:44] one set of files and that's going to do
[01:28:46] all the changes for you throughout your
[01:28:47] entire application this is a must-have
[01:28:49] on any larger scale application you may
[01:28:51] not think this is as important it is but
[01:28:53] I guarantee you once we start dealing
[01:28:54] with caching and other more complicated
[01:28:56] database queries you're going to see how
[01:28:58] amazing this is now one thing I want to
[01:28:59] do is on this if there's a conflict I
[01:29:02] want to do nothing so if for example I
[01:29:04] try to insert a user into the table that
[01:29:05] already exists I'm going to make sure
[01:29:07] that we don't do anything so anytime
[01:29:09] that the clerk user ID already exist on
[01:29:10] my table I'm just going to do nothing at
[01:29:12] all this is really important to have in
[01:29:14] cases where like I replay this again so
[01:29:16] if I come back into my clerk dashboard
[01:29:18] and I were to like replay this user
[01:29:19] created event a second time and I
[01:29:21] already had information in my database
[01:29:23] it doesn't reset that information or
[01:29:24] throw error it just says okay you know
[01:29:25] what they already have a subscription
[01:29:27] just completely ignore that now in order
[01:29:28] to handle deleting as well since I
[01:29:30] mentioned that we're going to do that
[01:29:31] let's go back into our route for that
[01:29:33] web hook and I want to be able to have
[01:29:35] another check here so we'll put in a
[01:29:37] case this one's going to be user.
[01:29:39] deleted and inside of here I just want
[01:29:41] to do a bunch of deleting so we're just
[01:29:43] going to call a function called delete
[01:29:44] user just like that and we'll pass it in
[01:29:46] my event. dat dot this is going to be
[01:29:50] the deleted users ID which should just
[01:29:52] be ID now it does say that this ID field
[01:29:54] could be undefined so we'll just say if
[01:29:57] the event. data. ID is equal to null
[01:30:00] well then we just want to essentially
[01:30:02] ignore everything so we'll just come in
[01:30:04] here and if it's not equal to null then
[01:30:06] we want to do this delete user function
[01:30:08] and this again is going to be coming
[01:30:10] from that DB folder so inside of here
[01:30:12] let's create one for users. TS and I'm
[01:30:15] going to export a function called delete
[01:30:17] user which takes in a user ID so we're
[01:30:20] going to say clerk user ID which is a
[01:30:23] string and now we just need to delete
[01:30:25] everything from our database that's
[01:30:26] associated with that user so we can come
[01:30:28] in here and we can say DB and we want to
[01:30:31] do a delete statement and we want to
[01:30:32] delete from our user subscription table
[01:30:34] so we're going to say user subscription
[01:30:36] table where and we want to do it where
[01:30:39] the particular ID is so we can say where
[01:30:42] equals clerk whoops user subscription
[01:30:45] table. clerk user ID is equal to our
[01:30:48] clerk user ID so first of all we're
[01:30:50] going to do this delete function and I
[01:30:51] want to do all these inside of a batch
[01:30:53] so say DB batch and what that's going to
[01:30:55] do is it's going to make sure it runs
[01:30:57] all of these one after the other and if
[01:30:58] any of them fail it's going to roll back
[01:31:00] the entire thing so first of all we're
[01:31:01] going to do this delete make sure I put
[01:31:03] this inside of an
[01:31:06] array there we go so we're going to do
[01:31:08] our delete for our users in the
[01:31:10] subscription section then after that
[01:31:12] we're going to do a delete and this time
[01:31:14] we want to do it for our product table
[01:31:16] so we'll say product table where and we
[01:31:19] want to do the exact same wear Clause
[01:31:20] I'm just going to copy that over and I'm
[01:31:22] want to make sure that this is for
[01:31:24] our product table and let me make sure I
[01:31:26] capitalize that there we go product
[01:31:28] table and that's all we need to do
[01:31:30] because our clerk user is only
[01:31:32] associated with products and it's only
[01:31:33] associated with a user subscription and
[01:31:35] the really nice thing about doing it
[01:31:37] this way with all of our on delete
[01:31:38] Cascades that we set up is in our
[01:31:40] database if we look back at that file in
[01:31:42] our schema we set up a bunch of on
[01:31:44] delete Cascade so if I just scroll up a
[01:31:46] little wage you'll see that whenever we
[01:31:47] delete for example a product it's going
[01:31:49] to delete all the country group
[01:31:50] discounts associated with them and so on
[01:31:52] so anytime we delete something it's
[01:31:53] going to make sure it does that
[01:31:54] cascading for us so to be able to delete
[01:31:56] a user all we need to do is do this and
[01:31:58] we can just return this so we can make
[01:32:00] sure we can await it back into here so
[01:32:02] delete
[01:32:03] user there we go so now when we delete a
[01:32:05] user it gets rid of all their
[01:32:06] information from our database and we can
[01:32:08] really easily test this by just coming
[01:32:09] into here and I'm going to delete this
[01:32:11] particular user account so come over to
[01:32:13] Security delete
[01:32:15] account whoops make sure I spelled that
[01:32:18] properly click enter you can see it
[01:32:20] didn't look like any errors were thrown
[01:32:21] if I go over to our neon database we
[01:32:23] should see that there's no longer any
[01:32:24] subscriptions when I refresh the page
[01:32:26] give that a quick step and you can see
[01:32:27] our subscription has been removed so it
[01:32:29] properly deleted everything and now if I
[01:32:31] were to log in and sign up with my
[01:32:33] account it'll recreate that subscription
[01:32:35] for us so we have deleting and creating
[01:32:37] users hooked up properly now when we
[01:32:38] start dealing with stripe we're going to
[01:32:40] need to come in here with like a to-do
[01:32:41] that says remove stripe
[01:32:45] subscription so if they are on a stripe
[01:32:47] subscription we'll want to make sure
[01:32:48] that we cancel that but otherwise we
[01:32:49] should be good to go now up until this
[01:32:51] point we've done a lot of work for our
[01:32:52] application to essentially be a blank
[01:32:54] page but this has been a lot of
[01:32:55] groundwork which is going to make moving
[01:32:57] forward with the rest of our application
[01:32:58] so much easier so inside of our
[01:33:00] dashboard we can work on this main page
[01:33:02] right here so the very first thing I
[01:33:04] want to do is I want to render out a few
[01:33:06] of the products that I have so as a user
[01:33:07] I want to get a specific number of
[01:33:09] products so I can say const products is
[01:33:11] equal to and I can say await get
[01:33:13] products which is a function we're going
[01:33:15] to create in that database folder so
[01:33:16] we'll say get products based on a user
[01:33:19] ID so export this as an async function
[01:33:21] now to get my user ID I can just say
[01:33:24] const user ID is equal to a waiting off
[01:33:29] just like that this comes directly from
[01:33:31] Clerk and gives us essentially the user
[01:33:33] ID and we actually don't need to await
[01:33:34] that because this isn't asynchronous it
[01:33:35] just gets it directly from essentially a
[01:33:37] local storage JWT so it's really quick
[01:33:39] and super easy we get the user ID and
[01:33:42] technically this user ID comes back as
[01:33:44] string or null we know that we're on a
[01:33:46] private page so we know that this is
[01:33:47] going to be non- null so what we could
[01:33:49] do is we could put an exclamation point
[01:33:51] here that tells typescript that this
[01:33:52] can't be null but I prefer to do is just
[01:33:55] to do a check at the top of our page if
[01:33:57] the user is equal to null then we can
[01:33:58] just redirect them to the signin page
[01:34:00] which is something that comes directly
[01:34:02] from here so redirect to signin we can
[01:34:04] just call that function right here the
[01:34:06] reason that I like to do this instead of
[01:34:08] forcing typescript to say that it could
[01:34:09] be not null is just because it's going
[01:34:12] to make sure that my user ID is now set
[01:34:13] to not null everywhere in this file so I
[01:34:15] don't have to manually type it
[01:34:16] everywhere and it's going to make sure
[01:34:18] that if I accidentally access this off
[01:34:20] on a non-private page that it's going to
[01:34:22] make sure it fails safely for the user
[01:34:24] that is required so here we're getting
[01:34:25] our products so let's create this get
[01:34:27] products function so we're going to go
[01:34:29] back into that DB folder create a new
[01:34:30] file called products. TS and we want to
[01:34:33] export a function called git
[01:34:36] products now this is a relatively simple
[01:34:39] function it takes in our clerk user ID
[01:34:42] which is a string and then all we need
[01:34:44] to do is just return Calling whoops
[01:34:47] return Calling DB do query and this
[01:34:51] query is really nice because we can
[01:34:52] query on the product table and we can
[01:34:54] find many so it gives us that really
[01:34:56] nice syntax that you're used to with
[01:34:57] Prisma and that's because we set up all
[01:34:59] of our relations in drizzle so we can
[01:35:01] say we got to do a where and we want to
[01:35:03] do it where our clerk user ID column
[01:35:06] which we'll just call clerk user ID call
[01:35:11] and we want to check for equality this
[01:35:13] is actually going to be a function so
[01:35:15] let me make sure I wrap that in
[01:35:16] parameters
[01:35:18] here and what I can do is just call that
[01:35:20] equal function pass it in my clerk user
[01:35:23] ID column and my clerk user ID and boom
[01:35:25] that works now I'm going to clean this
[01:35:26] up a little by calling this user ID that
[01:35:29] way I don't need to rename this file or
[01:35:31] this column and we can just say user ID
[01:35:33] just like that so now all I'm doing is
[01:35:35] just saying hey give me all the products
[01:35:37] where the user ID matches this user ID
[01:35:40] and I also want to order them so I'm
[01:35:41] going to say order by and in this case
[01:35:44] we're going to have our properties
[01:35:45] inside of there this is a function I
[01:35:48] want to get the clerk user ID and I want
[01:35:51] to order them in descending order so I'm
[01:35:53] going to say descending order and this
[01:35:54] should be actually created at there we
[01:35:56] go so I'm going to order them by that
[01:35:58] created at field perfect now for our
[01:36:01] particular page I want to limit how many
[01:36:02] things I get back so right now if I
[01:36:03] import this everything will work but I
[01:36:05] want to limit this to like six so I want
[01:36:07] to say limit of six and in my get
[01:36:09] products I can make sure I take in a
[01:36:10] limit so we're going to say we're going
[01:36:12] to take in a limit and this is a limit
[01:36:15] that is optional and it's going to be a
[01:36:17] number so now I can just pass that along
[01:36:19] here because this query takes a limit so
[01:36:21] like I could pass along a limit of 10 or
[01:36:23] can just use the limit we pass in so now
[01:36:25] it's going to give us only six or it'll
[01:36:27] give us all of them if we don't pass
[01:36:28] along any limit so now you can see we
[01:36:30] have our products and we can print out
[01:36:31] any information we want about our
[01:36:33] products so the very first thing I want
[01:36:34] to do is to make sure we have products
[01:36:36] so I can say here if our products.
[01:36:38] length is equal to zero then I want to
[01:36:41] return a component I'm going to call no
[01:36:43] products because if we have no products
[01:36:45] I obviously can't render out the rest of
[01:36:47] our page so this no products component
[01:36:48] is something that I'm going to create
[01:36:50] it's going to be something only I use on
[01:36:51] these private pages so we'll say no
[01:36:53] product . TSX now this component is
[01:36:55] going to be a rather simple component
[01:36:57] we'll take a look at the code real quick
[01:36:58] you can see here I just have a ton of
[01:36:59] margin on the top and I'm centering all
[01:37:01] my text then I have an H1 that's rather
[01:37:03] large that just says you have no
[01:37:04] products and then finally I have a
[01:37:06] section that says hey get started by
[01:37:07] creating your first product and a link
[01:37:09] that Lings us to the actual add product
[01:37:11] page so if I give that a quick save give
[01:37:13] this a refresh make sure that I import
[01:37:15] this no products component we should
[01:37:17] hopefully see on our main page that it
[01:37:19] says you have no products get started by
[01:37:20] creating a product and this will bring
[01:37:22] us to the product/ new page which we
[01:37:23] have not created yet now we should
[01:37:25] probably go ahead and create a page for
[01:37:27] creating brand new products so what we
[01:37:28] can do is we come over to here we can
[01:37:30] say inside of our dashboard we're going
[01:37:31] to create a products folder and inside
[01:37:34] of here we're going to create a new
[01:37:36] folder and we'll create a page. txx
[01:37:38] directly inside of there so export a
[01:37:40] function new product page there we go
[01:37:44] and to emulate essentially as close as
[01:37:45] we can what this parody deal site looks
[01:37:47] like we can come into here and log in
[01:37:49] and once I log in and navigate to a page
[01:37:51] you can see that this is essentially
[01:37:52] what the create page looks like I'll
[01:37:54] even click create we want to create one
[01:37:55] of these and you can see it has this
[01:37:56] back button a title and then a card with
[01:37:58] all the different information we want to
[01:37:59] associate with this thing so I want to
[01:38:01] create this like back button style card
[01:38:03] that we're going to put on our page and
[01:38:05] that's going to be a component we can
[01:38:06] use lots of different places so I'm
[01:38:07] going to put it in this components
[01:38:09] folder we'll say page with back button
[01:38:12] make sure I capitalize button. TSX and
[01:38:16] we'll make sure we export a function
[01:38:18] page
[01:38:20] with back button now for this particular
[01:38:23] page we're going to have a few different
[01:38:24] props that we pass in the props we're
[01:38:26] going to be passing in is the hre for
[01:38:28] our back button we're going to be
[01:38:29] passing in the title for our page that's
[01:38:31] that section that goes up here and then
[01:38:33] finally all the children which is
[01:38:34] everything else we render on our page
[01:38:36] now to give it this really distinct two
[01:38:37] column layout we're going to be using
[01:38:39] grid for that so we can come in here
[01:38:41] with a div class name of grid we're
[01:38:43] going to say the grid columns are going
[01:38:44] to be Auto and 1fr that way the left
[01:38:47] column is as small as possible while our
[01:38:49] right column is as large as possible
[01:38:51] then we're going to say a gap in the X
[01:38:53] direction is going to be four and our
[01:38:56] Gap in the y direction is going to be
[01:38:57] eight to space out our top and bottom
[01:38:59] from our left and right a little bit
[01:39:00] more then we're going to come in here
[01:39:02] and style what the actual icon is going
[01:39:04] to look like on the left side this is
[01:39:06] going to be simply a button that we're
[01:39:07] going to render out as child and that's
[01:39:09] because it's going to have a link
[01:39:10] directly inside of it and that link is
[01:39:12] going to go to our back button href and
[01:39:15] inside of here it's going to have
[01:39:16] essentially two different things first
[01:39:18] of all it's going to have the text back
[01:39:20] which we're going to give a screen
[01:39:21] reader only so that way anyone on screen
[01:39:23] reader knows that this is our back
[01:39:25] button otherwise it's going to have a
[01:39:27] carrot left icon which will give a class
[01:39:30] name of size 8 to give it a nice and
[01:39:32] large back button Arrow make sure I
[01:39:35] close that off and make sure I import
[01:39:37] button just like that give that a quick
[01:39:39] little save and before we do anything
[01:39:41] else we can test to see if this is
[01:39:43] working like we expected to so we're
[01:39:45] going to go into our new product page
[01:39:46] here I want to return our page with back
[01:39:49] button just like that close that off
[01:39:52] we're going to say this is our inner
[01:39:54] content and our back button hre is just
[01:39:57] going to go to our products page there
[01:39:59] we go that's going to be dashboard SL
[01:40:02] products so now we don't have all the
[01:40:04] components passed along that's fine we
[01:40:05] can click add product and we can see if
[01:40:06] this brings us to the right page looks
[01:40:08] like we need to make sure we export this
[01:40:10] as a default function I always forget to
[01:40:12] do that there we go now you can see it
[01:40:14] looks like nothing's quite rendering
[01:40:15] right now let's go back to this page
[01:40:17] with back button and make sure we're
[01:40:18] rendering out our children as well and
[01:40:20] to make sure obviously that we're
[01:40:21] returning this content so let's give
[01:40:23] that a quick return you can see we have
[01:40:25] our back button showing up let's give it
[01:40:27] a bunch of styles to make it look a
[01:40:28] little bit better so first of all we can
[01:40:30] change the size on this to Icon that's
[01:40:32] going to make it more of a square shape
[01:40:34] so as you can see we now get that square
[01:40:35] shaped icon I want this to be rounded
[01:40:37] though so I'm going to say rounded full
[01:40:38] that's going to give it rounded style
[01:40:40] and I want this to have a variant which
[01:40:42] is going to be outline just like that
[01:40:44] now by default this outline variant
[01:40:46] gives us our accent color when we hover
[01:40:47] it I don't really like that so we're
[01:40:49] going to modify what that outline
[01:40:50] variant looks like so here on our
[01:40:51] outline when we hover instead of giving
[01:40:53] it this accent I'm going to give it the
[01:40:54] muted color and same thing here this is
[01:40:56] going to be our muted color so now when
[01:40:58] I hover you can see it gives me that
[01:40:59] gray color instead of giving me that
[01:41:01] blue color which I think looks a little
[01:41:02] bit better in this particular scenario
[01:41:04] now we can come back to here and finish
[01:41:06] off what the rest of this page is going
[01:41:07] to look like CU now we have our button
[01:41:09] section the next thing to work on is our
[01:41:10] title which is going to be inside of an
[01:41:12] H1 that's our page title and then
[01:41:15] finally the next thing that we're going
[01:41:16] to have is going to be our children so
[01:41:19] that's going to be in our div that's
[01:41:20] going to say children just like that now
[01:41:22] if we give that a save and we make sure
[01:41:23] that we pass along a page title so we'll
[01:41:25] say page title equals new product
[01:41:29] doesn't really matter you can see we
[01:41:30] have new product and we have our text
[01:41:32] but this text is in the wrong position
[01:41:33] and this title does not look super great
[01:41:35] so let's clean that up go back to our
[01:41:37] page with back button first of all we'll
[01:41:38] work on our title we'll make the text
[01:41:40] much larger 2 XL we'll probably do we'll
[01:41:42] make it a semi bold font and we'll make
[01:41:45] it so that it's in the center of the
[01:41:47] page there we go and this is actually
[01:41:48] centering it vertically so if we remove
[01:41:50] that you can see it's up a little bit
[01:41:52] and when we add that it's centered
[01:41:53] perfectly with this button now for our
[01:41:55] children to make them in the right
[01:41:56] section we can say our column is going
[01:41:58] to start in the second row and that's
[01:42:00] going to make sure it starts over on
[01:42:01] this right hand side instead of on the
[01:42:03] left hand side and that's all we need to
[01:42:04] do to get this entire page with a back
[01:42:06] button working and when I click back it
[01:42:08] brings me back to my products page which
[01:42:09] we don't actually have yet so that's why
[01:42:11] it's giving me a 404 but we at least
[01:42:13] know that that is working like we want
[01:42:14] it to so let's go ahead in here we'll
[01:42:15] change this to create product and now we
[01:42:17] can work on this intersection which I'm
[01:42:18] just going to be using a card for so
[01:42:20] we'll import card we're going to have a
[01:42:23] card header and inside there we're going
[01:42:25] to have a card title and inside that
[01:42:27] title we're just going to say product
[01:42:30] details and I want to make sure I change
[01:42:32] the class on this to be a text of large
[01:42:34] because I want it to be really large
[01:42:35] actually let's make it extra large there
[01:42:36] we go we have our product details
[01:42:38] finally after our header we're going to
[01:42:39] do our content card content and this is
[01:42:42] going to be our product details form
[01:42:45] which is a form we're going to create
[01:42:46] for all the different details so over
[01:42:48] here you know be like things like name
[01:42:49] description URL so on so for our form
[01:42:51] this is going to be something that we're
[01:42:52] going to put inside this components
[01:42:54] folder and I'm actually going to create
[01:42:55] a separate folder specifically for
[01:42:56] dealing with forms and inside of here
[01:42:59] I'll create a file we'll call product
[01:43:01] details form. TSX now to work with this
[01:43:05] we'll just export a function
[01:43:07] product
[01:43:09] details form make sure I actually spell
[01:43:12] all this properly there we
[01:43:15] go return n for now we need to import a
[01:43:18] bunch of components from Shad CN to get
[01:43:20] this to work so let's come into here
[01:43:22] we're going to go down import a bunch of
[01:43:23] components we're going to say npx Shad
[01:43:27] CN at latest we want to add and we want
[01:43:29] to add the form component the input
[01:43:32] component the text area component and we
[01:43:34] also want to deal with toast so we're
[01:43:36] going to add in the toast component as
[01:43:37] well give that click enter right there
[01:43:39] and that should import all the
[01:43:40] components we need but it looks like I
[01:43:41] spelled text area wrong so let me just
[01:43:43] make sure I get that spelled properly
[01:43:45] and now let's try that again it should
[01:43:46] import all of our different components
[01:43:48] give it a quick second it's asking us if
[01:43:50] we want to overwrite button obviously we
[01:43:52] do not so we will not overwrite that and
[01:43:53] now we have all the different components
[01:43:55] imported that we need to be able to work
[01:43:56] on creating this particular form now
[01:43:58] creating a Shad CN form is really not
[01:44:00] too complicated once you know how all
[01:44:01] the different parts work first we need
[01:44:03] to get our form and this is coming from
[01:44:05] the use form hook and this is a hook
[01:44:07] that's part of a react hook form so we
[01:44:09] can import use form from react hook form
[01:44:13] just like that and this use form Hook is
[01:44:15] going to take a type for what type of
[01:44:17] thing we're importing so this is
[01:44:18] actually coming from Zod since we're
[01:44:20] going to be using Zod for actual schema
[01:44:22] definitions so we'll a z. infer type of
[01:44:25] and we want to specify what my schema is
[01:44:27] this is my product details schema and
[01:44:30] this is something that we need to Define
[01:44:32] so I'm going to come up here and we'll
[01:44:33] say const product details schema equals
[01:44:38] and we can say like Z doob and let's
[01:44:41] just say it's an object that has a name
[01:44:43] which is a string there we go that's all
[01:44:46] this is going to do so what we have
[01:44:47] right here is we're importing that
[01:44:49] particular thing as our type and now to
[01:44:50] make sure that we hook everything up to
[01:44:52] make sure it does type check checking we
[01:44:53] can say resolver and we're going to make
[01:44:55] sure we're using the Zod resolver
[01:44:57] function this is a function that we can
[01:44:59] import whoops import Zod resolver from
[01:45:03] and that comes from at hook form
[01:45:06] resolvers just like that now we have our
[01:45:08] Zod resolver and we need to make sure we
[01:45:09] get it from the SL Zod portion of that
[01:45:12] now we can pass in our schema which is
[01:45:14] our product details schema and then
[01:45:16] finally we can specify any default
[01:45:18] values that we have in our case we don't
[01:45:20] have any default values so we'll just
[01:45:21] put in an empty object for example we
[01:45:23] just don't have any defaults at all
[01:45:24] since we have no defaults let's just
[01:45:25] leave that off for now so now we have
[01:45:28] our form created and we're using that
[01:45:30] Zod schema and right now the only thing
[01:45:31] in that schema is our name so once we
[01:45:33] have a form created the next step is to
[01:45:35] work on actually creating the jsx for
[01:45:37] our form so we can use the form
[01:45:38] component from react hook form close off
[01:45:41] that form component and inside the form
[01:45:43] component we need to put our very own
[01:45:45] form and we need to also make sure we
[01:45:47] pass along all the information from our
[01:45:49] react hook form form so here we can say
[01:45:52] form just like that and what that's
[01:45:54] doing is it's taking this form and
[01:45:55] hooking it up to all the schema related
[01:45:57] information I have up here and using
[01:45:59] that for our actual normal form and
[01:46:01] inside the form we need to make sure we
[01:46:03] hook up our onsubmit and this is going
[01:46:05] to be calling form. handlesubmit and we
[01:46:07] can pass in our own on submit function
[01:46:09] so this function called on
[01:46:12] submit this function right here is going
[01:46:14] to take in all of my values and the
[01:46:16] values is just going to be the type of
[01:46:18] whatever our schema is expecting so this
[01:46:20] values right now is just a name that is
[01:46:22] a string
[01:46:23] so we can come in here and now we can do
[01:46:24] whatever we want with these particular
[01:46:26] values for now I'm just going to log
[01:46:28] them out to the screen now we can also
[01:46:30] do some styling on our form this is
[01:46:31] purely just visual I'm just going to
[01:46:33] make it a flex with a gap of six and
[01:46:35] flex column just to make our form have
[01:46:37] some spacing between things and then we
[01:46:39] can specify that we want to create a
[01:46:40] form field now this is coming directly
[01:46:43] from Shad CN so we can say form field
[01:46:46] want to make sure that I import this so
[01:46:48] let's just close that off let's try to
[01:46:50] do an import looks like it's not Auto
[01:46:52] importing so I'll just manually import
[01:46:55] form field from and that's going to be
[01:46:58] at
[01:46:59] slui actually components uiform and it
[01:47:03] looks like it did not import our form
[01:47:05] components they are there actually
[01:47:07] they're in our source components UI
[01:47:08] folder let me see exactly why they're
[01:47:10] not working so if we come over to here
[01:47:12] they are right in there I may just need
[01:47:14] to refresh some things on my page
[01:47:16] actually it looks like maybe that is now
[01:47:17] working we just need to pass along all
[01:47:19] of our Fields so for the form field we
[01:47:21] need to pass along a few things first of
[01:47:22] all our control this is what Hooks up
[01:47:24] our form to the actual form field so our
[01:47:26] form control goes into our form field
[01:47:28] the next step is the name and this name
[01:47:30] property is types save our only thing we
[01:47:32] have is name so we're going to set our
[01:47:34] name to name obviously this can be
[01:47:35] whatever you want for example if I had
[01:47:37] description in
[01:47:39] here which is a z. string as well
[01:47:44] description there we go I could change
[01:47:46] this to be description or name so we're
[01:47:49] just going to do it as name for now and
[01:47:51] then the final thing that we need to
[01:47:52] pass along here is our our render prop
[01:47:53] and this is just telling us what we want
[01:47:54] to render in this form field so this is
[01:47:56] going to be a function that takes along
[01:47:58] all of our Field properties and it's
[01:48:00] going to give us something we want to
[01:48:01] render so with shad CN it's really easy
[01:48:03] to do because we have a form item that
[01:48:05] we can pass in this form item will give
[01:48:07] a class name of flex grow just because
[01:48:09] I'm going to put it in a container in a
[01:48:10] second here I might as well just do that
[01:48:11] now so we'll say we have a div with a
[01:48:14] class name of grid and a gap of six and
[01:48:17] grid calls of one and large
[01:48:21] grid calls
[01:48:23] of two there we go so this is just going
[01:48:25] to allow me to put two form inputs side
[01:48:27] by side so I actually don't even need
[01:48:28] the flex SC on this because it's inside
[01:48:30] of a grid container so inside the form
[01:48:32] item we then specify a form
[01:48:34] label there we go and inside the label
[01:48:37] you can put whatever you want for
[01:48:38] example it's going to be the name of our
[01:48:39] product we'll specifically call it
[01:48:41] product name just like that then after
[01:48:43] our form label we're going to have a
[01:48:46] form control and this is where you put
[01:48:47] your input so in our case we can just
[01:48:49] put an input field like our text input
[01:48:51] so let's make sure I spell input
[01:48:53] correctly just like that and I want to
[01:48:55] make sure I close that off and I want to
[01:48:57] pass along all of my field related
[01:49:00] information and again make sure I import
[01:49:02] input correctly looks like I need to
[01:49:04] manually import that again import input
[01:49:08] from and that is going to be at
[01:49:10] components
[01:49:12] slui
[01:49:14] input there we go now we scroll all the
[01:49:17] way down here we looks like all of our
[01:49:18] errors are cleaned up finally we can add
[01:49:20] in a form message and this is going to
[01:49:22] show my error message if for some reason
[01:49:24] there is a particular error with our
[01:49:25] form so let's go over here make sure we
[01:49:28] import this so we can actually see our
[01:49:30] form showing up on our page come over
[01:49:32] here obviously we're getting quite a few
[01:49:33] errors right now so we need to go ahead
[01:49:34] and clean that up so let's scroll up
[01:49:36] it's something to do with this use form
[01:49:37] function it's saying it's not a function
[01:49:39] I believe part of the problem could be
[01:49:40] because I imported my form from the
[01:49:42] wrong section this form should be
[01:49:43] imported here from react or from Shad CN
[01:49:47] let's see if that actually cleans that
[01:49:48] up give a quick refresh still not quite
[01:49:50] working oh it's because obviously I need
[01:49:52] to be able to use a client component if
[01:49:55] I want to use client side code so this
[01:49:56] is a client side component and now we
[01:49:58] have our product name and I can type
[01:49:59] inside of there also to prove to you
[01:50:01] that validation is working I can specify
[01:50:03] that this has a minimum value of one and
[01:50:05] it'll show me the error required if I
[01:50:07] don't and now if I just make sure that I
[01:50:10] do everything correctly by putting a
[01:50:11] comma in there and I come in here and
[01:50:13] try to submit my form I get the error
[01:50:14] required but as soon as I type this in
[01:50:16] it goes away so this is really nice for
[01:50:18] giving me errors from my different
[01:50:19] validations it's all hooked up
[01:50:20] automatically and I don't need to do
[01:50:21] anything else on my own so I can just
[01:50:23] copy this down paste it in and all you
[01:50:25] need to do is change this name property
[01:50:27] change the label and everything else
[01:50:28] should just line up perfectly so for me
[01:50:30] I'm going to change this to my URL so it
[01:50:32] come into here URL whoops that's not
[01:50:35] where I wanted to type that out at there
[01:50:37] we go URL and this is going to be enter
[01:50:40] your website URL as the label and the
[01:50:44] really nice thing is I can add
[01:50:45] additional field descriptions if I want
[01:50:46] so I can say form description just like
[01:50:49] that and add additional information for
[01:50:51] example for this one I want to make sure
[01:50:53] that I explain exactly how this works by
[01:50:54] saying hey make sure you include the
[01:50:56] https and the full path to your sales
[01:50:58] page so that this will work now I'm
[01:51:00] getting an error because I don't have a
[01:51:01] URL filled up here so I'll say URL is a
[01:51:04] string it's also a URL string and it has
[01:51:07] a minimum of one because it is required
[01:51:09] and this I will Mark as optional because
[01:51:11] it is not required so now if I scroll
[01:51:13] down you can see that I get these two
[01:51:14] side by side well actually they're top
[01:51:16] and bottom but as soon as my screen's
[01:51:17] larger they should show up side by side
[01:51:19] as you can see there they're now side by
[01:51:21] side and now they're top and bottom from
[01:51:22] another depending on what my screen size
[01:51:24] is now the next one I want to work on is
[01:51:26] my text area so I'm just going to copy
[01:51:28] down this entire form field make sure we
[01:51:31] get our screen a little bit easier to
[01:51:32] work
[01:51:33] with there we go minimize this div down
[01:51:37] and right below it is going to be my
[01:51:38] description so this is going to be a
[01:51:40] description this right here is going to
[01:51:43] say product description and then finally
[01:51:47] I'll add in a little bit of description
[01:51:49] to tell people what this description
[01:51:50] does there we go make sure I close this
[01:51:54] off so looks like I need to do that down
[01:51:56] there close that off there that off
[01:51:59] there there we go so now I have that
[01:52:01] optional description and instead of an
[01:52:03] input here I want this to be a text area
[01:52:06] which again I need to import manually
[01:52:08] because it's not Auto importing so get
[01:52:10] our text area from at/ components slui
[01:52:14] text area there we go make sure I spell
[01:52:17] area properly scroll down and now we
[01:52:18] have our text area showing up and I'm
[01:52:20] just going to add a few classes to it so
[01:52:21] we'll say min height of 20 and I'm going
[01:52:24] to say resize none so it's impossible to
[01:52:26] resize and now I have my description
[01:52:28] showing up finally I can add in a
[01:52:30] section here which is a class name of
[01:52:32] self
[01:52:34] end and this is just going to be where I
[01:52:36] put my button so button just like that
[01:52:39] make sure I import button I'm going to
[01:52:42] say that it's going to be disabled
[01:52:43] whenever my form is submitted so form.
[01:52:45] form state. is submitting whoops is
[01:52:49] submitting there we go and the is
[01:52:54] submit and here I'll just sit save so
[01:52:57] now at the bottom of my form I have a
[01:52:58] save button and when I click on that
[01:53:00] it's going to try to save my form and
[01:53:01] you can see I automatically get the
[01:53:02] errors because these things are
[01:53:03] technically required now before I go
[01:53:05] about fixing all my validation errors
[01:53:06] and making it so we can save things I do
[01:53:08] want to mention one particular thing to
[01:53:09] you if I inspect my page I'll just do a
[01:53:11] refresh here and I go ahead and I start
[01:53:12] typing information into this product
[01:53:15] name you notice I get a huge error and
[01:53:17] that's because this is going from a
[01:53:18] essentially controlled to uncontrolled
[01:53:20] then back and forth from the component
[01:53:22] so essentially what I need to do is I
[01:53:23] need to make sure I give it a default
[01:53:24] value of a string so here my default
[01:53:27] values I need to have an object where
[01:53:29] the name is a string the URL is a string
[01:53:33] and my description is a string that way
[01:53:36] when I go ahead and I start changing my
[01:53:37] inputs I won't get that error you can
[01:53:39] see now by inspect go back to my console
[01:53:43] close out of all the errors I type in
[01:53:44] here you notice I get no more errors
[01:53:46] showing up on my page so now we go ahead
[01:53:47] and actually make this onsubmit work and
[01:53:49] to do that we're going to be using an
[01:53:51] action so what I can do is I can open up
[01:53:52] my folder here inside of my server
[01:53:55] folder I want to create a brand new
[01:53:56] folder called actions and inside this
[01:53:58] actions folder I'm going to create a
[01:53:59] file called products and actions are
[01:54:02] just ways to actually call code from the
[01:54:04] client on the server safely and securely
[01:54:06] so I'm going to say use server to say
[01:54:08] that this is actions inside of here
[01:54:10] export an async function called create
[01:54:13] product and this create product function
[01:54:15] is going to take in some unsafe data
[01:54:17] that's because you can never trust
[01:54:18] anything that comes in from the client
[01:54:20] and this unsafe data is going to be typ
[01:54:22] based on that schema that I used on my
[01:54:24] client so I need to take that schema
[01:54:26] that's on my client and move it out into
[01:54:28] somewhere more accessible so I'll create
[01:54:29] a new folder called schemas let me
[01:54:31] rename that to schemas there we go and
[01:54:34] I'm going to create a new file called
[01:54:35] products. TSS directly inside there so
[01:54:38] now I can go ahead down onto my client
[01:54:41] which is in the app section right here I
[01:54:43] have that schema defined up here I'm
[01:54:45] just going to remove that I'm going to
[01:54:46] paste that directly into that brand new
[01:54:47] file that I just created I'm going to
[01:54:49] export that and make sure I import is OD
[01:54:52] now the final thing I'm going to do is
[01:54:53] I'm going to make sure that my URL does
[01:54:55] not have any trailing slashes on it
[01:54:57] because for example if I type in product
[01:54:59] slne slash at the very end and hit enter
[01:55:02] it brings me to the same page as if I
[01:55:03] didn't put that slash at the end of my
[01:55:04] URL so I'm going to do a transform here
[01:55:07] a transform is a function that gets
[01:55:08] called to transform your data after it's
[01:55:11] been validated I'm going to call a
[01:55:12] function called remove trailing slash
[01:55:15] just like that I'm going to create this
[01:55:17] function as like a utility function so
[01:55:18] if I go into my lib utils folder I can
[01:55:21] export a function called remove trailing
[01:55:23] slash it's going to take in a path which
[01:55:25] is a string and all it's going to do is
[01:55:27] I'm going to run a simple regular
[01:55:29] expression to remove the trailing slash
[01:55:30] so this regular expression says you see
[01:55:32] a slash symbol at the very end if
[01:55:34] there's a slash symbol at the end of it
[01:55:36] replace it with essentially an empty
[01:55:37] string super straightforward and simple
[01:55:40] so now if I go back into my schema and I
[01:55:42] import this function you can now see
[01:55:44] that essentially anytime that I call
[01:55:46] this function it's going to remove the
[01:55:47] trailing Slash from my URL so that way
[01:55:49] there's no confusion between a URL with
[01:55:51] or without that trailing slash that's
[01:55:53] going to make tracking My Views and so
[01:55:54] on so much easier so here's my create
[01:55:56] product function I need to get my
[01:55:59] z. infer from the type of and I want to
[01:56:03] get it from that product details schema
[01:56:05] so I call it product details schema just
[01:56:07] like that and now I have my unsafe data
[01:56:09] directly inside of here properly typed I
[01:56:11] just need to make sure I validate it
[01:56:13] also here I need to make sure I import
[01:56:15] that schema now that I moved it out of
[01:56:16] this particular file there we go that
[01:56:18] has been imported properly and let's go
[01:56:20] ahead and write my action so the very
[01:56:21] first thing I need to do in this action
[01:56:23] is to get my user ID for who's actually
[01:56:25] creating this so user ID is equal to
[01:56:28] awaiting calling that off function and
[01:56:30] again I don't need to await that I could
[01:56:31] just call the off function because it's
[01:56:33] going to happen in line then what I can
[01:56:35] do is I can get a success flag and a
[01:56:37] data flag and I can get that from
[01:56:39] calling product detail schema. safe
[01:56:41] parse and passing in my unsaved data
[01:56:44] this is just going to go through and
[01:56:45] validate that all the data that I'm
[01:56:47] getting in here matches everything
[01:56:49] inside of this schema if it doesn't then
[01:56:51] my success is false so we can go ahead
[01:56:52] and check that if we do not have any
[01:56:55] success or if our user ID for some
[01:56:57] reason is null which should not be
[01:57:00] possible but if it is then we're going
[01:57:01] to go ahead here and we're going to
[01:57:03] return down an error to the user so
[01:57:04] we'll say
[01:57:05] error true and we'll give him a message
[01:57:09] that just says there was an error
[01:57:12] creating your product super
[01:57:13] straightforward so that they know
[01:57:15] something went wrong because if we get
[01:57:16] to this point there should be no errors
[01:57:18] unless someone maliciously passed up
[01:57:20] some incorrect code or tried to access
[01:57:21] his page P without a user ID or so on
[01:57:24] then what we can do is we can create our
[01:57:26] product and we want to create that
[01:57:28] product inside of our database so we'll
[01:57:30] create a function called create product
[01:57:31] DB and that's going to be coming from
[01:57:33] that DB folder that we worked on so
[01:57:35] inside of here we have our git products
[01:57:37] now it's create a function called create
[01:57:40] product just like that so this is going
[01:57:43] to be a rather straightforward function
[01:57:44] again it's going to take in my data
[01:57:46] which is my type of product table. infer
[01:57:49] select or not infer select sorry infer
[01:57:52] insert there we go then we can call DB
[01:57:55] Dot and I want to call insert on my
[01:57:57] product table I want to insert specific
[01:58:00] values and that's just my data that I'm
[01:58:02] getting passed in super straightforward
[01:58:04] and easy to do and we can await the
[01:58:06] creation of that and I want to get the
[01:58:08] ID specifically from here so I going to
[01:58:10] say my new
[01:58:11] product is equal to this I want to make
[01:58:14] sure this is a sync so I can use a
[01:58:15] weight inside of it and I can pass along
[01:58:17] this returning flag and I can say I want
[01:58:19] to return an ID which is my product
[01:58:21] table. ID so now when I insert this data
[01:58:23] into the database it's going to return
[01:58:24] to me an array of all the new things
[01:58:26] inserted which in my case I insert one
[01:58:27] thing so there's one value in my array
[01:58:29] which is going to be my brand new
[01:58:31] product with an ID of a string so what I
[01:58:33] can do after that is I can do just a
[01:58:35] really simple try catch so I can come in
[01:58:37] here and I can create a brand new
[01:58:39] product customization so in my product
[01:58:42] customization
[01:58:44] table what I want to do is I want to
[01:58:46] insert some values and the only value I
[01:58:48] want to insert is the product ID which
[01:58:50] is equal to my new product
[01:58:53] ID there we go so I'm inserting a brand
[01:58:55] new thing inside of here and if for some
[01:58:57] reason I already have one just
[01:58:58] completely skip it so if there's a
[01:59:00] conflict do absolutely nothing and I
[01:59:02] want to specify what the target is going
[01:59:03] to
[01:59:04] be the target for this one is going to
[01:59:06] be product customization product ID
[01:59:09] there we go so if the product ID is
[01:59:11] conflict just completely ignore it and
[01:59:12] don't do anything then we can add in a
[01:59:14] catch because if for some reason there
[01:59:16] is an error trying to execute this
[01:59:18] particular thing well I want to delete
[01:59:19] my product because when I create a
[01:59:21] product I want to create both a product
[01:59:22] and a customization at the exact same
[01:59:24] time and if I have an error creating my
[01:59:27] customization I want to delete the
[01:59:28] product because that means there was a
[01:59:29] problem and I don't want to have one
[01:59:31] without the other so I can come in here
[01:59:33] db. delete and I want to delete my
[01:59:36] product table just like that where my
[01:59:39] product ID is equal to so
[01:59:43] product table. ID is equal to my new
[01:59:47] product. ID there we go so that's going
[01:59:50] to make sure that when I create a
[01:59:51] product it also hooks up a brand new
[01:59:53] customization for that otherwise if
[01:59:55] there's a problem it just returns and
[01:59:56] deletes that now the very last thing I
[01:59:58] want to do is return my new product back
[02:00:02] to the user that way where I'm using
[02:00:04] this inside of my actions so if I go
[02:00:06] back to my actions I can create that
[02:00:08] product from the DB so we'll say
[02:00:11] import create
[02:00:15] product and we're going to be importing
[02:00:16] that as create product DB from and
[02:00:21] that's coming from that DB folder so
[02:00:23] we're going to go into our server into
[02:00:25] our database folder inside the products
[02:00:27] folder so now I can call this and pass
[02:00:28] along all the information I want and
[02:00:30] it's going to return to me an ID for the
[02:00:32] brand new table that was created and I
[02:00:34] can do some type of redirecting for
[02:00:36] example to a correct location so let's
[02:00:38] go ahead and get the create working I
[02:00:39] want to pass along all my data as well
[02:00:41] as my clerk user ID that's all the data
[02:00:43] to create this and then to redirect I'm
[02:00:45] going to go to the slash
[02:00:47] dashboard SL products page but I
[02:00:50] actually want to bring them to the edit
[02:00:52] page so I'm going to say ID sledit and I
[02:00:55] specifically want to bring them to the
[02:00:56] tab for editing the countries and that's
[02:00:58] because on this parody deals website if
[02:01:00] I were to go to one of these and I were
[02:01:02] to click edit you can see if I actually
[02:01:04] make it so you can see because it's not
[02:01:05] mobile responsive there's a bunch of
[02:01:07] different tabs and I want to just bring
[02:01:08] them to the tab for editing the actual
[02:01:10] countries associated with that
[02:01:11] particular table so we can go ahead and
[02:01:13] we can make sure we redirect them to
[02:01:15] that specific tab using our ID right
[02:01:17] here and we need to make sure we await
[02:01:19] this because this is a promise and that
[02:01:21] should be all the code we need to do to
[02:01:22] be able to create a brand new product
[02:01:23] and again you'll notice there's no
[02:01:25] database code in this file at all
[02:01:27] everything for our database is inside of
[02:01:29] the specific folder for database as you
[02:01:31] can see only this file has anything
[02:01:33] related to our database code at all so
[02:01:35] now let's go into that particular form
[02:01:36] and make sure we hook everything up we
[02:01:38] need to call that
[02:01:40] create product function I want to make
[02:01:42] sure I call my action right here I want
[02:01:44] to pass along all of my different values
[02:01:46] so I can come in here and I can say
[02:01:48] const data equals await calling that
[02:01:51] particular thing make sure that this is
[02:01:52] an asynchronous function and then if our
[02:01:56] data. message is there then we want to
[02:02:00] render out that particular message and
[02:02:01] first of all we want to check to see if
[02:02:03] there's an error so if our data has an
[02:02:04] error and if we have a message data.
[02:02:08] message then we want to render that
[02:02:10] message to the user using a toast toast
[02:02:12] so we can say const toast equals use
[02:02:15] toast that's going to be coming from
[02:02:16] Shad Cen and to make sure our toast
[02:02:18] actually work properly inside of our
[02:02:20] overall layout for our entire
[02:02:22] application all we need to do inside of
[02:02:24] here somewhere is render out this
[02:02:26] toaster and that's just going to be a
[02:02:27] location for rendering out all of our
[02:02:29] different toast doesn't matter where you
[02:02:30] put it as long as it's in your
[02:02:31] application somewhere so now we can come
[02:02:34] and we can call that toast function just
[02:02:36] like that we can pass it along the title
[02:02:38] for what this is going to say so
[02:02:39] actually I don't even need to check for
[02:02:40] error here I'm only going to check for
[02:02:42] message because I can check for my error
[02:02:43] here and render out a different title
[02:02:45] for example I can say either error or
[02:02:48] success depending on if it was an error
[02:02:49] or not my description is just going to
[02:02:51] be my data. message and then finally my
[02:02:54] variant is going to be either an error
[02:02:56] variant or not so if my data. error then
[02:02:59] it's going to be
[02:03:00] destructive otherwise we're going to
[02:03:02] have default as the variant so now this
[02:03:04] is going to render out essentially a
[02:03:05] toast which is either going to be an
[02:03:07] error toast or success toast depending
[02:03:09] on if things worked or not now I do want
[02:03:10] to fix one particular problem with the
[02:03:12] code it's a nextjs problem you'll notice
[02:03:14] here that I could technically return
[02:03:16] nothing for example if I redirect the
[02:03:18] user I don't actually return any data so
[02:03:20] I could have this being null but you'll
[02:03:23] notice when I look at the actual form
[02:03:25] and I look at my data type you can see
[02:03:26] this is not ever null so there's a
[02:03:28] problem with the return type so I need
[02:03:30] to manually give myself a return type on
[02:03:32] this it's going to return a promise the
[02:03:34] promise is going to have an error which
[02:03:36] is a Boolean and a message which is a
[02:03:38] string or it's going to return null from
[02:03:41] that promise or undefined sorry so it's
[02:03:42] going to return undefined just like that
[02:03:45] so it's going to return one of these two
[02:03:46] different things now you can see here
[02:03:48] data could be undefined so I need to
[02:03:50] make sure I check that it could be to
[02:03:52] find before I run the rest of my code so
[02:03:53] let's go ahead and see if all this code
[02:03:55] that we wrote actually works we're going
[02:03:56] to come over to this page and we'll
[02:03:58] create a brand new product this is going
[02:03:59] to be test name we're going to enter a
[02:04:01] URL we'll just say Local Host 5500 and
[02:04:06] we'll just give it some bogus
[02:04:07] description if I click save you'll see
[02:04:09] that it looks like it's saving and it
[02:04:11] redirected me correctly to the edit page
[02:04:13] so if I go back to my dashboard we
[02:04:15] should hopefully see that it no longer
[02:04:17] renders out no products because we now
[02:04:19] have a product in our database if I go
[02:04:21] to Neon and I click on my products you
[02:04:23] can see there's a brand new product in
[02:04:24] the database with that test name so
[02:04:26] everything was hooked up properly which
[02:04:27] is amazing so now we can go ahead and
[02:04:29] actually render out a grid of products
[02:04:31] on our dashboard so let's go ahead back
[02:04:33] over to our page for our dashboard and
[02:04:35] instead of rendering out null we're
[02:04:36] going to render out a bunch of
[02:04:37] information so the very first thing that
[02:04:39] I want to render out is an H2 that is
[02:04:41] going to have all the information for
[02:04:42] our products so it's going to say like
[02:04:44] products for example but I want to
[02:04:45] actually put this inside of a link so
[02:04:47] we'll give it a link here real quick our
[02:04:50] href is going to bring us to the
[02:04:52] dashboard SL products page and that's
[02:04:55] because on this dashboard I'm going to
[02:04:56] render out things like analytics
[02:04:58] products and so on so I want to be able
[02:04:59] to have a link that lets me go between
[02:05:01] these different things so I can put my
[02:05:02] products directly inside of there and
[02:05:05] I'm going to add an arrow right
[02:05:08] icon just like that close that off and
[02:05:11] I'm going to give this a class name of
[02:05:16] transition transform and that's cuz I'm
[02:05:18] going to do some fancy animations on
[02:05:19] that by making it so that anytime I
[02:05:21] hover over this particular link I'm
[02:05:23] going to animate it so for the link I'm
[02:05:24] going to give it a class name of group
[02:05:27] just like that and here I can say group
[02:05:31] hover I want to translate this in the X
[02:05:33] Direction by just a little bit so it's
[02:05:34] going to make the arrow move just
[02:05:35] slightly to the right when I hover and
[02:05:37] these small little touches are really
[02:05:38] what bring your application from eh to
[02:05:40] really impressive to users so now let's
[02:05:42] finish off the rest of the classes on
[02:05:44] our link for example I want to have a
[02:05:45] flex and a gap of two on my items to be
[02:05:48] in the center and when I hover over it I
[02:05:50] want to give it the underline treatment
[02:05:52] so that they know that this is a
[02:05:53] particular link now we should go ahead
[02:05:55] and give that a quick save and we can
[02:05:56] see we got our products text showing up
[02:05:58] and when I hover you can see the arrow
[02:05:59] moves off to the right which is just a
[02:06:01] really nice little flavor right there
[02:06:03] now to style my H2 to make it look a
[02:06:04] little better let's come in here and
[02:06:06] make the text quite a bit larger margin
[02:06:08] on the bottom of six text 3XL we'll make
[02:06:11] the font that semi bold font we'll also
[02:06:13] use some flex and we'll justify some
[02:06:15] space between all of our different
[02:06:16] elements there we go and that's because
[02:06:18] for this product section I'm also going
[02:06:20] to add a button for creating a brand
[02:06:21] product right here so we'll create a
[02:06:24] button this is going to be an as child
[02:06:28] button just like that and inside of this
[02:06:31] button I'm going to have a link with an
[02:06:33] HF that goes to the new product page so
[02:06:35] dashboard SL products new just like that
[02:06:40] new product and let's even add in a
[02:06:42] little plus icon into it as
[02:06:45] well there we go plus
[02:06:47] icon let's say the size is four margin
[02:06:50] on the right of two
[02:06:52] and close that off give that a quick
[02:06:54] save make sure I import my button
[02:06:56] component and now we should hopefully
[02:06:58] see we have our new product button so
[02:07:00] now we have the ability to actually go
[02:07:01] to the products page which we haven't
[02:07:03] created yet we have the ability to
[02:07:04] create a new product directly from the
[02:07:05] dashboard and we have this nice little
[02:07:07] hover animation over this products link
[02:07:09] let's go ahead and make it so that we
[02:07:11] can render out all of our products we're
[02:07:12] going to do that inside of a products
[02:07:14] grid component so we'll say product grid
[02:07:17] and we're going to pass in all of our
[02:07:19] products just like that and the reason
[02:07:22] I'm making my own component for this is
[02:07:23] cu I'm probably going to use this exact
[02:07:24] same grid on my products page and on my
[02:07:26] dashboard so it just makes things easier
[02:07:28] for me to work with so we're going to
[02:07:30] come in here we have our product grid
[02:07:32] I'm going to go back over to my
[02:07:33] component section this is used only on
[02:07:35] our private pages so we'll create our
[02:07:38] product grid just like that in here
[02:07:41] export function product grid there we go
[02:07:44] and to be able to get the type for this
[02:07:45] I'm just going to copy over the type
[02:07:47] because it's a little bit easier than
[02:07:48] making you watch me type it you can see
[02:07:50] it's an array of products with name URL
[02:07:52] description and ID relatively
[02:07:54] straightforward stuff we are probably
[02:07:55] already familiar with this because
[02:07:56] that's what our product structure looks
[02:07:57] like now inside of here we can return a
[02:08:01] div with a class name of grid because we
[02:08:03] want it to be a grid by default we're
[02:08:05] going to have one column for our grid
[02:08:07] we're going to move up to two columns
[02:08:09] when we have a larger screen size so
[02:08:11] grid calls two and then when we have an
[02:08:13] even larger screen size we'll move up to
[02:08:15] three specific columns and then I want
[02:08:17] to give a gap of four between all of my
[02:08:19] columns before I Loop through each one
[02:08:21] of my products and I render out the
[02:08:23] product card so for the product make
[02:08:26] sure I spell that properly I want to
[02:08:28] render out a product card just like this
[02:08:30] which takes in a key which is my
[02:08:32] product. ID and it takes in all the
[02:08:36] information for my product so now I can
[02:08:38] create this component which is pretty
[02:08:39] similar to this component up here so
[02:08:41] product card just like that it's going
[02:08:44] to take in all of my product information
[02:08:47] which is just this right here so it's
[02:08:49] going to be
[02:08:51] whoops ID name URL
[02:08:56] description just like that and there we
[02:08:59] go that should be all the typing I need
[02:09:01] for that and now in here I can return my
[02:09:03] card so let's create a card just like
[02:09:06] that import that properly we're going to
[02:09:08] have our card
[02:09:11] header and inside of our card header I'm
[02:09:13] going to have a card title and this is
[02:09:16] just going to be essentially the link
[02:09:17] that goes to my particular product to
[02:09:19] edit it so let's go into the here card
[02:09:22] title has a link with an href that goes
[02:09:26] to that edit page so that's SL dashboard
[02:09:29] SL products SL whatever my ID is
[02:09:33] sledit there we go and that's where I'm
[02:09:35] going to put my product
[02:09:37] name directly inside that link now let's
[02:09:40] make sure I get these imported properly
[02:09:41] so we get rid of all those errors there
[02:09:43] we go we have our title showing up give
[02:09:45] that a quick save refresh over here and
[02:09:47] make sure that I import my product grid
[02:09:49] properly we should now see we have a
[02:09:51] card with that test name inside of it so
[02:09:53] that looks really good and on larger
[02:09:54] screen sizes you can see we have it
[02:09:56] showing up inside of a grid specific
[02:09:58] layout so now let's go back into that
[02:10:00] product grid and modify what our product
[02:10:02] looks like so below my title here I'm
[02:10:04] going to have a
[02:10:06] description just like that and this is
[02:10:08] just going to be whatever the URL of
[02:10:09] that product is just like that and then
[02:10:11] below my header I'm going to have card
[02:10:14] content and this is going to be where I
[02:10:16] put the description of my card just like
[02:10:18] that there we go that's showing up
[02:10:20] perfectly and I only want to show that
[02:10:21] if I actually have a description so
[02:10:23] we'll save
[02:10:25] description
[02:10:27] description then we'll render out that
[02:10:29] card content there we go so now if we
[02:10:31] don't have a description for this
[02:10:33] particular product for example if I
[02:10:34] create a brand new product and I don't
[02:10:36] give a
[02:10:38] description there we go give it a save
[02:10:41] and make sure we navigate back to our
[02:10:43] dashboard since this page doesn't exist
[02:10:45] yet you'll see it doesn't render out
[02:10:46] that section for the description now I
[02:10:48] also want to add a button here that
[02:10:49] allows us to create a drop down menu for
[02:10:51] things like edit and so on so if I go
[02:10:53] back to here make this so you can see
[02:10:55] you can see I have this little button
[02:10:56] which means like edit and so on so I
[02:10:57] want to be able to create a button that
[02:10:59] allows me to do that as well so that is
[02:11:01] going to require some more Shad scan
[02:11:03] components so the components that we're
[02:11:04] going to need in this case are the
[02:11:06] dialogue component the alert dialogue
[02:11:09] component and then finally we need the
[02:11:11] drop- down component so let's just click
[02:11:13] enter on that to install all those
[02:11:15] components and it looks like I probably
[02:11:16] spelled something wrong there's no drop
[02:11:18] down I believe it's called drop down
[02:11:20] menu that should hopefully fix the
[02:11:21] particular problems I'm running into
[02:11:22] there we go it looks like it's
[02:11:23] installing everything for us and once
[02:11:25] that's installed we can start to use
[02:11:26] those particular components I don't want
[02:11:28] to overwrite my button and there we go
[02:11:29] we now have our different components so
[02:11:31] first let's create the particular button
[02:11:33] that we need to have so we need to go
[02:11:35] inside of our card header and create a
[02:11:37] div to be able to space some things out
[02:11:38] cu I want to put my button on the far
[02:11:40] right so we're going to use flex with a
[02:11:41] gap of two justify between to give me
[02:11:44] that spacing and items on the end to
[02:11:46] make sure everything is pushed as far
[02:11:48] down as possible and this is going to go
[02:11:50] all the way onto the the other side of
[02:11:52] my header or my title sorry there we go
[02:11:54] so right before my description because I
[02:11:56] want it to be in line with my particular
[02:11:57] header then what I want to do is after
[02:11:59] my title I want to be able to render out
[02:12:01] that button so we'll say button variant
[02:12:04] for this one after I make sure I get the
[02:12:05] button imported is going to be my
[02:12:07] outline button and the class name for
[02:12:10] this is a size of eight with a padding
[02:12:12] of zero and inside that button I want it
[02:12:16] to be a DOT horizontal icon with a class
[02:12:19] name of size
[02:12:22] four and we also should probably put
[02:12:24] some screen reader text inside of there
[02:12:25] so this is just going to say div class
[02:12:28] name screen reader only and this is just
[02:12:30] going to say like action menu something
[02:12:33] like that just so that they know that
[02:12:34] this is something they click on and now
[02:12:36] we have that button on the right hand
[02:12:37] side that we can click on now the first
[02:12:38] thing I want to do is convert this over
[02:12:40] to a dropdown so to do that we need to
[02:12:41] put everything inside of the dropdown
[02:12:44] component there we go we got dropped
[02:12:46] down and it looks like it's not letting
[02:12:48] me import this information correctly so
[02:12:49] I have to manually add an port for that
[02:12:51] all the way up
[02:12:53] here drop down from that's going to be
[02:12:57] slash component SL UI
[02:13:02] dropdown and actually I think it is
[02:13:04] dropdown menu and I think it's actually
[02:13:07] with a hyphen there we go that should
[02:13:09] import it there we go it does import
[02:13:10] that drop- down component for us and it
[02:13:12] looks like it says that there is no
[02:13:14] component with that name let me make
[02:13:15] sure I got this right drop down menu is
[02:13:18] what it's called so let's come over here
[02:13:19] drop down menu
[02:13:22] and drop- down menu then inside that
[02:13:23] drop- down menu we need the dropdown
[02:13:26] menu trigger there we go and this
[02:13:29] trigger is just going to wrap our button
[02:13:30] whatever we want to have open our
[02:13:32] component so we can say as child to
[02:13:34] render that button out inside of our
[02:13:36] drop- down menu trigger and now when we
[02:13:38] click on this it'll open up a drop- down
[02:13:40] menu as soon as we create the content so
[02:13:43] drop down menu
[02:13:46] content inside this content which I want
[02:13:48] to give a specific size so we'll say w
[02:13:50] of 56 that's going to be constraining
[02:13:53] the size of what this menu can look
[02:13:55] like we're going to have a drop down
[02:13:58] menu item as child and we're just going
[02:14:01] to render out essentially a link that's
[02:14:03] what all these are going to be this
[02:14:04] one's going to be a link that allows us
[02:14:06] to go to editing this particular
[02:14:07] application so we already have our edit
[02:14:09] link somewhere else but we'll just
[02:14:11] retype it
[02:14:12] out dasboard SL products sledit actually
[02:14:17] we need the ID first so ID sledit
[02:14:22] close off this link and just make it say
[02:14:24] edit and let's make sure we import this
[02:14:26] drop down menu item give that a save and
[02:14:28] now you can see when we open this up it
[02:14:30] has that text of edit directly inside
[02:14:32] there and if we wanted it to be a little
[02:14:33] smaller we can actually get rid of this
[02:14:34] class name and I believe that'll just
[02:14:36] shrink it down to a little bit smaller
[02:14:37] size I think that looks a little better
[02:14:38] so we'll keep that class name off there
[02:14:40] now we'll copy down this drop- down menu
[02:14:42] item because we need another drop- down
[02:14:43] menu item and this one is not going to
[02:14:45] be a link this one's just going to say
[02:14:46] add to site we don't even need the as
[02:14:49] child cuz that's all that's going to do
[02:14:51] there we go we now have the add to site
[02:14:53] button as well and I'm going to copy
[02:14:54] this over one more time and this one is
[02:14:56] going to be for deleting so we'll say
[02:14:58] delete just like that so now over here I
[02:15:01] have this delete button as well I also
[02:15:03] want to separate my delete section so
[02:15:04] I'm going to use a drop- down menu
[02:15:07] separator all that's going to do is add
[02:15:09] a nice little line between this add to
[02:15:10] site and delete to make them a little
[02:15:11] bit more distinct from each other so you
[02:15:13] don't accidentally click delete if you
[02:15:14] don't really want to now to be able to
[02:15:16] make this add to site work when I click
[02:15:18] on it I want it to make a popup on my
[02:15:19] screen that shows me exactly what I want
[02:15:21] to do and same thing with delete I want
[02:15:22] to create a popup that says are you sure
[02:15:24] you want to delete this so to do the
[02:15:26] popup for the very first thing I need a
[02:15:27] dialogue so I can say dialogue just like
[02:15:30] this and wrap my entire menu in this
[02:15:32] dialogue then I need a dialogue trigger
[02:15:34] which is going to be this drop- down
[02:15:35] menu item so we can say dialog
[02:15:38] trigger just like this and wrap my
[02:15:41] entire thing in that and that is going
[02:15:42] to be as child and again this is not
[02:15:45] letting me Auto Import so I'm going to
[02:15:46] come all the way up here import dialogue
[02:15:51] from and that's at/ component UI
[02:15:54] dialog there we go now if we scroll down
[02:15:57] here we can import our dialogue trigger
[02:16:00] give that a quick save and now when I
[02:16:02] click on this it at least should render
[02:16:04] my dialogue as soon as I put some
[02:16:05] dialogue content inside it here so to do
[02:16:07] that directly outside my drop down menu
[02:16:09] content I can come into here and I can
[02:16:12] create a section for my dialogue content
[02:16:14] so it's like dialogue content just like
[02:16:16] this but I'm going to create a separate
[02:16:17] component for this which is going to be
[02:16:19] the add to site product
[02:16:22] model content I'm going to pass along
[02:16:25] the ID for the product that I want to
[02:16:27] actually do this for so this is a
[02:16:29] component that I need to create so in my
[02:16:31] component folder let's go ahead and
[02:16:32] we'll create that component.
[02:16:35] TSX export function with that name and
[02:16:39] this is actually going to be a client
[02:16:40] component because I'm going to have the
[02:16:42] option to actually copy things which
[02:16:44] requires me to deal with the clipboard
[02:16:46] which is a client only state now to get
[02:16:48] started I'm going to paste in just the
[02:16:49] basic starting board plate code for our
[02:16:52] dialogue I'm going to import all these
[02:16:53] things and then explain exactly what's
[02:16:55] going on inside of my code here let's
[02:16:58] get that one imported there we go get
[02:17:00] our description imported so really all
[02:17:02] I'm doing is creating my dialogue
[02:17:03] content that says start earning PPP
[02:17:05] sales and a description of exactly what
[02:17:07] this is going to do so now if I come
[02:17:09] over to my thing I'm also making it so
[02:17:10] that it's a much larger size dialogue as
[02:17:12] well with some large font so if I click
[02:17:14] add to site after I make sure that this
[02:17:17] is properly imported there we go you can
[02:17:20] now see start ear name PPP sales close
[02:17:22] that out click add to site and you can
[02:17:23] see it opens that up with all my
[02:17:25] information directly inside of there
[02:17:26] refresh the page you can see boom open
[02:17:28] that up now all I need to do is add the
[02:17:30] code to copy and so on so after my
[02:17:32] dialogue header what I want to do is I
[02:17:34] want to add a pre- tag directly inside
[02:17:36] of here is where I'm going to put all of
[02:17:37] my code for the content so in the pre-
[02:17:39] tag let's add some code and if I spell
[02:17:42] that properly there we go we can add the
[02:17:46] code that we want to do I'm just going
[02:17:47] to put this inside of code we're going
[02:17:48] to generate that code in a little bit
[02:17:50] let's come up to to here I'll paste in
[02:17:51] what that code should look like we give
[02:17:53] that a quick save all this code is doing
[02:17:55] is saying okay here's a script tag that
[02:17:57] points to our current URL SL API
[02:18:00] products whatever my product ID is and
[02:18:02] banner so it's really just a URL that
[02:18:04] points to an API endpoint and they're
[02:18:05] going to put that in their site and it's
[02:18:07] going to download some JavaScript for
[02:18:08] them when they put that on their site so
[02:18:10] let's come in here
[02:18:13] ID string there we go and we want to
[02:18:16] make sure we add these variables to our
[02:18:17] environment so this is going to be an
[02:18:18] environment which is from our client and
[02:18:20] we need this next public server URL
[02:18:22] again we have type safety on all this
[02:18:24] information which is really great so
[02:18:25] inside of that data folder in our EnV
[02:18:28] for our client we need to add along the
[02:18:30] information for our server URL which is
[02:18:33] z. string. URL and we need to put that
[02:18:37] down here as well which is going to be
[02:18:41] process. env. that there we go and then
[02:18:44] finally in our actual EnV files we can
[02:18:47] come into here we have our database we
[02:18:49] have our clerk this is just going to be
[02:18:51] other for example and this is just
[02:18:54] HTTP Local
[02:18:56] Host 3000 and when we deploy our site
[02:18:59] we'll obviously change this to something
[02:19:00] else so now in our example we can paste
[02:19:03] that down and keep the value in there
[02:19:04] because that's pretty much what we want
[02:19:05] so now if we go back to the file we were
[02:19:07] just working on let's open that up that
[02:19:09] is inside of our dashboard components
[02:19:11] and we have our add to site modal right
[02:19:13] here dialogue now our script is showing
[02:19:15] up and if I give that a quick save we
[02:19:16] can actually see what this looks like by
[02:19:18] adding to site you can see we just get
[02:19:20] this script tag it's not really styled
[02:19:21] right now so I'm going to go ahead and
[02:19:22] add some styles to this so we'll say
[02:19:25] class name margin bottom of four
[02:19:27] overflow in the x is going to be Auto so
[02:19:29] we get a scroll bar padding is going to
[02:19:31] be four background is going to be
[02:19:33] secondary it's going to be rounded the
[02:19:36] max width of this is going to be our
[02:19:38] screen extra large size so it doesn't
[02:19:40] get too big we're going to make this
[02:19:42] text on it in the foreground for the
[02:19:43] secondary so that's just going to put it
[02:19:45] inside of a box which we can scroll
[02:19:47] across which looks a lot better and as
[02:19:48] you can see this is just a link to a
[02:19:50] script that points back to our API so
[02:19:53] essentially they're going to take this
[02:19:54] code copy it paste it into their own
[02:19:56] application for example like this and
[02:19:58] then when their page loads it's going to
[02:19:59] call our API and we can load down the
[02:20:01] banner for them that's what this code is
[02:20:03] going to do now I want to create a
[02:20:05] button that allows them to copy this
[02:20:06] particular code so I'm going to come in
[02:20:08] here I'll copy this over so you don't
[02:20:09] have to watch me type it and I'll
[02:20:10] explain what's going on so first of all
[02:20:12] getting a button just like this super
[02:20:14] simple button the on click function
[02:20:16] we'll get to in just a little bit but
[02:20:17] inside of this button all we're doing is
[02:20:19] we have a get children function
[02:20:21] right here which is going to get the
[02:20:22] text inside of here and an icon that
[02:20:23] we're going to be rendering out to the
[02:20:24] user so all this is going to do I'll
[02:20:26] copy over these two functions so we can
[02:20:28] see them get children is just going to
[02:20:31] be taking in this copy state so whether
[02:20:33] when the idle State the copied State or
[02:20:34] the error State it's going to change my
[02:20:36] text so I have a copy button that when I
[02:20:38] click on it is going to say copy code
[02:20:40] and when I click on it it's going to say
[02:20:41] copied if it was successful or it's
[02:20:42] going to say error if there's an error
[02:20:44] same thing here I'm going to render out
[02:20:45] a different icon so I'm going to get
[02:20:47] this icon this icon and this icon from
[02:20:50] there now I want to be able to define
[02:20:52] the type for my copy state so we'll copy
[02:20:54] that over you can see my copy state is
[02:20:56] either idle copied or error and to be
[02:20:58] able to get that state we're going to be
[02:20:59] using a use state so copy State set copy
[02:21:03] state is equal to use state of the copy
[02:21:07] State
[02:21:08] type and by default we're in the idle
[02:21:11] state so let's import that from react
[02:21:13] there we go now we can scroll back down
[02:21:15] here and we can get our icon so we can
[02:21:17] just get that by calling a simple
[02:21:18] function right here getting our icon
[02:21:20] from our state and that's going to give
[02:21:22] us the correct icon we want to render
[02:21:23] and that's because we want to render a
[02:21:24] different icon if there's an error and
[02:21:26] so on finally we need to import this
[02:21:28] dialogue close just like that which is
[02:21:30] going to be a button for closing out of
[02:21:31] our dialogue and now when our on click
[02:21:33] to understand what's going on here is
[02:21:34] when they click this button I'm going to
[02:21:36] write the text to their clipboard so I'm
[02:21:37] going to copy the text for them set my
[02:21:39] state to copied if it was successful and
[02:21:41] after 2 seconds bring it back to the
[02:21:42] idle State same thing with an error
[02:21:44] after 2 seconds bring it back to normal
[02:21:46] so now you can see we have a copy close
[02:21:48] copy code Button as well as a close
[02:21:49] button close just close relatively
[02:21:51] straightforward when I click copy code
[02:21:52] you can see my text changes and so on
[02:21:54] and if I come over here and I click
[02:21:56] paste you can see it paste exactly what
[02:21:58] was copied in my clipboard so it's a lot
[02:22:00] of code to do this but most of the code
[02:22:01] is just with handling the state if I
[02:22:03] were to remove all the state code I
[02:22:04] could get rid of this code and all this
[02:22:06] code down here but the state is nice to
[02:22:08] be able to give people a visual feedback
[02:22:09] that everything was copied successfully
[02:22:11] and so on and now I have my modal and on
[02:22:13] different screen sizes you can see my
[02:22:14] Modo looks different so you can see it's
[02:22:16] perfectly responsive to all different
[02:22:17] screen sizes so now that we have our
[02:22:19] copy Modo all done and setup the final
[02:22:21] thing we have left for this grid view is
[02:22:23] just work on this delete button and make
[02:22:25] sure that's working as expected so we
[02:22:27] can come back to the page we were just
[02:22:28] on for our grid so there we go our
[02:22:30] product grid we can scroll down to this
[02:22:33] section where we have our dropdown and
[02:22:35] inside of our dropdown menu area between
[02:22:36] our dialogue and a dropdown we want to
[02:22:38] have our alert dialogue show up next so
[02:22:41] we're going to bring that in make sure
[02:22:42] we put that between the same two
[02:22:44] sections and we need to have an alert
[02:22:46] dialogue trigger just like we did before
[02:22:48] so here alert dialog log
[02:22:51] trigger close that off there we go make
[02:22:55] sure that this isn't as child so it's
[02:22:57] going to render properly and then we
[02:22:58] need to have the content so the content
[02:23:00] for this is going to be our delete
[02:23:04] product
[02:23:06] alert dialogue content just like that
[02:23:09] pass along the ID just like we were
[02:23:10] doing before and I'm actually going to
[02:23:12] move this add to site product model down
[02:23:14] into our dialogue just so our tree is a
[02:23:15] little bit cleaner so we have our alert
[02:23:17] dialogue with its content drop down menu
[02:23:19] with its content and our dialog with its
[02:23:21] content so now let's go ahead and make
[02:23:22] sure we import these things it's looking
[02:23:24] like I'm going to have to manually
[02:23:25] import these again so it we'll just come
[02:23:27] up here import alert
[02:23:31] from at SL components
[02:23:34] SL UI alert there we go and down here
[02:23:39] let's go ahead and make sure that these
[02:23:40] are getting imported as well actually
[02:23:42] it's called alert dialogue not alert so
[02:23:44] let me bring that up there we go and
[02:23:46] this is
[02:23:47] alert dialogue there we go that should
[02:23:49] clean up those Imports and now we just
[02:23:51] need to manually import these ones and
[02:23:54] we need to create the file for our alert
[02:23:55] dialogue content so let's come over to
[02:23:57] here create a brand new file.
[02:24:00] TSX there we go looks like I created it
[02:24:03] in the wrong place export function paste
[02:24:07] that in there and we know that this is
[02:24:09] taken in an
[02:24:12] ID and the ID is a
[02:24:17] string now the bulk of this is going to
[02:24:20] be very straightforward code so I'm just
[02:24:22] going to paste it down do all of our
[02:24:23] Imports and explain exactly what's going
[02:24:25] on here in just a second so let's get
[02:24:27] all of our Imports done get the footer
[02:24:30] and the cancel in there let's make sure
[02:24:32] we close out our footer and close out
[02:24:35] our dialogue content there we go so what
[02:24:37] I'm doing here is I'm rendering out the
[02:24:38] content I'm rendering out a header which
[02:24:40] just has a title are you sure and the
[02:24:42] description says hey you cannot undo
[02:24:43] this this will permanently delete your
[02:24:45] project or your product that makes sense
[02:24:46] we want to make sure people know that
[02:24:48] this is a permanent thing then the next
[02:24:50] thing I want to do is I want to render
[02:24:51] out the ability to actually confirm this
[02:24:53] so that's our alert dialogue action make
[02:24:56] sure I import that from the right
[02:24:57] location there we go this alert dialogue
[02:24:59] action is essentially just going to
[02:25:01] render out a button for us so we can set
[02:25:03] the button to be disabled in a certain
[02:25:05] State and that's going to be when our
[02:25:07] delete is pending and that's because all
[02:25:10] the way up here we're going to have an
[02:25:13] is
[02:25:14] delete pending and a start delete
[02:25:19] transition that's coming from the used
[02:25:21] transition hook this allows us to
[02:25:23] essentially call code from our client
[02:25:25] onto the server and get a nice loading
[02:25:26] State also I'm going to render out some
[02:25:28] error messages using a toast in case
[02:25:30] there was an error so we'll say use
[02:25:32] toast just like that there we go so now
[02:25:34] we have the ability to do a delete with
[02:25:36] something showing up we also want to
[02:25:38] have some text inside of here maybe
[02:25:39] delete and we also should probably put
[02:25:41] in an onclick event listener which is
[02:25:42] where the bulk of all of our code for
[02:25:44] this entire component is going to go so
[02:25:46] the very first thing inside of here I
[02:25:47] want to do is I want to call the start
[02:25:49] delete transition and while this code is
[02:25:51] running I'm going to get that nice
[02:25:52] little loading state so that's going to
[02:25:54] be an asynchronous function and inside
[02:25:56] of here all I want to do is delete my
[02:25:58] product so we can say data is equal to
[02:26:01] calling delete product and passing it
[02:26:03] along the ID that we want to delete so
[02:26:05] we need to create this as an action so
[02:26:07] we can come all the way back to where we
[02:26:08] have our server with our actions and
[02:26:10] inside of here I can export an async
[02:26:13] function called delete product just like
[02:26:15] that this is going to take in an ID
[02:26:19] which is a string
[02:26:21] and I can use that inside this function
[02:26:23] so the first thing I want to do inside
[02:26:24] of here is get my user id which is equal
[02:26:26] to calling that off function then if for
[02:26:29] some reason my user ID is equal to null
[02:26:31] I'm just going to return an error so we
[02:26:33] can say
[02:26:34] error is
[02:26:36] true and
[02:26:38] message there was an error deleting your
[02:26:43] product there we go then if there is no
[02:26:47] error at all map that inside of there
[02:26:49] just so it's a little bit cleaner and
[02:26:50] easier to work with so now if there is
[02:26:51] no error we want to delete this but
[02:26:53] again I don't want to call my database
[02:26:55] directly in here I want to call my
[02:26:56] function to delete things from the
[02:26:58] database so we'll say delete product
[02:27:00] call this from the database just like
[02:27:02] that I'm going to pass it along my ID
[02:27:04] and my user ID to make sure I only
[02:27:06] delete a product if the user is
[02:27:07] associated with it so now let's create
[02:27:09] that function inside of here export
[02:27:12] async function
[02:27:15] delete product that's going to take in
[02:27:17] an ID which is a string and it's going
[02:27:19] to take in a user ID which is a string
[02:27:21] as well and all I want to do is call
[02:27:24] await db.
[02:27:26] delete on my product table and I
[02:27:30] specifically want to do it where and so
[02:27:32] I want to do an and query the equality
[02:27:35] of my product table. ID is equal to my
[02:27:39] ID and the equality of my product table.
[02:27:43] clerk user ID is equal to my user ID so
[02:27:47] I only want to delete the product if
[02:27:49] they have access to and from here I can
[02:27:52] actually get some data back from this to
[02:27:54] get the number of rows that were deleted
[02:27:56] so I can say row count just like that
[02:27:59] and then I can say return row count is
[02:28:01] greater than zero this means that there
[02:28:03] was a successful delete so it's going to
[02:28:05] return true or false if it was
[02:28:06] successful in deleting so we can say
[02:28:09] const is success is equal to awaiting
[02:28:12] calling that function and I need to make
[02:28:14] sure I import that from up here which is
[02:28:16] delete database or delete product as
[02:28:19] delete product product DB there we go
[02:28:22] and it looks like I didn't put these
[02:28:24] inside of an object so there we go
[02:28:26] there's my thing but actually I think
[02:28:28] what I'm going to do is I'm going to go
[02:28:29] into that function and redefine how I
[02:28:31] did this as an object because I find
[02:28:33] that generally objects are a little bit
[02:28:34] easier to work with when you need to
[02:28:35] pass things along to make sure you don't
[02:28:37] do it incorrectly so that's a string
[02:28:40] user ID is a string as well there we go
[02:28:44] that cleaned that up a little bit all
[02:28:45] the code is still working the fine as
[02:28:47] fine as it was before and now we can say
[02:28:50] if is
[02:28:51] Success then we can return actually we
[02:28:54] might as well just do this all in one
[02:28:55] line we'll just say return error is
[02:28:59] equal to is success and we'll also
[02:29:01] return a
[02:29:03] message and we'll come up here const
[02:29:07] error message is equal to just so I
[02:29:10] don't have to type this entire thing out
[02:29:12] twice there we go error message paste it
[02:29:15] into there so if my success then I want
[02:29:19] to render out one message otherwise I
[02:29:21] want to render out my error message so
[02:29:22] we'll just say
[02:29:25] successfully deleted your product there
[02:29:28] we
[02:29:30] go make sure I close everything off
[02:29:33] looks like it is all closed off but it
[02:29:34] looks like up here I have an extra
[02:29:36] quotation that's where my error is
[02:29:37] coming from so now I have this delete
[02:29:38] product function done now what I need to
[02:29:40] do is make sure I have everything just
[02:29:42] hooked up properly so this first of all
[02:29:44] I should probably import that works fine
[02:29:46] now what I can do is I can go into here
[02:29:48] make sure that my delete product is
[02:29:50] being imported make sure I get the
[02:29:51] action version properly and now I can
[02:29:53] say if data. ER actually I need to make
[02:29:56] sure I wait this first if data. message
[02:30:00] which it should always have but just in
[02:30:01] case it doesn't then I can render out a
[02:30:03] toast message so up here I already got
[02:30:05] my toast so I can essentially do the
[02:30:08] same thing I Ed my toast last time so
[02:30:09] let's just search for where I used my
[02:30:11] toast last time to just copy over that
[02:30:14] code so here take that code and we're
[02:30:16] going to copy it into this section right
[02:30:18] here cuz the code is essentially exactly
[02:30:21] the same as what I had before now I'm
[02:30:23] going to get a toast message properly
[02:30:25] back and I need to make sure that this
[02:30:27] is a client
[02:30:28] component since I'm using client side
[02:30:30] code so now if I wanted to for example
[02:30:33] delete this one I can come in here click
[02:30:35] delete are you sure yep I'm sure I want
[02:30:37] to delete there's an error it looked
[02:30:39] like my error messages and all that was
[02:30:40] kind of messed up so let's go back and
[02:30:42] make sure everything is working properly
[02:30:44] inside my action you can see here if
[02:30:45] it's successful successfully deleted
[02:30:47] your project otherwise it's going to
[02:30:48] show my error message error should be
[02:30:50] the opposite of is Success so it should
[02:30:52] have actually deleted my product so if I
[02:30:54] refresh we can see the product is gone
[02:30:56] the reason why you didn't see anything
[02:30:58] change though is cu I didn't actually
[02:30:59] deal with caching and revalidating my
[02:31:01] page properly now you may think well
[02:31:03] that's easy to fix all you need to do is
[02:31:04] just put a revalidate path in there if I
[02:31:07] can actually spell properly revalidate
[02:31:09] path and we know that our path is the
[02:31:11] dashboard path and boom that would fix
[02:31:13] our problem but we also render this on
[02:31:16] the products page so now we need to add
[02:31:17] in the products path oh and you know
[02:31:19] what we also have to do with the edit
[02:31:21] page as well so we need to put that in
[02:31:23] there and oh maybe it messes with our
[02:31:24] analytics or something else having to
[02:31:26] manually put every single path you need
[02:31:28] to revalidate is incredibly tedious and
[02:31:30] difficult to do so instead of doing our
[02:31:31] revalidations with our path here I'm
[02:31:33] going to be handling this using tags and
[02:31:35] I'm going to have a full robust system
[02:31:37] this is honestly the thing that I think
[02:31:38] is the best about this entire project is
[02:31:40] how we're going to be handling caching
[02:31:42] with tags and it's going to be really
[02:31:44] nice because everything's going to be
[02:31:45] handled in one place so we're going to
[02:31:46] have like a cash manager almost so
[02:31:49] inside of our live I'm going to create a
[02:31:50] brand new folder called C.T this is
[02:31:52] where all of our caching is going to
[02:31:54] take place and I'm essentially going to
[02:31:55] have three different tiers of caching
[02:31:58] the first tier is like a global cache so
[02:32:00] like for example the countries there's
[02:32:03] the same amount of countries for every
[02:32:04] user and if I change one country I want
[02:32:06] to refresh my entire cash for all of the
[02:32:09] countries the next tier is going to be a
[02:32:11] user tier for example when a user
[02:32:13] creates a product I don't want to
[02:32:14] refresh the cash for all the products I
[02:32:16] only want to refresh the cash for that
[02:32:18] user's products and then finally there's
[02:32:21] the instance where I have an individual
[02:32:23] product for example if I delete this one
[02:32:25] product I only want to update the cache
[02:32:27] for that one product I don't want to
[02:32:29] update the cache for literally everybody
[02:32:30] in our entire application so that's how
[02:32:33] I want to make sure I handle my caching
[02:32:34] so I'm going to have a few different
[02:32:35] functions inside of here I'm going to
[02:32:37] have a get Global tag function which is
[02:32:40] going to be how I get a tag for a global
[02:32:42] cache I'm going to do the exact same
[02:32:44] thing then for a user tag so this is for
[02:32:47] user level caching and then I'm going to
[02:32:49] have a final tag tag here for ID level
[02:32:51] caching so I have my three levels of
[02:32:52] caching I have something that's at the
[02:32:54] global level the user level and the ID
[02:32:56] level and to determine what I'm caching
[02:32:57] it's going to be based pretty much on my
[02:32:59] database so I'm going to export a
[02:33:01] constant called the cach tags and that's
[02:33:04] going to be an as const so I make sure
[02:33:05] that this is never changing and inside
[02:33:07] of here I'm going to say for example my
[02:33:09] products is going to be a string called
[02:33:11] products so now I have the ability to
[02:33:12] cach anything with this product tag and
[02:33:14] I have the ability to do it globally
[02:33:16] with a user or with a particular ID so
[02:33:19] here all I want to do when I cach
[02:33:20] something globally is pass along a tag
[02:33:22] which is a key of the type of cache tags
[02:33:28] there we go so now this tag is either
[02:33:31] going to be products or whatever else I
[02:33:32] pass in here for example if I have the
[02:33:34] ability to do product views this would
[02:33:38] have
[02:33:40] product views and now you can see that I
[02:33:42] have two options that this can be so to
[02:33:44] get a global tag I'm just going to
[02:33:46] return the text Global followed by a
[02:33:48] colon followed by whatever my tag is so
[02:33:50] it's going to be cach tags of my tag and
[02:33:53] again I want this to be a constant
[02:33:55] variable so I know that this is going to
[02:33:56] return to me a string that is always
[02:33:57] either Global products or Global product
[02:33:59] views now for my user tag it's going to
[02:34:02] be very similar this is going to take in
[02:34:03] a user ID which is a string and it's
[02:34:06] also going to tag in this particular tag
[02:34:08] just like that so now here I want to
[02:34:11] pass in my user followed by my user ID
[02:34:15] followed by hyphen to distinguish that
[02:34:16] and this is as const so now you can see
[02:34:18] here it's always going to be user colon
[02:34:20] whatever the ID is- products or product
[02:34:22] views now the final thing I want to do
[02:34:24] is the same thing for the ID but instead
[02:34:26] of saying user this is going to say ID
[02:34:28] and this is going to have an ID here and
[02:34:30] I'm pretty much going to copy over the
[02:34:31] exact same types so now we have our ID
[02:34:34] and again you can see when I overover
[02:34:35] this it's ID colon whatever the ID is
[02:34:37] products or product views so now I have
[02:34:39] three different granular levels of
[02:34:41] caching the final thing I want is a
[02:34:43] function just to clear my entire cache
[02:34:45] so we'll say export function clear full
[02:34:48] cache
[02:34:50] just like that and that's going to call
[02:34:52] revalidate tag and it's going to call it
[02:34:54] with this star symbol and this is
[02:34:56] something I'm going to put as a tag on
[02:34:57] every single thing that is cached to my
[02:34:59] application that way if I call this
[02:35:01] function I can clear the entirety of all
[02:35:02] of my cache across my entire application
[02:35:04] this is kind of useful for development
[02:35:06] or if you do something that really needs
[02:35:07] to just nuke the entire cache now the
[02:35:09] next thing I need to do to make sure I
[02:35:10] handle caching properly is to make sure
[02:35:12] that I only allow certain tags into my
[02:35:14] cache so I'm going to export a type
[02:35:17] called valid tags and this is going to
[02:35:20] be equal to the return
[02:35:23] type of my git whoops type of get Global
[02:35:29] tag just like that or it's going to be
[02:35:32] equal to the return type of my user tag
[02:35:34] so we can come in here with
[02:35:36] our user tag and the same exact thing
[02:35:39] for my ID tag so this valid tags is
[02:35:41] either going to be a global tag a user
[02:35:44] tag or an ID tag so now I know all the
[02:35:46] different types of tags I can use and I
[02:35:48] have the ability to create those tags
[02:35:50] now all I need to do is actually set up
[02:35:52] my caching cuz this just gives me the
[02:35:53] tags that allow me to revalidate and
[02:35:55] cache things now I need to make sure
[02:35:57] that I actually do this caching now in
[02:35:59] nextjs the way that you cache something
[02:36:01] let's go back to our database file we'll
[02:36:03] just do products for example and we have
[02:36:04] this git products function the way that
[02:36:06] you cache things inside of nextjs is you
[02:36:09] call the Cache function this is built
[02:36:11] into react and this allows you to Cache
[02:36:13] something for each individual request
[02:36:15] and you also have the unstable cache
[02:36:18] function in nextjs that allows you to
[02:36:20] cash things across multiple requests
[02:36:21] this is similar to how fetches are
[02:36:24] cached by default this allows you to
[02:36:25] cach things like database calls as well
[02:36:27] so we need to wrap all of our function
[02:36:29] calls in a cache and an unstable cache
[02:36:31] call and the nice thing is we pass in a
[02:36:33] function here it doesn't really matter
[02:36:34] what it is and then you have a second
[02:36:36] parameter where you can pass along all
[02:36:37] the different tags that you want to
[02:36:38] Cache but first of all we need the key
[02:36:40] Parts which we're going to put as
[02:36:41] undefined because that's just going to
[02:36:43] default them to whatever they should be
[02:36:45] and then we're going to come in here and
[02:36:47] we can say tags and this is where we put
[02:36:49] an array of all those different tags so
[02:36:50] for example I could say like
[02:36:52] Global and then products and this is
[02:36:55] going to tag things globally on the
[02:36:57] products table and so on so this allows
[02:36:59] me to do all my different tagging so
[02:37:01] what I want to do is I want to implement
[02:37:02] this in a helper function that makes it
[02:37:03] a lot easier and more type safe so let's
[02:37:05] get rid of all those Imports we don't
[02:37:06] need them anymore go back into our
[02:37:08] caching section I'm going to create a
[02:37:10] function which is going to be called DB
[02:37:14] cach and there we go this is going to
[02:37:16] take in some props and all I wanted to
[02:37:18] do is call the cach function from react
[02:37:20] I also wanted to call unstable cache
[02:37:24] that's going to be from nextjs and I
[02:37:26] want to pass it in whatever my function
[02:37:28] is now in our particular case I want to
[02:37:30] essentially just get the type of
[02:37:31] whatever unstable cache is and pass it
[02:37:33] along as my props so my props here or my
[02:37:36] arguments or whatever I want to call
[02:37:37] them we'll say args just like this is
[02:37:40] going to come directly from whatever the
[02:37:42] type of the unstable cache is so what I
[02:37:44] can do my first argument is going to be
[02:37:45] my call back function so that's
[02:37:47] parameters and I want to get the type of
[02:37:50] unstable cachee just like that and I
[02:37:52] want to get specifically the first
[02:37:54] property from there so that's going to
[02:37:55] give me my call back function so I can
[02:37:57] pass that in just like that and that's
[02:37:58] the first parameter passed along now I
[02:38:00] know for a fact I'm always going to pass
[02:38:02] along undefined as the key Parts the key
[02:38:05] Parts essentially determine how do we
[02:38:06] know what the ID of this cache is like
[02:38:09] if you have different parameters you
[02:38:10] pass along to a function it's
[02:38:12] automatically going to generate the key
[02:38:13] Parts based on the function name and the
[02:38:15] parameters you pass along so as long as
[02:38:17] you make sure that everything you pass
[02:38:18] along to your function and the name of
[02:38:20] the function is unique that's all you
[02:38:22] need to do for the key parts so leaving
[02:38:23] it undefined will work by default but if
[02:38:25] you need to add extra things to uniquely
[02:38:27] identify that function you can add them
[02:38:29] in here but for our case everything
[02:38:30] works with
[02:38:31] undefined now finally we have where
[02:38:34] we're going to get all of our different
[02:38:35] tags that we need to be implementing
[02:38:36] into this particular section so we can
[02:38:39] say tags like this and that's going to
[02:38:40] be our second parameter that we're going
[02:38:42] to pass to this particular function it's
[02:38:44] going to be an object with all of our
[02:38:45] different tags and by default we're
[02:38:47] going to set it to an empty array if we
[02:38:48] don't have any tags we want to add to
[02:38:50] this particular thing now for our
[02:38:51] particular use case we're always going
[02:38:53] to want to add tags even though these
[02:38:54] are optional so we're going to leave
[02:38:56] that on like this saying that it's not
[02:38:58] actually optional and for the type of
[02:39:00] this I'm going to say it's going to be
[02:39:01] tags and it must be one of those valid
[02:39:03] tag ideas that I've created up here this
[02:39:05] type right here for valid tags it must
[02:39:07] be one of those particular types to work
[02:39:09] so here we go we need to pass along a
[02:39:11] tag and it must be one of the valid tags
[02:39:13] that we have allowed this is how we
[02:39:14] actually have type save tagging we know
[02:39:16] it's now going to be one of these three
[02:39:18] different types of tags being added to
[02:39:19] this every time we do this caching now
[02:39:21] I'm going to add that star tag to every
[02:39:23] single thing I cache so I'm going to
[02:39:25] take all my normal tags and add in the
[02:39:27] star tag so now everything that I cach
[02:39:29] with this DB cache function is going to
[02:39:30] have that star tag on it so I can easily
[02:39:32] clear my entire cache just like that now
[02:39:34] this unfortunately I don't think will
[02:39:35] work quite out of the box like this I
[02:39:37] think we'll need to do a few little
[02:39:38] modifications we'll just come in here
[02:39:40] with a return type and try to use this
[02:39:41] DB cache so what we can do is we can go
[02:39:44] back into our database for our products
[02:39:46] we have our git products function and I
[02:39:48] want to wrap this inside of a cache well
[02:39:50] to do this first we're going to need to
[02:39:51] split this into two separate functions
[02:39:53] to make it a lot easier to work with so
[02:39:54] I'm going to create a function down here
[02:39:56] called get products internal and this
[02:39:59] git products internal function is just
[02:40:01] going to do everything my normal git
[02:40:02] products does it's just going to return
[02:40:03] all the information and it's going to
[02:40:05] take in the exact same props it's
[02:40:07] essentially the exact same function but
[02:40:08] the git products up here is what's going
[02:40:10] to do the caching for me so what I want
[02:40:12] to do is I want to get my cache function
[02:40:14] we'll set that equal to calling DB cache
[02:40:16] and what I want to do is pass it that
[02:40:18] name of git products inter internal so
[02:40:19] I'm just going to be calling that
[02:40:20] particular function right there and I
[02:40:22] obviously need to give it all the tags
[02:40:23] that I need now the way that I'm doing
[02:40:25] tagging is whenever you're tagging
[02:40:27] something that's getting information you
[02:40:29] always want to tag it as specific as
[02:40:32] possible so if it's getting something
[02:40:33] that's just an individual ID tag it as
[02:40:35] an ID if it's getting something based on
[02:40:37] a user ID which is what we're doing here
[02:40:39] tag it based on the user ID and if it's
[02:40:41] getting something globally with no user
[02:40:43] ID or normal ID then we tag it as a
[02:40:46] global so in our case for our tags here
[02:40:48] we want to give a user tag because we're
[02:40:50] doing this for a user ID and we know
[02:40:53] that we're doing this specifically for
[02:40:55] the products table so I'm going to say
[02:40:57] cach tags product so now we have our
[02:40:59] cache function and what I can do is I
[02:41:00] can return Calling that with my user ID
[02:41:03] and my limit just like that so the nice
[02:41:05] thing about how all of this works is
[02:41:07] when we do this caching with our key
[02:41:08] Parts this is going to be caching the
[02:41:10] user ID and limit so if we try to call
[02:41:12] this function with a limit of five or a
[02:41:14] different user ID it's going to be a
[02:41:16] different cache but if we call it with
[02:41:17] the same user ID and the same limit it's
[02:41:19] going to hit this cache and it's going
[02:41:20] to get the information from there now
[02:41:22] the reason I'm saying that I don't think
[02:41:24] that this will work as we expect is
[02:41:26] because right now the type that's being
[02:41:27] returned from here is promise of any and
[02:41:29] that's because this unstable cache is
[02:41:31] actually a generic so we need to convert
[02:41:33] ours to a generic as well which is a
[02:41:35] type T and this needs to extend whatever
[02:41:38] the type of call back is inside of here
[02:41:39] if we look at what the type of call back
[02:41:41] is it is this right here so we need to
[02:41:43] extend this specific type to make this
[02:41:45] the same thing so I'm going to put the
[02:41:47] extension right there for our specific
[02:41:49] type so T is extending that type and
[02:41:51] then we can just say everything for our
[02:41:53] parameters and for this function are
[02:41:55] using that type of T so now if I give
[02:41:57] that a quick save and we go back to that
[02:41:59] product section we should hopefully see
[02:42:02] here that now this Returns the correct
[02:42:03] type as you can see it's returning all
[02:42:05] of our type information so everything
[02:42:06] has been typed properly by setting up
[02:42:08] that generic so now every single time we
[02:42:10] get information from our database we
[02:42:12] first need to create the internal
[02:42:13] function that does the actual call for
[02:42:15] us and then this wrapper function all
[02:42:17] this does is make it so that we get
[02:42:19] proper tagging for example a user tag
[02:42:21] and so on and we just call the function
[02:42:22] and pass it on so this is really just
[02:42:24] saying hey get the information from the
[02:42:25] cache and return it to the user
[02:42:27] otherwise if it's not there call this
[02:42:28] particular function so now we're caching
[02:42:31] things as specific as possible again
[02:42:33] user tag ID tag or globally now we need
[02:42:35] to make sure we clear that cache every
[02:42:37] single time we make changes to these
[02:42:39] spec specific things so for example in
[02:42:41] this create product function after I'm
[02:42:43] done creating my product I need to do
[02:42:45] some revalidating of my tags down here
[02:42:47] so I would need to revalidate a tag for
[02:42:48] like
[02:42:49] my user with the specific user ID you
[02:42:52] know that I have inside of here I would
[02:42:54] also need to make sure that I do this
[02:42:56] for whenever I have a single ID I need
[02:42:58] to make sure I get the global one as
[02:43:00] well there's a lot of things I need to
[02:43:01] revalidate every time I make a change to
[02:43:02] something so I'm going to create a
[02:43:03] helper function that allows us to do
[02:43:05] that much easier so I'm going to go back
[02:43:07] into that cache create a brand new
[02:43:10] function and this one is called
[02:43:12] revalidate DB cache and all this is
[02:43:15] going to do is take in the tag it's
[02:43:17] going to take in a user ID and it's
[02:43:18] going to going to take in the ID and for
[02:43:20] typing of this information the tag is
[02:43:22] going to be required it's going to be
[02:43:23] that key of type of cache tags but my
[02:43:27] user id well this is going to be a
[02:43:29] string that's optional and my
[02:43:32] ID that's also going to be an optional
[02:43:35] string so now what I can do inside of
[02:43:37] here is I can make sure that I'm always
[02:43:39] revalidating my tag so I'm going to
[02:43:40] revalidate my tag and this is going to
[02:43:43] be for the get Global tag I'm going to
[02:43:45] pass it in my tag so there we go
[02:43:47] whenever I do this revalidate database
[02:43:49] cach it always revalidates my Global
[02:43:51] cache so if something requires all of my
[02:43:53] global data it's going to make sure that
[02:43:54] no matter what happens it's revalidated
[02:43:56] then if I have a user ID that's not
[02:44:00] null well then I want to revalidate a
[02:44:04] tag so we can say revalidate tag and
[02:44:06] this is going to get user tag for my
[02:44:07] user ID and my tag so now if the thing
[02:44:10] that I created for example is a new
[02:44:11] product for a specific User it's going
[02:44:13] to say hey anywhere that I'm caching
[02:44:15] information for a user and for products
[02:44:17] why don't you revalidate that as well
[02:44:19] which is really convenient because this
[02:44:21] get products function is something that
[02:44:23] specifically gets products for specific
[02:44:25] users so when I create a new product
[02:44:26] it's going to revalidate this as well so
[02:44:28] it's making sure that that updates the
[02:44:30] information that's why when we put a tag
[02:44:32] on our information that we were getting
[02:44:34] from our database we put the most
[02:44:35] specific tag possible and that way
[02:44:37] whenever we revalidate a cache we
[02:44:39] revalidate all of the different caches
[02:44:41] from the least to the most specific that
[02:44:43] way the things that need revalidated
[02:44:45] only get revalidated when they actually
[02:44:46] change now I can do the exact same thing
[02:44:49] here with my ID so I can come in here
[02:44:52] that would be ID and this is going to be
[02:44:54] an ID tag there we go now we have the
[02:44:56] ability to revalidate our database cache
[02:44:58] and we can just use this function
[02:44:59] anytime that we change our database we
[02:45:01] can call this function and it's going to
[02:45:02] be doing all the hard work for us so
[02:45:04] here I want to reval validate our
[02:45:06] database cache I want to get our tag
[02:45:08] make sure I import this function there
[02:45:10] we go and for the tag I want this to
[02:45:12] come from our cash tags. products I also
[02:45:15] want to specify a user ID and I want to
[02:45:18] specify ID that we can pass along as
[02:45:20] well so the way we can get that is just
[02:45:22] from here I'm already returning the ID
[02:45:24] let's just go ahead and return the clerk
[02:45:25] user ID which we'll just call user ID as
[02:45:28] product
[02:45:30] table. user ID there we go so now I can
[02:45:33] just say that I want to get my new
[02:45:35] product. ID and here I want to get my
[02:45:38] new
[02:45:39] product. ID and this one should be user
[02:45:41] ID so now this is going to revalidate
[02:45:44] all my cach information for me every
[02:45:46] time I create a product I can do the
[02:45:47] same thing down here and delete I want
[02:45:50] to just make sure that I revalidate my
[02:45:52] database cache and I want to get that
[02:45:54] new product so I'm going to do the same
[02:45:55] thing up here where I did a returning
[02:45:57] field down here I'm going to throw in a
[02:46:00] quick returning Actually I don't even
[02:46:01] need to throw in a returning because it
[02:46:02] already has the user ID up here so I'm
[02:46:04] get my user
[02:46:05] ID and my ID I'm already passing that
[02:46:07] information in so I don't even need to
[02:46:08] bother with the returning I can just
[02:46:10] revalidate my cache because I did a
[02:46:11] delete but again only if my row count is
[02:46:15] greater than zero so just like that I'll
[02:46:18] only recache if or revalidate my cach if
[02:46:20] things actually change so let's minimize
[02:46:22] that down minimize this down and we can
[02:46:25] minimize this down and we can kind of do
[02:46:26] a little bit of a high level overview of
[02:46:28] exactly what happened so whenever we do
[02:46:30] anything that modifies our database for
[02:46:31] example we delete something or recreate
[02:46:33] something what we do is we make sure we
[02:46:35] call revalidate database cache and we
[02:46:36] pass it along all the information we
[02:46:38] have so for example when we delete a
[02:46:40] product we know exactly what user that
[02:46:42] was for we know exactly what the idea of
[02:46:43] the product was and we know what thing
[02:46:45] we're tagging that as in our case it is
[02:46:47] a product so we're to revalidate all the
[02:46:50] different tags the individual ID the
[02:46:51] user ID and the actual tag for the
[02:46:54] overall Global products then whenever
[02:46:56] we're trying to get information if we're
[02:46:58] getting information for an individual
[02:46:59] user we're tagging that as a user if
[02:47:01] we're getting information based on a
[02:47:02] single ID we would tag that with the get
[02:47:05] ID tag and if we're getting information
[02:47:07] generally with no user or no ID we just
[02:47:09] tag that as a global tag then we
[02:47:12] guarantee that anytime that we're
[02:47:13] accessing information it's going to be
[02:47:15] the most up-to-date information and it's
[02:47:17] going to be cached if it hasn't changed
[02:47:19] recently this is the best way to deal
[02:47:20] with next jss cache that I found and the
[02:47:23] only other thing that we need to do this
[02:47:25] is just something that's currently a
[02:47:26] problem with nextjs 14 nextjs 15 fixes
[02:47:29] this is inside of our next config inside
[02:47:32] of our experimental we need to make sure
[02:47:34] that for our stale times on the dynamic
[02:47:37] pages is set to zero because we don't
[02:47:39] want any Dynamic pages to be cached
[02:47:41] unnecessarily because that's caching our
[02:47:43] Pages not our data everything we dealt
[02:47:45] with was caching our actual data and now
[02:47:47] this is actually going to make it so our
[02:47:49] caching Works flawlessly so let's go
[02:47:50] ahead and create a brand new product
[02:47:52] real quick so I can come in here type in
[02:47:54] some information doesn't really matter
[02:47:55] what any of this
[02:47:57] is there we go click save and you can
[02:48:00] see it's going to bring me to this page
[02:48:01] that doesn't exist but if I navigate
[02:48:03] over to my dashboard you can see that in
[02:48:05] just a second it's going to load and all
[02:48:07] my products are there if I then want to
[02:48:08] delete a product for example I delete
[02:48:10] this product click delete you can see it
[02:48:12] successfully deleted my cach was
[02:48:14] invalidated so it refetch my data for
[02:48:16] this particular page it all works
[02:48:17] flawlessly and the best thing about this
[02:48:19] system is it's so easy to use all you
[02:48:21] need to do is think okay am I creating
[02:48:23] something for example if we go down into
[02:48:25] our database for our products am I
[02:48:27] creating something if so revalidate my
[02:48:29] cach am I getting information if so get
[02:48:32] it based on whatever the most specific
[02:48:34] tag is possible and that's literally all
[02:48:36] you have to think about when you deal
[02:48:37] with this caching and everything else
[02:48:38] will work with for you flawlessly that's
[02:48:40] the thing that I am really proud of in
[02:48:41] this application I think is applicable
[02:48:43] to pretty much any application you can
[02:48:44] build and setting it up took a little
[02:48:46] bit of time but using it is incredibly
[02:48:48] easy now before we forget I want to make
[02:48:50] sure that inside of my database section
[02:48:52] for subscriptions we do the exact same
[02:48:53] thing here I want to revalidate my cach
[02:48:55] so revalidate DB cache and again what's
[02:48:58] the most specific information we can get
[02:49:00] well in our case we can get ID and user
[02:49:02] ID information from here so I just want
[02:49:04] to make sure I put in a returning into
[02:49:07] here make sure this is my
[02:49:09] data just like this and I should
[02:49:12] probably call this like new subscription
[02:49:14] or something like that there we go so
[02:49:15] we're getting our new subscription and
[02:49:17] the information I want to get is the ID
[02:49:19] which is my user whoops subscription ID
[02:49:23] and we want to get the user ID which is
[02:49:25] just user ID user subscription table.
[02:49:29] clerk user ID so now I can revalidate my
[02:49:31] cache I have my tag which I need to
[02:49:34] actually add to the particular thing
[02:49:36] because I don't have a tag for user
[02:49:37] subscriptions yet so all the way up here
[02:49:39] user subscriptions we'll just call it
[02:49:42] subscription is subscription there we go
[02:49:45] then down into here I can say tag is
[02:49:47] going to be cash tags whoops cach tags.
[02:49:52] subscription my ID is my new
[02:49:55] subscription. ID and then finally we
[02:49:58] have my user id which is new
[02:50:01] subscription. user
[02:50:03] ID now I do want to do a quick check if
[02:50:05] new subscription equals null then I
[02:50:07] don't want to do this so if it's not
[02:50:09] equal to
[02:50:11] null then we can run this code right
[02:50:13] here there we go now let's just make
[02:50:16] sure we throw in on a weight up here
[02:50:19] make this an async function and we can
[02:50:22] return our new subscription back to our
[02:50:24] user and then we can make sure I'll just
[02:50:27] search to make sure that we're not
[02:50:29] messing anything up where we used this
[02:50:30] so here we're just awaiting it we're not
[02:50:32] waiting for any information back that
[02:50:33] works fine lastly we need to make sure
[02:50:35] we do the same exact thing with our
[02:50:37] delete user to make sure we're doing all
[02:50:38] of our caching properly so this is going
[02:50:40] to give us essentially an array of data
[02:50:42] based on what we've deleted and so on so
[02:50:44] we already have the user ID I just need
[02:50:46] to get the ID of the things that we're
[02:50:47] deleting and we're deleting multiple
[02:50:49] different things so this is going to be
[02:50:50] by far the most complicated section
[02:50:52] we're dealing with so first of all in
[02:50:53] our returning section I'm going to just
[02:50:55] throw in a quick returning here and I
[02:50:56] want to return just the ID so we're
[02:50:58] going to say ID is user subscription
[02:51:00] table. ID same thing down here I'm going
[02:51:02] to do a returning on my
[02:51:04] products drop that in right there and
[02:51:06] this is product. ID there we go then
[02:51:10] what I want to do is I want to get all
[02:51:11] my information being returned back to me
[02:51:13] so we essentially have our rows for our
[02:51:15] user
[02:51:17] subscriptions and we have our products
[02:51:19] that are being returned back to
[02:51:21] us so let's come in here this user
[02:51:25] subscriptions requires us obviously to
[02:51:27] throw in a quick await here make this an
[02:51:29] async function there we go so now this
[02:51:33] user subscriptions is essentially an
[02:51:34] array we can Loop through each one there
[02:51:36] should only be one but we'll just Loop
[02:51:37] through them just in case and we'll come
[02:51:40] into here and for each one we're just
[02:51:41] going to revalidate our DB cache so
[02:51:44] revalidate DB cache the tag is going to
[02:51:48] be our cash keys or cach tags.
[02:51:51] subscription our ID is our
[02:51:54] subscription let me make sure I get this
[02:51:57] sub we'll just call it
[02:51:58] sub sub. ID user ID that is just our
[02:52:02] clerk user ID that we got from up there
[02:52:04] so we just Loop through all of our user
[02:52:06] subscriptions do the exact same thing
[02:52:08] for our products so for our products for
[02:52:11] each
[02:52:13] product we want to make sure this is
[02:52:15] revalidated our cash for our products
[02:52:17] there we go and this is is by far the
[02:52:19] most complicated of all the ones that
[02:52:20] we're dealing with finally we can return
[02:52:22] down our information if we really want
[02:52:24] so we can say user subscriptions and
[02:52:26] products just in case we want to use
[02:52:28] that information anywhere else and now
[02:52:30] that we have that set up setting up our
[02:52:32] future functions is going to be so much
[02:52:33] easier because we don't have to go back
[02:52:34] and reimplement everything but now we
[02:52:36] have a super bulletproof caching system
[02:52:38] implemented so we took a pretty long
[02:52:40] detour getting all this caching setup
[02:52:43] but now we can actually work on the edit
[02:52:44] page for our product so when we click
[02:52:46] here to edit a product now we can
[02:52:48] finally work on this page so the very
[02:52:50] first thing that we want to do is go
[02:52:51] into our application we want to go into
[02:52:53] our dashboard into our products we'll
[02:52:54] create a brand new folder this one is
[02:52:56] going to be for a product ID and then
[02:52:59] inside of there we obviously want to
[02:53:01] have our edit page just like that so
[02:53:04] export default
[02:53:07] function edit product page now this is
[02:53:11] going to take in two separate sets of
[02:53:12] parameters we have our prams which is
[02:53:14] our product ID as well as our search
[02:53:16] prams and that's because if you remember
[02:53:17] when we created a product we actually
[02:53:19] redirect them with the tab of country so
[02:53:21] we can go directly to the country page
[02:53:23] but by default we're going to bring them
[02:53:24] to the details page and this just allows
[02:53:26] us to choose what page they go to
[02:53:27] because we're going to have a tab based
[02:53:29] design now the next thing I want to do
[02:53:31] is I want to get my user ID and we can
[02:53:33] get that from
[02:53:35] off and again I'm going to get the
[02:53:38] redirect to sign in so if my user ID is
[02:53:43] null we can just redirect them to that
[02:53:45] signin
[02:53:47] page then finally I want to get my
[02:53:49] product and this is going to be calling
[02:53:51] await git product and we don't want to
[02:53:53] call git products we want to just get a
[02:53:55] product for an individual ID and for a
[02:53:58] user ID because we want to make sure
[02:54:00] that the user has access to this
[02:54:01] particular product so we'll come in here
[02:54:03] with an async function and we can create
[02:54:05] git product and this is where all that
[02:54:06] caching stuff is going to come in really
[02:54:08] handy so very first export function git
[02:54:11] product that takes in an ID which is a
[02:54:16] string and a user
[02:54:19] ID there we go make sure I actually type
[02:54:22] that
[02:54:23] properly so I can get rid of the type
[02:54:25] from here there we
[02:54:27] go and this function is essentially
[02:54:29] going to do the same thing as this
[02:54:30] function but just call a different
[02:54:32] function internally so we want to call
[02:54:33] the get product internal and we want to
[02:54:36] pass it along all these props right here
[02:54:37] so I'm just going to copy our props and
[02:54:39] we're going to paste them down now again
[02:54:41] when it comes to tagging you always want
[02:54:42] to do the most specific tag so in our
[02:54:44] case we want to get an ID tag because
[02:54:46] that's the most specific tag here that
[02:54:48] we can do and we're going to paste in
[02:54:49] the ID just like that now the query for
[02:54:52] that git product internal is going to be
[02:54:53] very simple I mean it's almost going to
[02:54:55] be exactly the same as this function so
[02:54:56] I might as well just copy this down get
[02:54:58] product internal is going to take in an
[02:55:01] ID and a user ID which is an ID that's a
[02:55:05] string and a user ID which is a string
[02:55:08] and then instead of finding many we want
[02:55:09] to find the first one and obviously
[02:55:12] don't pass in any limit or order by so
[02:55:14] we're just going to be getting the very
[02:55:15] first product that has both the ID and
[02:55:19] the clerk ID so equal product
[02:55:22] table. ID is equal to our ID and then
[02:55:26] make sure we import the and function
[02:55:28] from here there we go get all my
[02:55:30] parentheses closed off give that a quick
[02:55:32] save so now essentially where our clerk
[02:55:34] ID and our ID are equal let's call this
[02:55:39] ID column just like that here we go so
[02:55:43] when our ID and our clerk ID are equal
[02:55:45] we're going to be getting a particular
[02:55:46] product and we're returning that right
[02:55:48] here so now we have that set up you can
[02:55:49] see with the caching that was very easy
[02:55:51] to do and the nice thing is
[02:55:52] automatically it's going to be
[02:55:53] revalidated with all this other stuff
[02:55:55] we've already done we don't have to
[02:55:56] worry about now that we created a new
[02:55:57] page going back and changing all of our
[02:55:59] revalidations again it's all handled for
[02:56:01] us automatically so back to that edit
[02:56:03] page we can import this function there
[02:56:05] we go and it looks like that was
[02:56:07] correctly imported my user ID is string
[02:56:10] or null here if to make sure we return
[02:56:13] there we go that gets rid of that and we
[02:56:14] get a product right here being returned
[02:56:16] to us obviously this product could be to
[02:56:18] find though so our product equals null
[02:56:21] then we just want to return not found
[02:56:23] just like that let's make sure we import
[02:56:25] not
[02:56:27] found and now for our actual edit page
[02:56:29] to be able to return the information
[02:56:31] that we want I first want to make this a
[02:56:32] page with a back button just like we
[02:56:34] kind of had before so for this I want to
[02:56:36] have my back button hre equals SL
[02:56:39] dasboard SL products and then I also
[02:56:42] want to make it so my page title is
[02:56:45] equal to edit product
[02:56:49] then inside of here we're going to be
[02:56:51] using tabs now Tabs are something we
[02:56:52] need to import from Shad CN so come in
[02:56:55] here we want to add
[02:56:57] tabs give that a quick second to
[02:56:59] actually import everything for us there
[02:57:01] we go so now we should have our tabs be
[02:57:03] able to be imported directly for us and
[02:57:06] by default our default tab is going to
[02:57:09] be whatever our search pram tab is so
[02:57:11] search prams actually I think we just
[02:57:13] call tab just like that there we go now
[02:57:16] we're getting our default tab oops
[02:57:21] default
[02:57:23] tab actually it's default value there we
[02:57:25] go that's why it wasn't working now we
[02:57:27] can get into our tabs list make sure we
[02:57:30] import that from the right location I'm
[02:57:32] going to give this a class name of
[02:57:33] background and I'm going to do 60% op
[02:57:36] opacity just so it's going to look
[02:57:38] relatively good in place and now we can
[02:57:39] put each of our individual tabs in here
[02:57:41] which are tabs trigger so for each
[02:57:43] trigger we give it a value this is like
[02:57:45] the key so in our case details for
[02:57:47] example for the det Details page that's
[02:57:48] what our default is and then we give it
[02:57:50] a label of details now we can do this
[02:57:53] for all of them so we have
[02:57:54] country
[02:57:56] country and we have our
[02:58:00] customization and here
[02:58:03] customization give that a quick save and
[02:58:05] you can see we get our three different
[02:58:06] tabs and we can toggle between them and
[02:58:08] we can display different information for
[02:58:10] each of our individual tabs so after our
[02:58:12] list we're going to have to do tab
[02:58:14] content where it has a specific value
[02:58:16] for example details is going to be the
[02:58:17] value for this this one and let's just
[02:58:19] say it renders out details now we're
[02:58:21] just going to copy that down make sure I
[02:58:24] spell that all properly there we go copy
[02:58:26] that down we're going to do this one
[02:58:31] country and then this
[02:58:33] one customization so now you can see as
[02:58:36] we toggle between them we get different
[02:58:38] information being shown I just need to
[02:58:39] make sure I spell customization properly
[02:58:42] there we go and now you can see we get
[02:58:44] all of our different tabs showing our
[02:58:45] information now obviously I want to show
[02:58:47] much more complex information so I'm
[02:58:48] going to create essentially custom
[02:58:49] components so for this one we're going
[02:58:51] to have our details tab which is going
[02:58:53] to take in all the information for our
[02:58:55] product now I'm just going to put this
[02:58:57] component directly in line and it's very
[02:58:58] simple it's going to take in a product
[02:59:00] with all of our product information and
[02:59:01] render out a basic card so let's just
[02:59:03] import all the different things related
[02:59:06] to our card you can see that the card is
[02:59:08] honestly incredibly simple there we go
[02:59:10] we have extra large text product details
[02:59:12] and we're rendering out our product
[02:59:13] details form and we're passing along the
[02:59:15] product for our default value so let's
[02:59:17] make sure
[02:59:18] get this spelled properly details tab
[02:59:20] there we go and now I just need to make
[02:59:22] sure that this accepts all of our
[02:59:24] product details so let's go down to that
[02:59:26] form open it up and by default this is
[02:59:28] going to take in a product
[02:59:31] optionally and for the type of this we
[02:59:33] come over here we can just copy over
[02:59:35] essentially what the entire type is so
[02:59:37] I'll just paste all that in there there
[02:59:39] we go and I want to make sure that this
[02:59:40] is optional so I'm going to pass it in
[02:59:42] saying that this is optional that this
[02:59:43] comes in there and now we can use this
[02:59:45] for our default values so if we have a
[02:59:47] product then we're going to use our
[02:59:49] product otherwise we're going to use
[02:59:51] this as our default values so I can just
[02:59:52] use the double question mark symbol here
[02:59:54] and that's going to use by default our
[02:59:56] product for our default value otherwise
[02:59:58] it's going to use this information but
[03:00:00] our product needs to be slightly
[03:00:01] modified because the description here is
[03:00:03] string or n and this essentially
[03:00:05] determines it needs to be either string
[03:00:07] or undefined so what we can do here is
[03:00:10] take all of our product properties and
[03:00:12] change the description to be product.
[03:00:14] description or we can change it to be an
[03:00:17] empty string
[03:00:18] just like that there we go so now I need
[03:00:22] to essentially go back to how I had this
[03:00:24] before where I said product if we have a
[03:00:26] product then we render this out
[03:00:28] otherwise we render this out so by
[03:00:30] default we use our product if we have
[03:00:32] one otherwise we use essentially all the
[03:00:34] information that's defaulted to just a
[03:00:36] bunch of empty strings so this should
[03:00:38] hopefully fill in our default values if
[03:00:39] I refresh you can see it fills them out
[03:00:41] now we just need to make it so we
[03:00:42] actually update our product if we have
[03:00:43] one so here I'm going to get a variable
[03:00:46] called action and if product
[03:00:49] is equal to null then we're going to
[03:00:51] call out to create product whoops create
[03:00:54] product otherwise we're going to call
[03:00:56] update product I'm going to bind the ID
[03:00:59] of our product to that so we'll say null
[03:01:01] product. ID there we go and then down
[03:01:04] here where we call create product we can
[03:01:06] just call Action instead and all we need
[03:01:07] to do is implement this update product
[03:01:09] function so where we have create product
[03:01:11] we going to copy this paste it down I'm
[03:01:14] going to call this one update product
[03:01:17] and essentially do the exact same thing
[03:01:18] that I did in my create but instead of
[03:01:20] creating I'm obviously going to update
[03:01:21] so the really nice thing is most of our
[03:01:23] code stays the same this gets changed to
[03:01:25] update product DB so up here we're going
[03:01:27] to
[03:01:28] say
[03:01:29] update product as and paste that in
[03:01:32] we'll create that function in just a
[03:01:33] second there is an error updating your
[03:01:36] product and then instead of redirecting
[03:01:37] the user we're just going to send them
[03:01:38] down essentially a success error message
[03:01:40] so error is going to be false and then
[03:01:43] we're going to have a message that
[03:01:45] says product details updated there we go
[03:01:48] so now that they know it was updated and
[03:01:50] we don't even care about getting the ID
[03:01:51] back because all of our cach
[03:01:53] invalidation is going to take place in
[03:01:54] this update product DB function so now
[03:01:56] we just need to create that function so
[03:01:58] inside of here we can
[03:02:00] export a asynchronous function called
[03:02:04] update
[03:02:06] product there we go I'm going to put
[03:02:08] that in between these two and for this
[03:02:11] update product it's going to take in a
[03:02:12] few things first of all we're going to
[03:02:13] take in our data and this data is just
[03:02:15] going to be the same as our insert data
[03:02:17] but in instead of being a full thing
[03:02:19] it's actually going to be partial
[03:02:20] because we can update just one field we
[03:02:21] don't have to update all the fields then
[03:02:24] we're going to be passing in the ID as
[03:02:26] well as the user ID that we want to
[03:02:28] update this for so ID is a string and
[03:02:30] user ID is a string as well so this is
[03:02:33] essentially our data to update with and
[03:02:34] this is the wear clause for how we want
[03:02:36] to update this then we can just call
[03:02:38] this to update our database so I'm just
[03:02:40] going to copy this code over because
[03:02:41] it's rather straightforward db. update
[03:02:43] on our table we want to set our data to
[03:02:45] whatever we pass in here and we want to
[03:02:46] only do it where the product table clerk
[03:02:48] ID is equal to our user ID and ID is
[03:02:50] equal to our ID if that happens and
[03:02:53] we're able to successfully update things
[03:02:55] so we can get from here our row count so
[03:03:00] if row count is greater than
[03:03:04] zero well then that means that we had a
[03:03:06] successful update so I can come down
[03:03:09] here row
[03:03:11] count greater than zero and then I can
[03:03:14] just revalidate our DB cache and I want
[03:03:16] to do it over my tag is my cach tags.
[03:03:21] product I want to do it here where my
[03:03:24] user ID and my ID are based on what I
[03:03:26] pass in this should say products and
[03:03:28] there we go that'll revalidate all of
[03:03:29] our cach in information for us and we
[03:03:31] return true or false whether or not it
[03:03:33] successfully updated everything so now
[03:03:35] we can save this cache file because
[03:03:37] looks like I forgot to save it for some
[03:03:38] reason now into our actions though
[03:03:40] that's where we really want to be come
[03:03:42] to here oops there we go this update DB
[03:03:47] is going to take in the information we
[03:03:49] want to update so in our case it's just
[03:03:51] our data and then we're going to pass
[03:03:53] along our ID which is going to come in
[03:03:55] here and our user ID just like that and
[03:03:58] to be able to get our ID information we
[03:04:00] need to make sure that we pass that in
[03:04:02] with our update product so we're going
[03:04:03] to say ID is a string is a very first
[03:04:06] parameter that way we know which product
[03:04:07] we want to update then we're just going
[03:04:09] to say is success is equal to that we
[03:04:12] can come up here error message is equal
[03:04:15] to again just so I don't have to type
[03:04:17] this out multiple
[03:04:18] times there we go
[03:04:21] error message and then we can say our
[03:04:24] success right here opposite of that
[03:04:26] obviously error is the opposite of if we
[03:04:27] have a success and then we can say is
[03:04:31] Success then we want to render out that
[03:04:32] it was successful otherwise our error
[03:04:35] message there we go that's all we need
[03:04:36] to do for the entire update product
[03:04:38] function now what we can do is we can go
[03:04:40] and make sure all of our code is working
[03:04:42] so inside of our components product
[03:04:43] details we need to make sure that we
[03:04:45] import this function so get it from the
[03:04:48] there we go that updates it looks like
[03:04:49] it's working fine no more errors in here
[03:04:51] let's refresh our page and let's just
[03:04:53] try changing the test name to test name
[03:04:54] two click save you can see product
[03:04:57] details updated and if we go back to our
[03:04:59] product page this is bringing us to the
[03:05:01] overall products page which we still
[03:05:02] don't have we'll go to the dashboard you
[03:05:03] can see it looks like it's not actually
[03:05:05] updating everything properly it still
[03:05:06] says test name and when I go to edit you
[03:05:08] can see it's still not properly editing
[03:05:10] this properly let's go back make sure
[03:05:12] yeah it's still not working let's check
[03:05:13] our database to see if that's working
[03:05:15] cuz it could be something that's wrong
[03:05:16] with our caching so let's just bring
[03:05:17] this over check into our database we'll
[03:05:20] go to our products table give this a
[03:05:21] quick refresh and we should see that the
[03:05:23] name is test name 2 so it does look like
[03:05:25] it's updating properly we just have a
[03:05:26] problem with caching so let's bring this
[03:05:28] back to being a little bit bigger here
[03:05:30] what we need to do is on this page we're
[03:05:32] essentially calling the git products
[03:05:33] function so let's look at our git
[03:05:34] products function to see how the cache
[03:05:36] for that is working I most likely just
[03:05:38] implemented something slightly wrong in
[03:05:39] my caching so inside of here we're going
[03:05:42] to look at git products and git products
[03:05:44] is based off that user tag right there
[03:05:46] same thing with Git products so most
[03:05:48] likely our update product is where the
[03:05:49] issue is coming in revalidating our cach
[03:05:52] for the products tag user ID and ID that
[03:05:55] does look correct let's make sure here
[03:05:58] we're using the products tag here for
[03:06:00] our get product we're using the products
[03:06:01] tag so that again should be correct and
[03:06:03] we should be revalidating these things
[03:06:05] let me make sure that I actually
[03:06:06] implemented the cache itself correctly
[03:06:09] this looks like it's passing along all
[03:06:10] of our different tags that seems correct
[03:06:12] and our revalidate cache function let's
[03:06:14] make sure that is correct as well you
[03:06:16] can see here the get user T takes the
[03:06:18] user ID first then our tag second that
[03:06:20] is what we're doing here same thing what
[03:06:21] we're doing here that all again looks
[03:06:24] like it's 100% correct let's just give
[03:06:26] our page a refresh see if it implemented
[03:06:28] it no it's still not working properly
[03:06:29] the next thing that we can look at to
[03:06:31] really help figure out if this is a
[03:06:32] caching problem is inside of drizzle we
[03:06:34] can actually log every time we make a
[03:06:35] query so I can set my logger to true and
[03:06:38] now if I look at my logs inside of here
[03:06:41] I just come up there now we should see a
[03:06:43] log inside of here every time I actually
[03:06:45] make a quer so if I refresh my page you
[03:06:47] can see I got no log showing up if I go
[03:06:49] to my analytics page that showed
[03:06:51] analytics back to my dashboard you can
[03:06:53] see it's getting the dashboard page but
[03:06:55] there's no database queries being made
[03:06:57] so it is something to do with our
[03:06:58] caching the next step if you have a
[03:06:59] caching related problem is just to
[03:07:01] remove the cach completely so here I can
[03:07:03] just return Calling get products
[03:07:05] internal with all the information user
[03:07:08] ID and limit now if this actually works
[03:07:11] then it probably is 100% a caching
[03:07:13] problem there we go that completely
[03:07:14] updated it so we definitely have
[03:07:15] something wrong with our cash being
[03:07:17] stored right right here this is why it's
[03:07:18] really handy to have that clear cach
[03:07:19] function cuz maybe there's something
[03:07:21] that's currently cash that we need to
[03:07:22] get rid of so I'm just going to call
[03:07:24] clear full cach right here give this a
[03:07:26] quick refresh that'll clear out
[03:07:28] everything inside of our cache at least
[03:07:29] it should but you can see it's still
[03:07:30] getting us the old information so I'm
[03:07:32] guessing why this is being cached here
[03:07:34] is because it's getting us the
[03:07:35] information from before we properly set
[03:07:37] up our caching while we had it halfway
[03:07:39] implemented so I'm going to do is I'm
[03:07:41] just going to close out of our entire
[03:07:42] application and delete the entire folder
[03:07:44] this will get rid of anything that's
[03:07:46] cached at all in your application
[03:07:48] now we can just run this application
[03:07:49] back up and we can give this a quick
[03:07:51] restart again and hopefully now we'll
[03:07:53] see that when we refresh the page that
[03:07:55] it will get the correct name and when we
[03:07:56] update it will also still give us the
[03:07:58] correct name so test name two let's go
[03:08:00] ahead and we'll change this to three
[03:08:02] give that a quick save it looks like
[03:08:03] it's saved properly go back to our
[03:08:05] products and it looks like it's still
[03:08:07] caching incorrectly the only thing I can
[03:08:09] think of is we need to check our update
[03:08:10] product function and yep sure enough I
[03:08:12] have this set to less than instead of
[03:08:14] greater than stupid mistake there's
[03:08:16] nothing wrong with our caching which is
[03:08:17] Le a good sign when I refresh we should
[03:08:19] hopefully see that this will be updated
[03:08:20] as soon as I make a new update because
[03:08:22] now it'll revalidate my cach so let's
[03:08:24] change that to three click save it was
[03:08:26] saved go back and now it is set to three
[03:08:28] so that was just me being dumb
[03:08:30] essentially why that didn't work so you
[03:08:31] shouldn't hopefully have that problem if
[03:08:33] you don't flip your greater than sign so
[03:08:34] now we need to work on our country and
[03:08:36] customization tab because the details
[03:08:37] tab luckily was really easy so let's get
[03:08:39] that back to that page that we were on
[03:08:41] I'm just going to close all of our tabs
[03:08:42] so we have something a little bit more
[03:08:43] fresh to work with over to that edit
[03:08:45] page and I'm just going to copy down
[03:08:47] what that country tab is going to look
[03:08:49] like CU it's almost identical to what we
[03:08:50] have up here we essentially have the
[03:08:52] country groups that we're going to be
[03:08:53] getting we'll implement this function in
[03:08:54] just a little bit we have a card
[03:08:56] description which kind of describes what
[03:08:58] this particular page is doing and then
[03:09:00] we have our form which again we need to
[03:09:01] create so very similar to what we have
[03:09:03] up here we just have essentially a title
[03:09:05] and description and a form and that's
[03:09:06] what this is right here so all we need
[03:09:08] to do is just take our country tab pull
[03:09:10] it up into this
[03:09:11] section country tab need to pass it
[03:09:14] along a product ID which is our product
[03:09:17] ID
[03:09:18] and a user ID which is our user ID and
[03:09:21] now we should hopefully see we get our
[03:09:22] country discounts with obviously nothing
[03:09:24] being rendered because we need to get
[03:09:25] all the information for our country
[03:09:27] groups so we need to essentially
[03:09:29] implement this function to get our
[03:09:30] product country groups and this needs to
[03:09:32] get us quite a lot of information so
[03:09:34] let's go ahead we'll copy that to
[03:09:35] implement it and it's going to be
[03:09:37] implemented in the same place get
[03:09:38] product is implemented so it come up
[03:09:40] here we'll just do it all the way at the
[03:09:42] very top why
[03:09:43] not export
[03:09:45] function get product country groups this
[03:09:49] takes in a product ID and a user ID
[03:09:52] pretty much the exact same thing we had
[03:09:54] here there we go and then what we want
[03:09:57] to do is make sure that this is product
[03:09:59] ID and then inside this function just
[03:10:02] like we've done for all these other
[03:10:03] functions essentially we do the exact
[03:10:05] same thing so we take our props which
[03:10:06] are these right here pass them into the
[03:10:08] cache function and make sure we call the
[03:10:12] internal version of this function and
[03:10:13] then we need to set up all of our
[03:10:14] different tags now for now I'm just
[03:10:16] going to leave this tags blank because
[03:10:17] we're going to come back and figure out
[03:10:19] what the tags are after we implement
[03:10:20] this function because really it's hard
[03:10:21] to write the tags unless you know what
[03:10:23] you're using inside the function so here
[03:10:26] we're going to create a function it's
[03:10:27] going to take in a user
[03:10:29] ID product
[03:10:32] ID make sure that we get those typed
[03:10:37] properly there we go make sure I spell
[03:10:39] them properly too and now we can
[03:10:41] implement this function so for this
[03:10:43] function what I want to do is I want to
[03:10:44] get all of the groups because
[03:10:45] essentially let's say there's 10
[03:10:46] different groups group 1% or 10% 20% 30%
[03:10:49] 40% all the way up to 100% if there's 10
[03:10:51] different groups I want to get all the
[03:10:52] groups and all the countries for the
[03:10:54] groups and I want to get any discount
[03:10:56] codes that are currently associated with
[03:10:58] those groups so the very first thing I
[03:10:59] need to do is just make sure that the
[03:11:00] person has access to getting all of the
[03:11:02] information for the country or for the
[03:11:04] product sorry so I can do that by very
[03:11:06] simply just calling the get product
[03:11:09] function I'm going to get the product
[03:11:10] for a specific user and as long as I
[03:11:12] have access to that product it'll return
[03:11:14] me a product otherwise if it doesn't
[03:11:15] it's going to return to me an empty
[03:11:16] array this is going to guarantee that
[03:11:18] the user has access to this information
[03:11:20] then I can get all of my data and this
[03:11:22] is going to be coming from calling db.
[03:11:24] query and I want to query on my country
[03:11:26] group table because for each group I
[03:11:28] want to create a row inside of this
[03:11:30] section so my country group table I want
[03:11:32] to find many essentially I want to find
[03:11:34] all of them so I'm not even going to add
[03:11:35] a wear Clause because I want to find
[03:11:36] every single group inside of here and
[03:11:38] for each group I want to get specific
[03:11:40] information for example I want to get
[03:11:41] all of the countries and for each
[03:11:43] country I want to get specific columns
[03:11:45] the only columns I care about are the
[03:11:47] name name and the code column because I
[03:11:49] want to be able to use the name to
[03:11:50] display what the country name is and use
[03:11:52] the code to render out a flag for that
[03:11:54] specific country so I got all my country
[03:11:56] information the next thing I want to do
[03:11:58] is get all the discount information so
[03:11:59] for country group discounts inside of
[03:12:02] here I'm going to get a bunch of columns
[03:12:04] and for each column I just want to get
[03:12:05] the coupon so coupon is true and I want
[03:12:08] to get the discount percentage we'll set
[03:12:09] that to true so I want to get what is
[03:12:11] the coupon and discount that the user
[03:12:12] set for this thing that's relatively
[03:12:14] straightforward then I want to set a
[03:12:16] wear Clause so here I only want to do
[03:12:18] this where my product ID which I'll just
[03:12:21] specify as ID for the column name I want
[03:12:24] to do that where it is equal to whatever
[03:12:27] product ID I pass into here so let me
[03:12:29] make sure I put that inside a
[03:12:30] parenthesis so it'll actually render
[03:12:31] properly there we go equals and I want
[03:12:34] to do where my product ID is equal to
[03:12:37] that ID just like that so here
[03:12:39] essentially what I'm doing is I'm
[03:12:40] getting all of my country groups and for
[03:12:42] each country group I'm getting
[03:12:43] individual countries for each of them so
[03:12:44] if this country group has seven
[03:12:45] countries it'll give me all those
[03:12:47] countries and then I want to get the
[03:12:48] discount the user has associated with
[03:12:50] that country if they have one now they
[03:12:52] may not have one but that's okay we'll
[03:12:54] just set the limit to one and if they
[03:12:56] don't have one it'll be undefined so now
[03:12:58] we have our country group discounts and
[03:12:59] our country and that gives us our data
[03:13:01] and if we look at the type for this data
[03:13:03] real quick we hover over this you can
[03:13:04] see we get all the information for our
[03:13:06] group we get all the information for the
[03:13:07] countries and we get all the information
[03:13:09] for the country group discounts but
[03:13:11] again this could be null so what I want
[03:13:13] to do is I just want to map through my
[03:13:14] data return only the things I need in an
[03:13:16] easy to use format
[03:13:17] so for each group I want to return this
[03:13:20] information so we'll say return I want
[03:13:22] to get the group. ID I want to get the
[03:13:25] group name I want to get the
[03:13:28] recommended discount percentage which is
[03:13:31] just group. recommended discount
[03:13:33] percentage I want to get all the
[03:13:36] countries which is just group. countries
[03:13:38] and then finally I want to get whatever
[03:13:40] discount is associated with this which
[03:13:42] is just the group. country group
[03:13:44] discounts and I want to get the very
[03:13:46] first one so just say at zero so if I
[03:13:48] give that a quick save that should make
[03:13:49] everything in this file work properly
[03:13:51] now we can figure out what our tags are
[03:13:52] going to be and if we look down here the
[03:13:54] things that we're querying our our
[03:13:55] product we're quering our country group
[03:13:58] table and we're quering our countries
[03:14:00] themselves as well as the discounts now
[03:14:02] the discounts I'm associating with the
[03:14:03] project or the product sorry because
[03:14:05] it's on the product edit page so this is
[03:14:07] essentially a product this is a country
[03:14:09] group and this is our countries so what
[03:14:11] we can come up here to do is we can get
[03:14:13] a user tag and that's going to be
[03:14:15] specifically for the user ID that we
[03:14:17] pass in here and we want to do it for
[03:14:19] our
[03:14:20] products then the next tag that we need
[03:14:22] to do is actually going to be a global
[03:14:24] tag and that's because the user doesn't
[03:14:27] have individual country groups or
[03:14:29] countries these are Global to every
[03:14:30] single user you notice when we do our
[03:14:32] filtering there's no filtering on the
[03:14:33] countries and there's no filtering on
[03:14:35] the country groups we're getting all of
[03:14:36] them so that means it's a global tag so
[03:14:39] ctags do countries and we need to do the
[03:14:42] exact same thing for our country groups
[03:14:45] and we should just make sure we add
[03:14:46] those t tags so we can come in here this
[03:14:50] one is
[03:14:53] countries and Country groups just like
[03:14:56] that so now that should hopefully clean
[03:14:57] up all those errors give that a quick
[03:14:58] save you can see we're doing the tagging
[03:15:00] just like we want and actually I can
[03:15:01] make this more specific because I have a
[03:15:03] product ID so I might as well get the ID
[03:15:05] tag based on our product ID just to make
[03:15:07] it as specific as possible so now I can
[03:15:09] actually use this let's minimize all
[03:15:11] these functions down to make it easier
[03:15:12] to work with come back to here where I'm
[03:15:14] getting my product scroll all the way
[03:15:16] down and I should be able to import this
[03:15:18] function and that's going to give me all
[03:15:19] of my essentially country group
[03:15:21] information the ID name the recommended
[03:15:23] discount the all of the countries and
[03:15:25] the individual discount if there is one
[03:15:26] associated with that now with all that
[03:15:28] information I can go ahead and build out
[03:15:30] this form with my ID and with that
[03:15:32] country groups so let's create this
[03:15:33] function inside of our forms folder this
[03:15:36] is called Country
[03:15:38] discount form. TS and that's actually
[03:15:41] country discounts and make sure it's TSX
[03:15:44] I'm going to paste in just the typing so
[03:15:45] you can see here this is the same type
[03:15:47] we had from before just cuz it's easy to
[03:15:48] work with I don't want to have to type
[03:15:49] that out for you and now we need to set
[03:15:51] up our form so we can say form is equal
[03:15:53] to use form just like that I want to
[03:15:56] call that function and let's make sure
[03:15:57] that we import that now before we do
[03:15:59] that I want to go over here and make
[03:16:00] sure everything's imported properly so
[03:16:02] let's import this function that we just
[03:16:03] created and it looks like we are getting
[03:16:05] an error here and that's because this is
[03:16:07] a type of undefined that's not definable
[03:16:10] as null so let's just change this to
[03:16:11] undefined there we go that should clean
[03:16:14] that up and we can even just make this
[03:16:15] an optional property that's even easier
[03:16:17] that should clean up all of our
[03:16:18] different errors and if we just make
[03:16:20] sure from here we return
[03:16:24] something there we go there we go now we
[03:16:27] got no more errors in this file which is
[03:16:28] perfect so now we can go ahead and
[03:16:29] actually start implementing this form so
[03:16:31] we can say Z from Zod we want to infer
[03:16:34] the type of and we want to create a
[03:16:35] schema so we'll say product Country
[03:16:38] discount schema just like that and then
[03:16:41] inside of this use hook form what we can
[03:16:43] do is we can pass along the resolver
[03:16:45] which is just going to be a Zod resol
[03:16:47] that takes in that exact same
[03:16:50] schema and then the next thing we can do
[03:16:52] is our default
[03:16:55] values now before we go about defining
[03:16:57] these default values let's go ahead and
[03:16:59] create our schema so schemas inside of
[03:17:01] products here we can export a constant
[03:17:04] for that name and this time we're going
[03:17:05] to return an object and this object is
[03:17:08] only going to have one property this
[03:17:09] property is our groups and this groups
[03:17:11] is just going to be an array so we're
[03:17:13] going to return array essentially of
[03:17:15] different objects so we'll say array
[03:17:18] of Z doobs and each of these objects is
[03:17:20] going to have the country group ID this
[03:17:23] is the ID for each group that we're
[03:17:24] associating with this with so we're
[03:17:26] going to have a string minimum of one
[03:17:29] and this is required this should never
[03:17:30] be missing though because we're going to
[03:17:31] make it a hidden field in our form the
[03:17:33] next thing we need is our discount
[03:17:34] percentage and our coupon so I'm just
[03:17:36] going to copy those over paste that down
[03:17:38] so our discount percentage is going to
[03:17:40] be a number the maximum value is 100%
[03:17:42] minimum value of 1% or we're saying that
[03:17:45] it can be not a number and in the the
[03:17:46] case that it's not a number what we're
[03:17:48] going to do is convert that to undefined
[03:17:50] and this is optional now I'll get to the
[03:17:52] point of why this can be optional in
[03:17:53] just a second the same thing with coupon
[03:17:55] this can also be optional now there's
[03:17:57] some other refining we're going to do
[03:17:58] here in just a little bit but I'm going
[03:17:59] to leave that off until we build our
[03:18:01] form because then it'll make a lot more
[03:18:02] sense so right now our form is just
[03:18:04] throwing a bunch of errors and not doing
[03:18:05] anything but as soon as we start
[03:18:06] importing different stuff we import this
[03:18:09] let me make sure that this infer is
[03:18:10] coming through properly I believe this
[03:18:12] may just need to say type of in front of
[03:18:14] it actually that obviously does not need
[03:18:16] to have type type of I'm just missing
[03:18:17] one of my angle brackets over here that
[03:18:19] fixes the problem there we go now we
[03:18:21] have our default values that we can work
[03:18:22] on implementing as you can see the only
[03:18:24] thing inside of here is our groups just
[03:18:27] like that but it does look like we have
[03:18:28] some errors going on that's because we
[03:18:30] need to make sure we pass this inside of
[03:18:31] an object there we go that solves all
[03:18:33] those errors and now you can see that
[03:18:35] the only thing we have inside of here is
[03:18:37] groups so to make those groups we can
[03:18:38] just take our country groups that we're
[03:18:40] already having passed in and we can map
[03:18:42] through each of the groups and we can
[03:18:44] Define them exactly like we want so we
[03:18:46] come in here we can return an object and
[03:18:49] this object needs to have a country
[03:18:50] group ID well that's just our group. ID
[03:18:52] that one's relatively straightforward we
[03:18:54] need to have our coupon that again is
[03:18:56] pretty easy that's just going to be our
[03:18:57] group. coupon that's going to come from
[03:19:00] our discount so discount. coupon but
[03:19:02] again this can be undefined so if it's
[03:19:04] undefined we'll pass along an empty
[03:19:06] string then finally we need to do our
[03:19:08] discount percentage and this is where it
[03:19:10] gets a little confusing so up here I'm
[03:19:12] going to say that our discount is equal
[03:19:13] to and first I'm going to get my group
[03:19:15] discount and if we don't have a discount
[03:19:18] then what I'm going to do is I'm going
[03:19:20] to fall back to my recommended discount
[03:19:22] percentage so I'm either going to use
[03:19:23] the currently defined discount by the
[03:19:25] user or fall back to whatever the
[03:19:27] recommended discount is then for my
[03:19:29] discount percentage if my discount is
[03:19:31] not equal to null well then I'm just
[03:19:33] going to take my discount and multiply
[03:19:34] it by 100 because our discounts in the
[03:19:36] database are stored between 0 and 1 and
[03:19:38] in the actual form we're storing them
[03:19:40] between Z and 100 so it's easier for
[03:19:42] people to understand otherwise we're
[03:19:44] going to return undefined here as the
[03:19:46] discount percentage now if we give that
[03:19:48] a quick save that at least gets our
[03:19:49] default values for our form now we can
[03:19:51] actually render out what our form looks
[03:19:53] like so we'll get started with the basic
[03:19:54] form stuff we use the form component
[03:19:57] from the form Library we need to have an
[03:19:59] onsubmit
[03:20:01] function there we go and that is going
[03:20:04] to take in
[03:20:05] values which is z. infer and that's the
[03:20:09] type of our product Country discount
[03:20:12] schema so let's just paste that in there
[03:20:15] so now at least we
[03:20:17] console. log our values out if we really
[03:20:19] wanted to so now we have all that
[03:20:21] information we can close off our form
[03:20:23] and our other form to get our actual
[03:20:25] thing working and now inside of here I
[03:20:27] just want to Loop through each one of
[03:20:28] our country groups so country groups.
[03:20:30] map through each group and for each
[03:20:33] group I want to render out a card
[03:20:35] because this is going to be a card-based
[03:20:36] layout and the key is the group. ID
[03:20:39] there we go and inside the card I don't
[03:20:41] even need a header I just need the card
[03:20:43] content so for our card content I'm
[03:20:45] going to add a class name
[03:20:48] here I want to make sure I import this
[03:20:50] so we can actually use class name pading
[03:20:53] on the top of six to give it some space
[03:20:54] on the top we're going to flex with a
[03:20:56] gap of 16 and our items in the center
[03:20:59] and that's because the left side of this
[03:21:01] is going to be all the flags and the
[03:21:02] right side is going to be all of the
[03:21:04] different input Fields so let's put in a
[03:21:06] div that's going to render all of our
[03:21:08] left side content so we're going to have
[03:21:09] an H2 which is our group. name just like
[03:21:12] that so if we give this a safe go over
[03:21:14] to our country Tab and we make sure we
[03:21:16] have everything imported properly let's
[03:21:18] just give this a refresh to make sure
[03:21:20] again my problem is I need to make sure
[03:21:23] I use this as a client component now if
[03:21:25] we go to our country we see that we
[03:21:26] currently aren't actually getting
[03:21:27] anything rendered out and that's because
[03:21:29] we don't have any country groups yet so
[03:21:31] one thing that I'm going to do before we
[03:21:33] worry about adding country groups is I'm
[03:21:34] going to go back to this page I'm going
[03:21:36] to pass in essentially a placeholder
[03:21:38] value so we know that we have some
[03:21:40] countries that we can store inside of
[03:21:41] here which is an array and inside this
[03:21:44] array we're going to have a code so for
[03:21:45] example like us
[03:21:47] and a name United States and let's just
[03:21:50] do another one inside of here code is
[03:21:53] going to be I
[03:21:54] in and we're going to have the name be
[03:21:57] India there we go so now we have our
[03:21:58] countries being
[03:22:00] defined let's make sure that we also
[03:22:02] Define our ID it doesn't really matter
[03:22:05] we'll just put in something like that
[03:22:08] we're going to need a name this is group
[03:22:11] one we're going to need to have here our
[03:22:13] recommended discount percent let's just
[03:22:14] say it's going to be 0.1 so that's 10%
[03:22:17] and then finally our discount if we have
[03:22:19] one so we'll say the coupon is high and
[03:22:22] the discount percentage is going to be2
[03:22:25] so we can obviously play around with
[03:22:27] taking this discount off and not but now
[03:22:28] you can see we have a group showing up
[03:22:30] inside this section and then we'll go
[03:22:31] about actually making it so we have all
[03:22:33] of our groups but for now I want to get
[03:22:34] the form working pretty well so let's
[03:22:36] get our group name in place I'm also
[03:22:38] going to drastically strength this down
[03:22:39] so for our class name text muted
[03:22:42] foreground text small font semi bold and
[03:22:47] we'll put a low margin on the bottom of
[03:22:48] two and that's because directly below
[03:22:50] this is where we're going to put each
[03:22:51] one of our flags so we're going to say
[03:22:53] flex and a gap of two and we're going to
[03:22:56] do a flex wrap now inside of here we
[03:22:58] just want to Loop through all of our
[03:23:00] different countries so countries. map
[03:23:02] for each
[03:23:04] country I just want to render out what
[03:23:06] that flag is going to be and to do that
[03:23:08] we're actually going to install a
[03:23:09] library called react country flag so we
[03:23:12] can come in and we can use the react
[03:23:14] country flag component let's just make
[03:23:18] sure that we import this so all the way
[03:23:20] at the top
[03:23:21] here we're going to
[03:23:24] import from the react country flag
[03:23:27] Library you can use whatever Library
[03:23:28] flag you want really this just downloads
[03:23:30] a bunch of svgs and what we can do is we
[03:23:32] can say that our country code is going
[03:23:34] to be
[03:23:36] country. code and then we can specify we
[03:23:38] want to use an SVG and now if we give
[03:23:40] that a quick save you can see we get the
[03:23:42] US and India flag showing up now there's
[03:23:44] tons of different libraries you can use
[03:23:45] for this for example another Library you
[03:23:47] can use is just a URL right here for a
[03:23:49] source for an image so if I import this
[03:23:51] image from next image give this a save
[03:23:53] you can also see if I were go to the
[03:23:55] country tab I now get the flag showing
[03:23:57] up this way personally I actually like
[03:23:59] this image source a little bit better
[03:24:01] and this is just another flag Library
[03:24:03] this is country Flag icons so if you
[03:24:05] search for Country Flag icons you'll get
[03:24:06] this exact URL and I'm just pasting in
[03:24:09] my country code uppercase it and then
[03:24:10] getting the SVG I personally find that
[03:24:13] these icons look a little bit better on
[03:24:14] a smaller screen size so I'm going to be
[03:24:16] specifically using these icons instead
[03:24:18] of the ones in the react country flag
[03:24:20] library but again you can use whatever
[03:24:22] Library you want for this particular use
[03:24:23] case so now we have all of our flags as
[03:24:25] well as the group name showing up that's
[03:24:27] everything inside this div the next
[03:24:28] thing I want to do is I want to add a
[03:24:30] hidden input into our field so we're
[03:24:32] just going to say type is hidden and
[03:24:34] then we can just register this input
[03:24:35] manually so we can say form. register
[03:24:38] and this is going to be at
[03:24:39] groups Dot and then whatever our index
[03:24:44] is Dot and then this is going to be what
[03:24:47] the field is which is our country group
[03:24:49] ID just like that make sure I close off
[03:24:51] my input and I make sure I import this
[03:24:54] there we go so now this is just giving
[03:24:56] us a hidden input at this index I want
[03:24:58] to make
[03:24:59] sure I get the index just like this so
[03:25:02] that way when we submit our form we'll
[03:25:03] actually know what the country group ID
[03:25:05] is without manually having to type it in
[03:25:07] so there we go we have our group one
[03:25:08] showing up now we want to create our
[03:25:09] form Fields off to the right hand side
[03:25:11] here so we'll create a div we'll give it
[03:25:14] some class names margin left of Auto
[03:25:16] just push it all the way to the right we
[03:25:17] want to make sure it doesn't shrink down
[03:25:19] and we want to make sure it's a flex
[03:25:21] with a gap of two and we'll do Flex
[03:25:23] column as well so they can stack
[03:25:25] vertically on top of each other and the
[03:25:26] W is going to be minimum so that's going
[03:25:28] to make this div shrink as much as
[03:25:29] possible now there are two things that
[03:25:31] I'm going to put the first thing is
[03:25:32] going to be a div that contains all of
[03:25:34] our different inputs and then below that
[03:25:36] I'm going to have a form message to
[03:25:38] display any error messages that I have
[03:25:40] and this error message is going to be at
[03:25:42] the root level of our application so
[03:25:43] form state. errors. groups at our
[03:25:46] particular index get any root level
[03:25:48] errors and that's because when I
[03:25:49] mentioned that we have extra validation
[03:25:51] we need to do inside of here that's what
[03:25:52] I'm going to put inside this root
[03:25:54] section right here now what I want to do
[03:25:56] next is style what our inputs are going
[03:25:57] to look like so we'll say a flex with a
[03:25:59] gap of four to space them out from one
[03:26:00] another and now I'm going to paste in
[03:26:02] this input for our coupon you can see
[03:26:04] this is stuff that we've all done a
[03:26:05] million times before so let me just get
[03:26:07] all these Imports in real
[03:26:10] quick there we go oops didn't get that
[03:26:13] in there properly there we go so I just
[03:26:15] have a form field the group is just
[03:26:17] going to be the group at the index and
[03:26:19] this is my coupon field so it's our
[03:26:20] coupon and the width is going to be 48
[03:26:22] we don't want it to be too big now I'm
[03:26:24] going to do the exact same thing by
[03:26:25] copying down another input field as well
[03:26:28] this one is going to be for my discount
[03:26:30] and I believe it's called discount
[03:26:32] percentage just like that there we go
[03:26:34] that's our name this is going to say
[03:26:36] discount percent aside of here the class
[03:26:39] is going to still be a 48 width but I
[03:26:41] want to change a few things about this
[03:26:42] for example I want to specify how my
[03:26:44] value is going to be set that should
[03:26:46] just going to take my field. value or
[03:26:48] it's going to set it to an empty string
[03:26:50] and then my on change what I'm going to
[03:26:51] do here is I'm going to get my e and
[03:26:54] then I just want to say field.on change
[03:26:57] and want to specify e. target. value as
[03:27:00] number and this is just going to make
[03:27:01] sure that it's going to convert this
[03:27:03] number input the string that it gives
[03:27:05] back to me into a number for me to save
[03:27:07] then again I have my class with a width
[03:27:09] of 48 in my case I'll make this one
[03:27:11] quite a bit smaller at 24 and then I'll
[03:27:14] specify a minimum of 0
[03:27:16] and a Max of 100 there we go give that a
[03:27:19] quick save and now you can see my
[03:27:20] discount percentage and my coupon and
[03:27:22] they're both being set to high right now
[03:27:24] which is obviously not correct so I have
[03:27:25] something mislabeled let me just give it
[03:27:27] a refresh see if that fixes it there we
[03:27:28] go discount at 20 coupon at high and if
[03:27:31] I make my screen a little bit larger you
[03:27:33] can see all the flags are showing up
[03:27:34] really nicely now if I go over here and
[03:27:36] I get rid of this discount we should see
[03:27:38] the coupon goes away and the discount
[03:27:39] percentage changed to 10 so let's give
[03:27:41] that a refresh go to Country you can see
[03:27:42] discount percent falls back to the
[03:27:44] recommended and my coupon goes away
[03:27:46] completely and this is why I made it so
[03:27:48] that the coupon field is optional and I
[03:27:50] also made it so the discount field is
[03:27:51] optional because if you don't have a
[03:27:52] coupon you don't need a discount to be
[03:27:54] able to be passed in now it does look
[03:27:56] like I have some issues right here with
[03:27:57] this showing up is not a number and so
[03:27:58] on so I'm going to go about and try to
[03:28:00] fix that right now I think all we need
[03:28:01] to do for fixing that is here where
[03:28:03] we're doing the field value we can say
[03:28:05] if the field value is not a
[03:28:08] number then we're going to render
[03:28:12] out an empty string otherwise we're
[03:28:14] going to render out our field
[03:28:17] value there we go and also I believe our
[03:28:19] field value could be undefined so we'll
[03:28:21] say here field.
[03:28:24] value if it is
[03:28:26] undefined then we're going to just do
[03:28:28] whatever is inside of here so this
[03:28:30] should hopefully just be a number nope
[03:28:32] it's actually only undefined there so of
[03:28:34] course we'll do a check here if it's set
[03:28:35] to null then we're going to do all this
[03:28:37] is Nan Shenanigans put all that inside
[03:28:40] of
[03:28:41] parenthesis otherwise we're going to
[03:28:43] render out if it's not null the field.
[03:28:46] value there we go and here I should say
[03:28:48] if it's not null then we want to do this
[03:28:51] check here and if it is null then we're
[03:28:53] going to print out an empty string just
[03:28:54] like that there we go so now you can see
[03:28:56] that that got rid of that problem and to
[03:28:58] clean up our code a little bit we'll say
[03:28:59] if the field that value is not equal to
[03:29:00] null and if it is not Nan then we're
[03:29:04] going to render out field. value
[03:29:07] otherwise we'll render out an empty
[03:29:08] string so if the value is null or it is
[03:29:11] na an we'll render an empty string so
[03:29:13] now we'll give that a refresh go over to
[03:29:14] Country you can see
[03:29:16] looks like we still have a problem and I
[03:29:18] believe the reason for this is because I
[03:29:19] need to make sure that this input field
[03:29:21] is a type of number that should solve
[03:29:24] all my different problems let's give
[03:29:25] that a refresh go over to Country you
[03:29:27] can see I can delete this I can type in
[03:29:30] numbers everything's working perfectly
[03:29:31] fine I believe I can even simplify this
[03:29:33] code by bringing it back to that double
[03:29:35] question mark syntax and following it up
[03:29:38] with here there we go this should
[03:29:41] hopefully be much simpler and still work
[03:29:43] let's make sure that works come in here
[03:29:45] delete that type in yes that is still
[03:29:47] working just fine so a much simpler
[03:29:48] version of our code so now the final
[03:29:50] thing we need to do below all of this
[03:29:51] section after our card content after our
[03:29:53] card literally after every single thing
[03:29:55] right before our form ends we'll just
[03:29:57] add a button that allows us to save this
[03:29:59] information import the button and now if
[03:30:01] we go over to our country give this a
[03:30:03] save we scroll down you'll see that we
[03:30:05] have a save button all the way down here
[03:30:07] which is exactly what we want we can
[03:30:08] click save and it's going to run some
[03:30:10] code right now all it does is console
[03:30:11] log out our values so what we need to do
[03:30:13] is instead of hardcoding this
[03:30:15] information we need to actually get this
[03:30:17] information from our database which
[03:30:18] we're already doing but right now
[03:30:20] there's no data in our database so this
[03:30:21] is completely empty so we need to write
[03:30:23] some code that allows us to import all
[03:30:25] of our different country groups into our
[03:30:26] database because this is information
[03:30:28] that never changes really unless a
[03:30:29] country drastically increases or
[03:30:31] decreases its purchasing power and it's
[03:30:33] the same for every user on our site so
[03:30:35] first of all we need to get all of the
[03:30:36] data for the different countries I'm
[03:30:38] just going to paste in a file here
[03:30:39] called countries by discount. Json this
[03:30:41] gives us a name a recommended discount
[03:30:43] percentage and a list of all the
[03:30:44] different countries that fall into that
[03:30:46] group and it does it for every single
[03:30:47] group of countries as you can see if you
[03:30:49] want to get this exact file I'll have it
[03:30:51] inside of the GitHub repository so
[03:30:53] there's all of our countries by the
[03:30:54] different discount and then what we want
[03:30:56] to do is we want to create a task so I'm
[03:30:58] going to create a folder called tasks
[03:31:00] just like this and inside this tasks
[03:31:02] folder I'm going to create a file called
[03:31:04] update country groups. TS and this is a
[03:31:07] task that I can run that's going to read
[03:31:09] all the contents to this file and update
[03:31:11] all of my country groups based on that
[03:31:12] information so I'm going to create a
[03:31:14] function called update country groups
[03:31:17] I'm going to create a function called
[03:31:18] update countries and this allows me to
[03:31:21] update both of these different sections
[03:31:22] so I'll just call this in a wait and a
[03:31:25] wait just like that now you will notice
[03:31:26] I'm getting an error essentially on all
[03:31:28] of this stuff I need to make sure I use
[03:31:29] imports and exports to do all of this so
[03:31:31] let's coming down here let's create the
[03:31:33] async
[03:31:34] function update country groups just like
[03:31:38] that that'll clean up some of those
[03:31:39] errors and the very first thing I'm
[03:31:40] going to need to be able to access is my
[03:31:42] database so we might as well just import
[03:31:43] that right into here now you will notice
[03:31:45] it says top L weight is not valid unless
[03:31:47] I have some set of es modules or so on
[03:31:50] being enabled inside my typescript so we
[03:31:51] can go ahead and enable that so in RTS
[03:31:54] config here right now we have certain
[03:31:56] things seeing set really far in the past
[03:31:58] and that's because we don't have a
[03:31:59] Target being defined this is the Target
[03:32:01] that our code compiles down to we're
[03:32:03] going to say es 20107 that's the
[03:32:05] earliest that you can actually do top
[03:32:07] level weight and there shouldn't be any
[03:32:08] code that's you know relying on 2017
[03:32:11] features or Beyond so here we go that
[03:32:12] fixes our top level weight and now we
[03:32:14] can go ahead and actually write this
[03:32:15] function so first I need to get the data
[03:32:17] I'm going to insert so this is going to
[03:32:18] be called country group insert data I'm
[03:32:22] going to set that to countries by
[03:32:26] discount and this countries by discount
[03:32:29] is something that I need to
[03:32:31] import and that's coming from the SL dat
[03:32:35] countries by discount Json so I can Loop
[03:32:38] through each one of these by mapping
[03:32:39] through each one and for each one of
[03:32:41] these I'm going to be getting a name and
[03:32:43] I'm going to be getting a recommended
[03:32:47] percentage let's see that is
[03:32:51] recommended discount percentage there we
[03:32:54] go and that's going to give me a
[03:32:56] function and inside this function all I
[03:32:58] want to do is return combining those
[03:33:00] together so name and recommended
[03:33:02] discount percentage so essentially I'm
[03:33:03] just removing the countries portion of
[03:33:05] this information and now I have an array
[03:33:06] with names and recommended discount
[03:33:08] percentages that I can insert into my
[03:33:10] database so I can say my row count is
[03:33:14] equal to calling DB Dot and I want to
[03:33:16] insert into my country group table since
[03:33:19] I have all the information I need for it
[03:33:21] I want to insert specific values and the
[03:33:23] values I want to insert is that insert
[03:33:25] data that I just created now this is
[03:33:27] actually going to work but I want to
[03:33:28] make sure that this also works for
[03:33:30] updating my information so if I run this
[03:33:32] file twice in a row it'll still work so
[03:33:34] in that case I can do an on conflict on
[03:33:36] on conflict I actually want to update
[03:33:38] things so first of all you have to
[03:33:40] specify the target this is the thing
[03:33:41] you're searching for in our case
[03:33:43] whenever our name is the same that means
[03:33:45] that I want to do an update instead so
[03:33:47] if my name is the same then I want to
[03:33:48] update that recommended percentage so
[03:33:51] here I call the set function and this
[03:33:53] allows me to set specific things for
[03:33:55] example we don't need to worry about the
[03:33:56] name because we know the name is the
[03:33:58] same but what we can do is we can say
[03:33:59] that we want to set the recommended
[03:34:01] discount percentage and the easiest way
[03:34:03] to update this is by using this SQL do
[03:34:05] raw function and this allows you to pass
[03:34:08] in a string and we can pass in the
[03:34:10] string called excluded Dot and then we
[03:34:13] pass in whatever the name of the thing
[03:34:14] we want to do is so our case it's the
[03:34:16] country group table. recommended
[03:34:18] discount percentage. name so what this
[03:34:20] fancy line of CSS is essentially doing
[03:34:23] is it's saying okay insert into my
[03:34:25] country group table all this data and
[03:34:27] every single time you find a duplicate
[03:34:29] should make sure you update only the
[03:34:30] recommended discount percent and this
[03:34:32] excluded dot syntax is just saying hey
[03:34:35] get whatever the value of the
[03:34:37] recommended discount percentage would
[03:34:38] have been for the insert and instead use
[03:34:40] that for the update it's a relatively
[03:34:43] complex line of code but it doesn't
[03:34:44] really do that difficult of things now
[03:34:47] obviously after this we need to
[03:34:48] revalidate our database cache in our
[03:34:50] case we only have a global tag to work
[03:34:52] with so our cash tags. country groups we
[03:34:56] want to revalidate our cach for that and
[03:34:58] then what we can do is we can return our
[03:35:00] row count just like that so this is
[03:35:02] going to show us all the things that
[03:35:03] were updated so we'll say group count is
[03:35:07] equal to that and we can do some kind of
[03:35:09] log for example I'll just copy over the
[03:35:11] log just like this updated this many
[03:35:13] group counts and this many countries and
[03:35:15] here we we can say our countries is
[03:35:18] equal to that so this is just telling us
[03:35:19] how many of those different things we
[03:35:20] updated so first we update all of our
[03:35:22] groups and now we can go ahead and
[03:35:24] update all of our countries so this is
[03:35:26] going to be update countries just like
[03:35:29] that again it's going to use this exact
[03:35:31] same countries by discount array that we
[03:35:33] have up here so first I want to get our
[03:35:35] country groups so that is actually going
[03:35:37] to be coming from our database just like
[03:35:39] this and you will notice here I'm okay
[03:35:41] with using my database queries in this
[03:35:43] specific file because this is code
[03:35:45] that's not part of our application this
[03:35:46] is outside of our application we're
[03:35:48] never going to call this code from our
[03:35:49] application so it's kind of its own
[03:35:51] unique entity I want to keep it as
[03:35:53] separate as possible from the rest of
[03:35:54] our code so that's why I'm okay with
[03:35:56] using a database directly inside of here
[03:35:59] now I want to get our insert data
[03:36:01] country insert data is equal to and
[03:36:04] again Loop through that array I want to
[03:36:06] use a flat map this time because I want
[03:36:07] to convert that array of countries into
[03:36:09] a single array instead of a nested array
[03:36:11] and this is going to return to me
[03:36:13] countries and it's going to return to me
[03:36:15] the name which is the group that they
[03:36:16] are a part of now the next thing I want
[03:36:18] to do is take each one of my countries
[03:36:19] and I want to Loop through each country
[03:36:21] so now I'm looping through each
[03:36:22] individual country and mapping them into
[03:36:24] their own array let's get the country
[03:36:26] group for this country which is just
[03:36:30] country
[03:36:33] groups find the group where the group.
[03:36:36] name is equal to our name make sure I
[03:36:40] spell that all properly and I can even
[03:36:41] move that up to here so we can get the
[03:36:43] country group once for each set of
[03:36:44] countries and if for some reason our
[03:36:47] country group is null I want to throw an
[03:36:48] error this should never happen it should
[03:36:50] be completely impossible but just in
[03:36:51] case we're going to put that error in
[03:36:53] there then down here I can just return
[03:36:55] an object that has the name which is my
[03:36:59] countryname we want to get the code
[03:37:01] which is just country.
[03:37:04] code and I believe it's called the
[03:37:06] country inside of my array of data and
[03:37:09] then finally the country group ID is
[03:37:12] just country group. ID there we go so
[03:37:14] that's all the data we want to insert
[03:37:16] just like up here we essentially need to
[03:37:18] do the exact same line of code so I'm
[03:37:20] just going to copy that down but instead
[03:37:22] of into the group table we're going to
[03:37:23] be inserting this into the country table
[03:37:26] just like that and this is my country
[03:37:29] insert data and again this is my country
[03:37:32] table and instead of using the name I'm
[03:37:33] going to use the code as the uniqueness
[03:37:35] indicator now here I want to change my
[03:37:38] name I want to update that from my
[03:37:40] country table so anytime that I have a
[03:37:43] code that's the same I want to be able
[03:37:44] to change my name
[03:37:46] and I also want to change instead of
[03:37:48] here the country group ID so again
[03:37:51] update only these fields if the code
[03:37:53] already exist that way if I run this
[03:37:54] update function multiple times it'll
[03:37:56] only update the ones that have changed
[03:37:58] now down here I want to update the cache
[03:38:01] for my countries and that should be all
[03:38:02] that I need to do and now this is going
[03:38:04] to add information into my database for
[03:38:06] all of my different countries so now
[03:38:08] inside my package Json I can just make a
[03:38:10] script that lets me run this so for
[03:38:11] example DB
[03:38:14] update country groups and this is going
[03:38:17] to run
[03:38:18] TSX with an environment file
[03:38:22] ofv and it's going to run the file
[03:38:25] inside my source folder inside tasks
[03:38:27] inside update country groups. TS now I
[03:38:31] can just run this exact command npm run
[03:38:34] DB update country groups just like that
[03:38:37] and that should run my command but of
[03:38:39] course I have to install TSX first so
[03:38:41] npmi this is a Dev dependency TSX that
[03:38:45] allows me to run typescript files
[03:38:46] without actually doing anything else and
[03:38:48] now we can click run on that and you can
[03:38:50] see we are getting some errors showing
[03:38:51] up again top level weight is not
[03:38:53] supported with the CJs output format now
[03:38:56] I just need to come in here change my
[03:38:57] type to module that should fix that
[03:38:59] problem now let's give this a quick run
[03:39:01] and hopefully that should work but again
[03:39:03] we're still getting an error react does
[03:39:05] not have an export named cache this is
[03:39:06] unfortunately a bit of a trickier
[03:39:08] problem to get around and the reason why
[03:39:10] this cach export is not there is because
[03:39:12] the current version of react does not
[03:39:14] have this cash export it's only
[03:39:16] available in the canary version it
[03:39:18] should be out in react 19 which is not
[03:39:20] quite out yet and the reason we can use
[03:39:22] it though is because we're using nextjs
[03:39:24] but when we run this file outside of
[03:39:25] nextjs it doesn't know about that cache
[03:39:27] so for now the best way to get around
[03:39:29] this is just to remove everything
[03:39:31] related to the caching so we're going to
[03:39:33] remove the revalidation of our cach here
[03:39:35] and we're going to remove the
[03:39:36] revalidation of our cach here and if we
[03:39:38] run this function we're just going to
[03:39:40] need to make sure that we manually clear
[03:39:41] out all of our caching information which
[03:39:43] is not that big of a deal again in
[03:39:45] future versions of react when this is
[03:39:47] actually a function that you can use you
[03:39:49] won't have to do this but right now we
[03:39:51] do have to do this while we wait for
[03:39:52] react 19 so now let's go ahead and try
[03:39:54] to run out that file so we can come in
[03:39:57] here whoops run that file again and
[03:39:59] hopefully this time it should work as
[03:40:00] you can see it printed out all of my
[03:40:02] database queries as well as it said we
[03:40:04] updated 10 country groups and 192
[03:40:06] countries so it did look like it worked
[03:40:08] just fine now to make sure that we don't
[03:40:10] have any caching problems to worry about
[03:40:11] I'm just going to manually update my
[03:40:13] cache so inside of whatever country or
[03:40:15] component I was working on so let's just
[03:40:17] come over to this page right here I'm
[03:40:19] just going to call the Clear full cache
[03:40:21] function refresh my page that should
[03:40:22] have hit that function and now hopefully
[03:40:24] our caches are cleared so now if we go
[03:40:26] to the country tab it looks like it's
[03:40:28] still not pulling in all of our
[03:40:29] different country groups let me just
[03:40:30] make sure again we are clearing the full
[03:40:33] cache calling that function give this a
[03:40:35] refresh go to this page refresh still
[03:40:38] doesn't look like it's actually clearing
[03:40:39] the cache and if we check to see if we
[03:40:42] are hitting the database we refresh our
[03:40:43] page it looks like it's not hitting
[03:40:45] database at all so our cach is not being
[03:40:47] properly cleared let's go back to the
[03:40:48] page we're on before let's make sure
[03:40:49] that our caching is working properly so
[03:40:52] we can go over to our lib folder inside
[03:40:53] the
[03:40:54] cache we should see the revalidate for
[03:40:57] clearing is revalidating the star tag
[03:40:59] and every single one of our things
[03:41:00] should have the star tag if they're
[03:41:02] inside of our DB cache but it doesn't
[03:41:04] look like that's working as expected the
[03:41:06] next best thing that we can do instead
[03:41:08] of having to worry about figuring out
[03:41:09] that caching issue because it could just
[03:41:10] be something that's stored in the cache
[03:41:11] from before just delete thex folder
[03:41:14] that'll clear out the cache and restart
[03:41:16] your
[03:41:17] server there we go that should fix any
[03:41:19] of those particular problems we were
[03:41:21] running into now when we're on this edit
[03:41:22] page should grab everything from scratch
[03:41:24] and hopefully we won't have any caching
[03:41:26] problems going forward so now in our
[03:41:27] country tab you can now see that we have
[03:41:30] all of our different country flags the
[03:41:31] recommended percentages and the coupon
[03:41:33] code and that's for every single group
[03:41:35] that we have which means that all of our
[03:41:36] code is working flawlessly and if we
[03:41:38] click save you should see it allows it
[03:41:40] to actually save but right now it's not
[03:41:42] doing anything cuz we're not calling any
[03:41:43] particular function so let's go ahead
[03:41:45] and work on calling a particular save
[03:41:47] function and then I can talk about why I
[03:41:49] wanted to be able to leave coupon and
[03:41:50] discount blank because for example what
[03:41:52] if I don't want to add a coupon for this
[03:41:54] group well I want to be able to leave
[03:41:55] that blank that's why I left that field
[03:41:57] as optional same thing with the discount
[03:41:58] if I don't include a discount or a
[03:41:59] coupon I don't want to include anything
[03:42:01] for that group the only time I want to
[03:42:02] throw an error is if they type in a
[03:42:04] coupon but don't add a discount
[03:42:06] obviously in that particular scenario I
[03:42:08] want to throw an error so let's write a
[03:42:09] schema for that we already have our
[03:42:11] schema I just want to add some
[03:42:12] validation to that particular schema so
[03:42:14] inside of our schema I'm going to add a
[03:42:16] statement for refining that schema so if
[03:42:18] we look at this code all I'm doing is
[03:42:19] I'm checking okay do I have a coupon
[03:42:21] that essentially means that my coupon is
[03:42:22] not n and the length is greater than
[03:42:24] zero also do I have a discount code
[03:42:26] which means it's not equal to null as
[03:42:27] well essentially what I'm saying is if I
[03:42:29] have a coupon code and I do not have a
[03:42:31] discount then throw an error and I just
[03:42:33] want to say a discount is required and I
[03:42:35] want to put that at the root level and
[03:42:37] the reason I put that at the root level
[03:42:38] is because when I render out my form
[03:42:40] message if I pull this down and look
[03:42:42] down here I'm rendering it at that root
[03:42:44] level so now if I were to try to save
[03:42:47] this I can actually demonstrate that by
[03:42:49] deleting the discount having a coupon
[03:42:50] I'll refresh my page so I get the most
[03:42:52] upto-date information put a coupon on
[03:42:54] here click save immediately I get an
[03:42:56] error a discount is required if a coupon
[03:42:58] code is provided as soon as I put in a
[03:42:59] discount and then I reclick save you can
[03:43:01] see that error goes away and it tries to
[03:43:03] save my form but of course we're not
[03:43:04] doing anything when we save our form so
[03:43:06] that is our next step now this saving
[03:43:08] code should probably look pretty
[03:43:09] familiar to you I'll just paste it in
[03:43:10] we're going to call this update country
[03:43:12] discounts function which we'll create in
[03:43:14] just a second and then we're going to
[03:43:15] make sure that we've render out a toast
[03:43:17] message depending on if we have a
[03:43:18] success or an error State given back to
[03:43:20] us so I'll come all the way up to the
[03:43:23] top make sure I say const toast equals
[03:43:26] use toast there we go so now we actually
[03:43:28] are able to render out toast messages
[03:43:30] now we can work on creating this update
[03:43:31] country discounts so we're going to go
[03:43:33] into the actions section so inside of
[03:43:36] our server our actions for our
[03:43:39] product export an async function which
[03:43:42] is called update Country discount and
[03:43:45] for the parameters I'm just going to
[03:43:46] copy those over so you don't have to
[03:43:48] watch me type them it's going to take in
[03:43:49] an ID and it's going to take in all of
[03:43:51] our schema data then we can do the same
[03:43:53] thing we've done for create and update
[03:43:54] and all those other ones I'll just copy
[03:43:56] this down we essentially wanted to First
[03:43:59] compare this to our schema parse the
[03:44:01] data and if it's correct we get our data
[03:44:03] otherwise we're going to throw an error
[03:44:04] message there is an error
[03:44:06] saving your country discounts there we
[03:44:10] go then after that we can create our
[03:44:13] insert data and our delete data so this
[03:44:15] is going to be a little bit complicated
[03:44:16] I'll paste down the code and then
[03:44:18] explain exactly what's going on in just
[03:44:20] a second so for each of our country
[03:44:22] codes whenever we submit our form we're
[03:44:24] going to be submitting this entire form
[03:44:25] so we're going to submit every single
[03:44:27] group with every single discount and
[03:44:28] every single coupon code and we just
[03:44:30] need to check okay is there a coupon and
[03:44:33] a discount then we need to insert this
[03:44:35] data into our database and if there is
[03:44:36] not a coupon or not a discount we need
[03:44:39] to delete that information from the
[03:44:40] database wherever it exists so that's
[03:44:42] what this is doing I'm first getting all
[03:44:43] the rows to insert and then I'm getting
[03:44:45] all the rows to delete so first of all
[03:44:47] the insert data I can come down here and
[03:44:49] for each one of my groups of data so
[03:44:51] each one of these cards that has a
[03:44:53] coupon and a code and a group number I'm
[03:44:55] first checking is my coupon equal to
[03:44:57] null or my length or my discount
[03:44:59] percentage or my discount percentage
[03:45:01] essentially do I have a coupon and do I
[03:45:03] have a discount percentage if I do
[03:45:05] insert this into my insert data where
[03:45:06] I'm just inserting my group ID my coupon
[03:45:09] my discount percentage of my product and
[03:45:11] again I'm converting that discount
[03:45:12] percentage to a number between 0 and 100
[03:45:15] so if I have a coupon and a discount
[03:45:17] percentage add that to the insert rows
[03:45:19] otherwise just add the ID that I want to
[03:45:21] delete to the delete row then what we
[03:45:23] can do is we can actually call our
[03:45:24] database and we can do all of our
[03:45:25] inserts and we can do all of our deletes
[03:45:27] and some of these inserts might actually
[03:45:29] be updates it really depends so then
[03:45:30] after we get all of our data grouped
[03:45:32] between inserts and deletes we then need
[03:45:34] to call the update country discounts
[03:45:37] function from our database again because
[03:45:38] we're essentially doing the same thing
[03:45:40] we've done up here update country
[03:45:43] discounts and I want to call the
[03:45:45] database version again just calling out
[03:45:46] to that database to handle all the
[03:45:48] database stuff for us and inside here I
[03:45:50] want to get all of my delete groups I
[03:45:52] want to get all of my insert groups so
[03:45:53] we're going to say insert just like that
[03:45:56] and then finally I want to pass it along
[03:45:58] the product
[03:46:00] ID and I want to pass it along my user
[03:46:02] id as well so the product ID I know is
[03:46:05] just ID just like that and I already got
[03:46:06] my user ID at the top all the way up
[03:46:08] here and that's just to make sure we
[03:46:10] have all of our different validation and
[03:46:11] stuff in place and I can just await this
[03:46:13] function now I need to create this
[03:46:15] function so we're just going to go to
[03:46:16] the file where that function will be
[03:46:18] defined that's inside of here export an
[03:46:22] async function with that particular name
[03:46:25] I'm going to copy over the actual data
[03:46:27] types for the things we're inserting
[03:46:28] into the data so give that a quick save
[03:46:31] there you can see we have our delete
[03:46:32] Group which is just an array of IDs we
[03:46:34] have our insert Group which is just an
[03:46:35] array of insert data and we have our
[03:46:37] product and user ID now inside of here
[03:46:40] first I want to get our product so we
[03:46:41] can get our product and if they don't
[03:46:43] have a product then we want to
[03:46:44] essentially return null or return false
[03:46:46] or something we'll just return false or
[03:46:48] whatever and just saying hey we could
[03:46:49] not update any of this information
[03:46:51] because you don't have access to this
[03:46:53] product if you do have access to this
[03:46:55] product though then what I want to do is
[03:46:56] I want to create a batch so I'm going to
[03:46:58] create a bunch of statements which is
[03:47:00] batch items and these are going to be of
[03:47:02] the type PG because we're doing
[03:47:04] postgress data here I'm going to get an
[03:47:06] array of those and I'm going to set it
[03:47:07] equal to an empty array then what I'm
[03:47:09] going to do is if I have anything to
[03:47:12] delete so if my delete group is not
[03:47:13] equal to null
[03:47:15] and my delete group.
[03:47:18] length is greater than zero then I know
[03:47:21] I have data that I want to delete of
[03:47:23] course these should not be able to be
[03:47:24] undefined I don't know why I have that
[03:47:25] set to be undefined so we're going to
[03:47:27] remove that and essentially we can just
[03:47:28] check if our length is greater than zero
[03:47:31] then I want to run code to delete
[03:47:33] information so inside my statements I'm
[03:47:35] going to push a new database query so
[03:47:37] we'll say db. delete I want to do a
[03:47:40] delete from my country group discount
[03:47:43] table and I I want to do it where
[03:47:45] specifically certain criteria is true so
[03:47:48] I want to do an and query here I want to
[03:47:50] do it where my country group discount.
[03:47:53] product ID is equal to the product ID
[03:47:55] that I pass in so first of all for the
[03:47:58] product that I'm currently editing I
[03:47:59] want to be able to do that particular
[03:48:01] row and I want to make sure that in an
[03:48:04] array I want to check my country group
[03:48:06] discount table ID for the group and I
[03:48:09] want to check to see if that's in my
[03:48:11] deleted group array so for each one of
[03:48:13] these I'm going to map them to just
[03:48:14] getting the individual ID so group is
[03:48:17] group. country group ID so what this
[03:48:20] code is doing right here is I'm deleting
[03:48:22] all of the rows from my discount table
[03:48:24] for this particular product where the ID
[03:48:27] for the group is inside the array of
[03:48:29] deleting IDs that I want so essentially
[03:48:31] everything I marked as deletion is going
[03:48:32] to get deleted inside of this statement
[03:48:35] then the next thing I can do is handle
[03:48:36] my insert group so if my insert group.
[03:48:39] length is greater than zero then I want
[03:48:43] to run a bunch of insert code and put
[03:48:45] push that into my statements so
[03:48:47] statements.
[03:48:48] push DB do this one's going to be an
[03:48:51] insert in my country group discount
[03:48:53] table the values is just going to be
[03:48:55] whatever my insert data is so I think I
[03:48:58] call the insert group and then if
[03:49:00] there's a conflict I want to do a
[03:49:01] specific update to this information so
[03:49:03] let me make sure I get my parentheses in
[03:49:05] the right place and then I'll explain
[03:49:07] exactly what this particular line of
[03:49:08] code is doing so on conflict if for
[03:49:10] example I already have a row in my
[03:49:12] database for this product ID and this
[03:49:14] country ID well then I just want to
[03:49:16] update my coupon and update my discount
[03:49:18] percentage that's all this is doing so
[03:49:20] it's inserting new rows but if there's
[03:49:21] already rows for that group and that
[03:49:23] product then I just want to update the
[03:49:25] coupon and discount that I added into
[03:49:26] that section so now I've essentially
[03:49:29] created my two statements and if my
[03:49:31] statements. length is greater than
[03:49:36] zero there we
[03:49:38] go greater than zero well then I want to
[03:49:41] run some code so I can say db. batch
[03:49:43] that's going to run all my code going to
[03:49:45] pass in my
[03:49:47] statements now this will give me a
[03:49:48] typescript error because this expects
[03:49:50] the element to have at least one thing
[03:49:52] in the array we've already checked for
[03:49:53] that so I can just essentially cast this
[03:49:56] to be batch
[03:49:57] item of whoops PG just like that and
[03:50:02] that's essentially telling typescript I
[03:50:03] know that this element has at least one
[03:50:05] value in the array once that's done we
[03:50:07] can revalidate our
[03:50:09] cash we know what the tag for this is
[03:50:11] going to be is going to be cach
[03:50:15] tag. product because anything on the
[03:50:17] product edit page I consider a product
[03:50:20] user ID and the ID is our product ID
[03:50:24] then what we can do is we can return any
[03:50:25] type of validation that we want from
[03:50:27] here so for
[03:50:28] example equals this
[03:50:32] information this is going to return an
[03:50:34] array of data actually so we can get
[03:50:36] from the first one our row
[03:50:38] count and the second one is going to be
[03:50:41] a row count value as well but honestly
[03:50:43] we really don't care about this
[03:50:45] information we know that if we ran
[03:50:46] through all this code that's really all
[03:50:48] that we care about it being successful
[03:50:49] we don't care about anything else so
[03:50:51] back in our actions where we had all of
[03:50:53] our code inside here we should see that
[03:50:55] we don't have any errors I just want to
[03:50:56] make sure I spelled all this right
[03:50:58] update discounts DB looks like I did
[03:51:01] spell that incorrectly so inside of the
[03:51:03] database this should not have DB inside
[03:51:05] of it there we go that cleansed up our
[03:51:07] code in here so this is working now here
[03:51:09] we can import this from the actions just
[03:51:12] like that that should be the action one
[03:51:13] that I imported looks like it is and
[03:51:16] that should be working just fine and
[03:51:17] this is going to return to some data but
[03:51:19] it says that this data could be
[03:51:20] undefined so we'll make sure that the
[03:51:22] data is not undefined by at the very
[03:51:24] bottom here after this runs we want to
[03:51:27] return error false and then we can put
[03:51:29] down a message that says country
[03:51:30] discounts saved so if we give all of
[03:51:32] this a save come over here refresh our
[03:51:35] page we should be able to actually set
[03:51:36] some coupons so let's say that this
[03:51:38] one's going to be C1 for our 60% down
[03:51:41] here for 40% we'll set that to C2 let's
[03:51:43] actually change it to 32% and down here
[03:51:45] we'll create a brand new one with a C3
[03:51:48] value so we should hopefully see all
[03:51:50] these different values when we click
[03:51:51] save you can see it says our country
[03:51:53] discount saved we'll refresh our page go
[03:51:55] back to here C1 was saved for 60% C2 at
[03:51:58] 32% and C3 at 12 and if I change this to
[03:52:01] be like 2% and I resave you can see when
[03:52:04] I refresh my page it'll go through and
[03:52:06] it'll properly update this that's why we
[03:52:08] have that on conflict due update
[03:52:10] statement so now we can finally move on
[03:52:11] to the final tab this one's quite a bit
[03:52:13] easier don't worry this this country one
[03:52:15] was by far the most confusing so what we
[03:52:17] can do is we can go back to our edit
[03:52:18] page I'm going to paste in essentially
[03:52:21] the section for customization I'll
[03:52:22] comment out the things that we are not
[03:52:24] able to handle right now because we're
[03:52:26] going to get to them in just a little
[03:52:27] bit but essentially it's the same thing
[03:52:29] we're rendering out a card with all of
[03:52:30] our information and we're getting all
[03:52:31] the stuff from our database and
[03:52:32] rendering it out the form so if we give
[03:52:34] that a save refresh our page you'll see
[03:52:36] if I actually make sure I use this
[03:52:38] customization tab up
[03:52:41] here import the information we need
[03:52:43] which is our product ID so we can get
[03:52:46] that from our product ID and our user
[03:52:49] ID user ID now you can see it says
[03:52:52] Banner customization and obviously we
[03:52:54] can get our information from our
[03:52:55] database so the very first thing I want
[03:52:57] to do is handle getting our product
[03:52:59] customization from the database based on
[03:53:00] our product and user ID and again we're
[03:53:03] going back to the exact same database
[03:53:04] file to implement this function so
[03:53:07] export function paste in the name here
[03:53:11] this is taking in the exact same props
[03:53:13] and it's essentially doing the exact
[03:53:14] same same thing as this
[03:53:16] function paste that down there we go so
[03:53:19] all we're needed to do is just call the
[03:53:21] internal version of this
[03:53:23] function there we go now again I'm not
[03:53:27] sure what I'm going to need for my tags
[03:53:29] just because I haven't written this
[03:53:30] function yet but I'm pretty certain all
[03:53:32] we're going to be doing is updating
[03:53:33] information from our product so I'm
[03:53:34] going to put the ID tag for the product
[03:53:36] we'll come back to that if we need to
[03:53:37] update it now we can come down to the
[03:53:39] bottom here and we can put in that
[03:53:41] function if we want async function get
[03:53:44] the name of it and again the props are
[03:53:46] the same as this one so I'm just going
[03:53:47] to copy the props over so we don't have
[03:53:49] to type those out there we go now this
[03:53:51] function is incredibly straightforward
[03:53:53] because all we're doing is we're just
[03:53:54] quering our product table and getting
[03:53:56] the very first product for our product
[03:53:58] ID and our user ID and we're returning
[03:54:01] with that our product customization that
[03:54:03] straightforward then what we can do is
[03:54:05] we can return our data. product
[03:54:08] customization and if our data is null
[03:54:10] it'll Return To Us null here so really
[03:54:12] all the code we're doing right here
[03:54:14] minus this wi section right here is
[03:54:15] exactly the same as getting a product
[03:54:17] we're just making sure we're tagging on
[03:54:19] the product customization and returning
[03:54:20] only the product customization from that
[03:54:22] section so that gives us our product
[03:54:24] customization that was by far the
[03:54:26] easiest thing we've done in a while and
[03:54:28] here we can just make sure we import
[03:54:29] that function and we'll now have access
[03:54:31] to that customization and if it's null
[03:54:33] we return not found but again this
[03:54:35] should not be null now the next thing we
[03:54:37] need to focus on is how we deal with
[03:54:39] permissions this is kind of something
[03:54:40] we've been ignoring up until this point
[03:54:42] and to really focus in on the customer
[03:54:44] ization section we need to focus on
[03:54:46] permissions because there is a
[03:54:47] permission for being able to remove The
[03:54:48] Branding from this and luckily I have a
[03:54:51] really bulletproof and easy way to
[03:54:52] handle permissions that I'm going to
[03:54:53] show you right now so the first thing I
[03:54:55] want to do is inside of a folder for my
[03:54:57] server so we'll go all the way down to
[03:54:59] our server folder create a brand new
[03:55:00] file called permissions. TS and inside
[03:55:04] this permissions function I'm
[03:55:05] essentially going to export a bunch of
[03:55:07] asynchronous functions for what we want
[03:55:08] to do so in our case async
[03:55:11] function can remove
[03:55:15] branding there we go and this is going
[03:55:16] to take in the user ID which is a string
[03:55:19] so I'm just saying hey can this
[03:55:20] particular person remove The Branding
[03:55:23] well the first thing I need to do is if
[03:55:24] my user ID is equal to null then I'm
[03:55:27] going to return false and I'm going to
[03:55:29] make sure that this could be also null
[03:55:31] this is just making it easier for me to
[03:55:32] actually call this function because if I
[03:55:34] don't have a user ID it'll always return
[03:55:36] false this again is just a yease of use
[03:55:38] thing then what I can do is I can get
[03:55:40] the tier for the particular user that we
[03:55:42] stored in our database so we can call
[03:55:44] user subscription tier with our user ID
[03:55:48] we need to create this function inside
[03:55:50] of that DB folder here so we have a
[03:55:52] create function we need to get a
[03:55:55] function for getting a particular tier
[03:55:58] and this takes the user ID which is a
[03:56:01] string now this function is actually
[03:56:02] going to piggy back off of a second
[03:56:04] function I'm going to create called get
[03:56:05] user subscription and this will allow us
[03:56:07] to get just an overall users
[03:56:09] subscription and this again is going to
[03:56:11] be just like all the other stuff that
[03:56:13] we've done in inside of our application
[03:56:15] where we have an internal version of it
[03:56:17] so function just like this user ID which
[03:56:20] is a
[03:56:21] string and this get user subscription
[03:56:23] tier is essentially just going to call
[03:56:25] get user subscription and give us just
[03:56:26] the tier portion of it so I'll actually
[03:56:28] show you exactly what that code looks
[03:56:29] like we're going to get the subscription
[03:56:31] from here and we're going to get the
[03:56:32] tier and return that to the user based
[03:56:34] on our subscription tiers so our
[03:56:36] subscription tiers if you don't remember
[03:56:38] properly is all of our different tiers
[03:56:39] free paid and so on and it includes
[03:56:41] information like can I remove the
[03:56:43] branding can I customize the banner and
[03:56:45] so on so that's essentially what this
[03:56:47] entire section is going to be talking
[03:56:48] about now to get this code to work we
[03:56:49] need to make get user subscription work
[03:56:51] by making get user subscription internal
[03:56:53] work so this function is actually a
[03:56:55] relatively easy function we're just
[03:56:56] going to return db. query and we want to
[03:56:59] query our user subscription table we
[03:57:01] want to find the very first one where
[03:57:05] let me make sure I pass in all the
[03:57:06] information we're going to need into
[03:57:08] here we want to get our clerk user ID
[03:57:12] and the equal functions and we're going
[03:57:14] to check to see if the clerk user ID is
[03:57:17] equal to our user ID so just give me the
[03:57:19] user subscription for this particular
[03:57:21] user then inside of here we're just
[03:57:23] returning that information and we're
[03:57:24] caching it based on the user tag just
[03:57:26] like that and then if we come down here
[03:57:29] you can see we get our user subscription
[03:57:31] tier all we're doing is getting the
[03:57:32] subscription if it's null we're throwing
[03:57:34] an error because they should not have a
[03:57:35] null subscription and then otherwise
[03:57:37] we're getting all the data for that
[03:57:38] subscription based on the tier free
[03:57:40] basic and so on so now back into my
[03:57:43] permissions when I call that function
[03:57:45] now I have this tier that has all the
[03:57:46] information on what they can and cannot
[03:57:48] do so I can just call this and return
[03:57:51] can they remove branding that's as easy
[03:57:53] as this function gets it's actually so
[03:57:54] straightforward that the next two
[03:57:55] functions for customizing the banner and
[03:57:58] accessing the analytics are the exact
[03:58:00] same lines of code the only thing that
[03:58:02] changes between them is what I call down
[03:58:04] here is it can access analytics can
[03:58:06] customize Banner or can remove branding
[03:58:08] so that's what I need to do for this
[03:58:09] basic set of permissions now back over
[03:58:11] to here I can just call that function
[03:58:12] with my user ID and now I know what
[03:58:14] whether or not I can remove this or not
[03:58:16] same thing down here if I comment this
[03:58:18] in I have the can customize Banner
[03:58:19] function again I call that and I can see
[03:58:22] whether or not I can actually customize
[03:58:23] this and I can even move this await
[03:58:24] statement into here if I really want to
[03:58:26] just like that relatively
[03:58:27] straightforward now I just need to
[03:58:29] create my form itself so inside my forms
[03:58:32] let's create a brand new and actually
[03:58:33] our final form for the entire project
[03:58:37] customization form.
[03:58:39] TSX I'm going to paste down the typing
[03:58:42] information because again this is not
[03:58:43] super important for you to learn how to
[03:58:45] type out this is just all the different
[03:58:47] things that we're passing into this
[03:58:48] particular function that we want to use
[03:58:50] now before we go ahead implementing this
[03:58:51] function what I want to do is first
[03:58:53] import this here so at at least know
[03:58:55] that that is working you can see all the
[03:58:57] errors were removed which is great now
[03:58:59] if I refresh this page you can see it
[03:59:01] renders obviously there's nothing in our
[03:59:02] form but it's working now if we go over
[03:59:04] and to our schema we're going to be
[03:59:06] implementing the last and final schema
[03:59:08] of our entire project as well and that's
[03:59:09] the product customization schema this
[03:59:11] one's super easy essentially we want to
[03:59:13] build to modify the class prefix
[03:59:15] background color text color font size
[03:59:17] message that's showing up Banner
[03:59:18] container and whether or not it is
[03:59:20] sticky that's how easy this entire thing
[03:59:22] is now if we go back down to our form we
[03:59:24] can use this schema just like we've done
[03:59:26] with all of our other forms so we can
[03:59:28] use the use form hook just like we were
[03:59:30] using before I'll make sure to import
[03:59:32] that I'll import the Zod resolver and
[03:59:34] I'll import our schema as well as you
[03:59:37] can see here we're using that hook for
[03:59:39] used form we're passing along our schema
[03:59:41] and our default value is just all of our
[03:59:43] customization and if our class prefix is
[03:59:45] null since this is the only thing that
[03:59:46] can be null we're converting it to an
[03:59:48] empty string so it works properly inside
[03:59:49] of our form now we have our form let's
[03:59:52] go ahead and get an async function
[03:59:54] called onsubmit and this onsubmit
[03:59:57] function just takes this as our type so
[03:59:59] we're going to have data actually I
[04:00:01] think we call it values there we go and
[04:00:05] then inside of here we can do whatever
[04:00:06] we want console log our values for now
[04:00:08] it doesn't really matter then what we
[04:00:10] can do is we can go ahead and Define our
[04:00:12] form just like we've done in the entire
[04:00:14] rest of our application get that from
[04:00:15] the right place pass in all of our form
[04:00:21] data there we go and then we need to
[04:00:23] render out the actual form component
[04:00:24] itself with all of its different props
[04:00:27] and these props are pretty much the same
[04:00:29] props we've been using the only
[04:00:30] difference is I added a margin top of
[04:00:32] eight and I also have things being laid
[04:00:34] out in the column direction for Flex
[04:00:35] actually that's the same as before but
[04:00:37] the only difference is a margin on the
[04:00:38] top of eight and that's cuz I want to
[04:00:39] put a banner at the top of this section
[04:00:42] so I want to show you like what the
[04:00:43] banner is going to look like this is
[04:00:45] essentially going to be our Banner for
[04:00:46] now it'll just be an H1 that says banner
[04:00:49] and right now none of this is working
[04:00:50] because it needs to be a client
[04:00:53] component there we go so now you can see
[04:00:55] we have our Banner showing up which will
[04:00:57] happen in a bit and then we have our
[04:00:59] form so for our form it's going to be
[04:01:01] broken into two halves so we're going to
[04:01:03] use a grid with a gap of eight grid
[04:01:05] columns is going to be one on small
[04:01:07] screen sizes or on larger screen sizes
[04:01:10] we'll set the columns to two and then on
[04:01:13] our left hand side side we're going to
[04:01:14] have essentially our giant message so
[04:01:16] div here with a class of flex and
[04:01:19] actually I can completely remove this
[04:01:20] div because we only have one thing on
[04:01:21] the side and that is our form field and
[04:01:24] our form field is going to obviously
[04:01:26] have our normal properties of control
[04:01:28] which is our form. control we're also
[04:01:30] going to have our name and this is going
[04:01:32] to be our location message and then
[04:01:34] finally our render prop for rendering
[04:01:36] out our field so
[04:01:38] field render this out and inside of this
[04:01:41] particular field if I make sure I spell
[04:01:43] everything properly
[04:01:44] we have our form item there we go inside
[04:01:48] of here we have our form label which is
[04:01:50] our PPP discount message then after that
[04:01:55] we're going to have essentially a star
[04:01:57] that we're going to call our required
[04:01:59] label icon this is something I should
[04:02:00] have also put in the details section
[04:02:02] because the name the URL are required so
[04:02:04] let's go ahead and create this real
[04:02:06] quick while we can it's a rather simple
[04:02:07] component this is something we can use
[04:02:09] anywhere in our application so I'm going
[04:02:10] to put it in my normal components folder
[04:02:12] here required label icon.
[04:02:16] TSX just like that it takes in no props
[04:02:20] at all other than it can take in any
[04:02:22] props really so we'll say class
[04:02:24] name and we'll say all the additional
[04:02:26] props and that's just because I want
[04:02:28] this to be all of the props that you
[04:02:29] would normally get with the asterisk
[04:02:31] icon which is the icon that I'm going to
[04:02:33] use so here this is just saying give me
[04:02:35] all of the normal props that the
[04:02:37] asterisk icon can use and that's because
[04:02:40] inside of here I'm just going to return
[04:02:41] an asterisk icon and I'm going to pass
[04:02:44] in all of those props and I'm also going
[04:02:47] to pass in a class name and this is
[04:02:48] where I'm going to Define my own custom
[04:02:50] class names so CN this is going to be
[04:02:52] text destructive it's going to be inline
[04:02:55] a size of three and I want to align this
[04:02:57] on the top finally I want to pass in
[04:03:00] what additional class names are passed
[04:03:02] into this function so all this is doing
[04:03:04] is rendering out a red Aster icon with
[04:03:06] the ability to customize further if
[04:03:08] needed so now I can put that icon into
[04:03:10] there and there we go that should be all
[04:03:12] I need I'm just going to put it directly
[04:03:13] inside my form label I'm also going to
[04:03:15] go back to my details form and add this
[04:03:17] in there as well so this description is
[04:03:20] optional so inside of here the name
[04:03:22] that's required and the URL here is
[04:03:25] required import that give it a save and
[04:03:28] now you can see we get this nice red
[04:03:29] asteris for those things that are
[04:03:31] required which is great now we can go
[04:03:33] back to the customization form and
[04:03:34] finish this out so underneath our label
[04:03:36] we're going to have our form control and
[04:03:38] inside this form control we're going to
[04:03:40] have a text area and this text area is
[04:03:43] going to be disable if we cannot
[04:03:44] customize our Banner so we have our can
[04:03:48] customize Banner if we can't it's going
[04:03:49] to be disabled we're going to have a
[04:03:51] class name here which is a Min h of 20
[04:03:53] resize none and then finally all of my
[04:03:56] different field props just like that
[04:03:59] close off the text area and now you can
[04:04:01] see we have this text area shown up and
[04:04:02] it's disabled because I currently cannot
[04:04:04] edit this because of the particular tier
[04:04:06] that I'm working with so we have our
[04:04:07] form control then we're going to do our
[04:04:09] form description and the form
[04:04:11] description here I'm just going to copy
[04:04:13] over all this says is that the different
[04:04:15] data parameters that you can use so here
[04:04:16] it's saying that country coupon and
[04:04:18] discount are going to be replaced with
[04:04:19] their respective actual real world
[04:04:21] values so this is the left hand side of
[04:04:23] our entire thing when we're on a larger
[04:04:25] screen size now I want to work on the
[04:04:27] right hand side of our entire section
[04:04:29] which is going to be a div for all the
[04:04:30] rest of our inputs so let's give it a
[04:04:32] class name of grid which is going to be
[04:04:34] grid Columns of one on small screen
[04:04:37] sizes and a grid Columns of two on
[04:04:39] larger screen sizes with a gap of six
[04:04:41] between them we'll close that off and
[04:04:44] then inside here we're just going to put
[04:04:45] a bunch of different form Fields so I'll
[04:04:46] show you exactly what I'm talking about
[04:04:48] this form field is for the background
[04:04:49] color we just need to make sure we
[04:04:51] import the input function and our form
[04:04:53] message function and that should be all
[04:04:55] we need I believe I imported the wrong
[04:04:57] input so it looks like yes I did let's
[04:05:00] make sure I import the correct one this
[04:05:02] time there we go that gets rid of all
[04:05:03] the errors and here all we're doing
[04:05:05] setting out the background color the
[04:05:06] label is background color and the input
[04:05:08] is this so here you can see we can
[04:05:09] customize the background color if we had
[04:05:11] permission now I'm just going to copy
[04:05:13] down
[04:05:14] the rest of these that are really
[04:05:15] straightforward so here's two more that
[04:05:17] are super straightforward text color and
[04:05:19] font size again super straightforward
[04:05:21] inputs that require no additional stuff
[04:05:23] the next one is going to be slightly
[04:05:25] more complicated because it requires a
[04:05:26] new component that is this switch
[04:05:28] component right here so what I'm going
[04:05:30] to do is go to Shad CN npx Shad CN at
[04:05:34] latest and we want to add the switch
[04:05:37] component just like that that should
[04:05:39] install the brand new Switch component
[04:05:40] for us which we can use there we go so
[04:05:43] let's import that component and all I
[04:05:45] need to do is make sure the checked is
[04:05:46] set to my field value and on check
[04:05:48] change is set to the field.on change
[04:05:50] then I finally gave it a display a block
[04:05:52] so it shows up below my label so if we
[04:05:54] go to customize here and I make sure
[04:05:56] that this is saved I need to refresh my
[04:05:58] page to get it to work there we go you
[04:06:00] can see now I have this sticky icon that
[04:06:02] I could actually toggle one way or the
[04:06:04] other now the last couple things that I
[04:06:06] need are again going to be super
[04:06:07] straightforward inputs that we've done
[04:06:09] before so we have a B Banner container
[04:06:11] the only difference about this one is I
[04:06:12] have description telling people what
[04:06:14] this actually Associates with this is
[04:06:16] just the HTML container where the thing
[04:06:17] is stored by default it's the body and
[04:06:19] then finally we have our class prefects
[04:06:21] which again I have a small description
[04:06:22] telling people what this actually does
[04:06:24] now lastly at the very bottom of my form
[04:06:26] just like before I'm going to be adding
[04:06:27] a button that lets me save this but only
[04:06:30] if I can customize the banner will I
[04:06:31] show this button so right now I'm not
[04:06:33] showing the button now to test what this
[04:06:35] would look like if I could do
[04:06:36] customization what I'm going to do is go
[04:06:39] back to my edit page here and instead of
[04:06:41] passing in this I'm just going to pass
[04:06:42] in true so I'm going to say or true so
[04:06:45] that means no matter what I can always
[04:06:46] customize my banner and now you can see
[04:06:48] I have the ability to fully customize
[04:06:50] every single thing inside of this which
[04:06:52] is great now the only thing that we
[04:06:53] really have left to do besides actually
[04:06:54] make the saving of the form work is to
[04:06:56] work on implementing what the banner is
[04:06:58] going to look like up here because I
[04:06:59] actually want to import this as a
[04:07:01] component called Banner that's going to
[04:07:03] show all the information that we want to
[04:07:04] show so I'm going to create this
[04:07:06] component in my component folder banner.
[04:07:09] TSX export function Banner just like
[04:07:13] that now this Banner takes in a lot of
[04:07:14] props I'm going to paste in what the
[04:07:16] props are going to be essentially we
[04:07:17] have a message that's the message I want
[04:07:19] to show in our case this is the message
[04:07:21] right here I then have a prop for if I
[04:07:23] can remove The Branding or not because
[04:07:25] based on what tier I sign up for I may
[04:07:27] or may not have a branding message
[04:07:28] showing up that says hey check out easy
[04:07:30] PPP this company that created this
[04:07:32] actual Banner that you see then I have
[04:07:34] mappings that allows me to associate
[04:07:36] these Dynamic values with the real
[04:07:37] values so what should coupon be what
[04:07:39] should discount be and what should
[04:07:40] country be and then finally I have this
[04:07:42] customization and Country obviously
[04:07:44] should be required then I have this
[04:07:46] customization section which is just all
[04:07:47] the different customization fields on
[04:07:49] what everything should look like now the
[04:07:51] first thing that I want to do is I want
[04:07:52] to get the prefix that I'm going to use
[04:07:54] for my CSS so my prefix is just going to
[04:07:56] be my
[04:07:58] customizations do class prefix or it's
[04:08:01] going to be equal to an empty string
[04:08:03] then I want to get my message but I want
[04:08:05] to make sure it's mapped to the correct
[04:08:07] values so I can take my entire object.
[04:08:10] entries of my mappings so I'm
[04:08:13] essentially converting this object into
[04:08:15] an array and then I can reduce this
[04:08:16] array into a real message so let's make
[04:08:19] this a little bit easier to see by
[04:08:21] minimizing our screen down so we look at
[04:08:22] just this particular section so in this
[04:08:25] I'm going to have my mapped message and
[04:08:27] then I'm going to have a key and a value
[04:08:29] that come for my mapping so what I want
[04:08:31] to do is I want to make sure I call this
[04:08:33] into a function and here I want to take
[04:08:35] my mapped message and all I want to do
[04:08:38] is I want to
[04:08:39] replace anything that has the star key
[04:08:44] or not star that anything that is
[04:08:46] wrapped in Brackets followed by whatever
[04:08:47] my key is so coupon wrapped in Brackets
[04:08:49] discount wrapped in Brackets country
[04:08:51] wrapped in Brackets and so on I want to
[04:08:52] replace that with whatever the real
[04:08:54] value is so I want to call replace on
[04:08:57] this and to make sure that this starts
[04:08:58] with my normal message I'm going to put
[04:09:00] my normal message in here and I'm going
[04:09:02] to replace any apostrophe inside of here
[04:09:05] so any apostrophe like that I'm going to
[04:09:07] replace all of those with the HTML
[04:09:10] version of them the reason for this is
[04:09:12] because I'm actually going to convert
[04:09:13] this entire component to a string and if
[04:09:15] I have these weird strings already in my
[04:09:17] message I want to make sure those are
[04:09:19] removed and showing with the HTML
[04:09:20] version instead it'll just make
[04:09:22] everything flow better also I might as
[04:09:24] well while I'm here use this as a
[04:09:26] regular expression as well so I can use
[04:09:28] a regular expression with the G key
[04:09:30] right here to make sure that it's going
[04:09:32] to be for all of that and since I want
[04:09:33] to use Dynamic values I actually need to
[04:09:35] call new RX just like this I believe and
[04:09:38] pass it in the string version there we
[04:09:41] go and then I can close that off that
[04:09:45] should give me a new regular expression
[04:09:47] actually it's Rex
[04:09:51] XP there we go just like that and I
[04:09:54] believe I also have the ability to pass
[04:09:55] in any Flags I want which I want the
[04:09:57] global flag this allows me to put
[04:09:58] Dynamic values into there so this will
[04:10:00] do all my replacing for me so I'm going
[04:10:02] to get a message that's going to replace
[04:10:03] coupon discounted country with the
[04:10:05] actual real world values then I can
[04:10:08] return my actual jsx and this is going
[04:10:10] to be a little different than a normal
[04:10:11] component cuz this is the exact
[04:10:13] component I'm going to send down and
[04:10:14] render on other people's websites so I
[04:10:16] need to make sure all the styling and
[04:10:18] CSS is self-contained so to get started
[04:10:20] with here's the basic layout for what
[04:10:22] this is going to look like you'll notice
[04:10:23] all my class names are prefixed with
[04:10:25] this prefix and I have easy PPP
[04:10:27] container as the default value for the
[04:10:29] container same with here I have easy P
[04:10:31] message and the easy PPP branding all of
[04:10:34] that is styled just like this I'll make
[04:10:36] sure I get my inment variables imported
[04:10:38] from the client I also something that a
[04:10:40] lot of libraries don't do that provide
[04:10:42] overrides is I provide a override class
[04:10:44] that you can use that way your CSS
[04:10:46] Styles will always be more specific than
[04:10:48] my CSS Styles just to make overriding
[04:10:50] things so much easier now the reason
[04:10:53] that I mapped all these apostrophes to
[04:10:55] this actual Amper sand syntax is because
[04:10:58] I'm using this dangerously inner set
[04:11:00] inner HTML to set the actual message as
[04:11:03] my HTML inside this span again that's to
[04:11:06] make sure that it's going to be working
[04:11:07] properly with all these apostrophes and
[04:11:09] so on they're going to render out
[04:11:10] properly as actual HTML I wouldn't
[04:11:12] normally have to do but since I'm
[04:11:13] sending this down to other people's
[04:11:15] websites that's why I need this section
[04:11:17] then I have here if you cannot remove
[04:11:19] The Branding I have this section right
[04:11:20] here which is just a link directly back
[04:11:22] to my website and again I can't use an
[04:11:24] href or a link I'm sorry from nextjs
[04:11:26] because again I'm rendering this on
[04:11:27] other people's websites this needs to be
[04:11:29] as barebones as possible now the next
[04:11:31] thing I need to render out is all of the
[04:11:33] different styling code that I have and
[04:11:34] this is just how do I want to style this
[04:11:36] application so I'm going to copy this
[04:11:38] over and explain it in depth to tell you
[04:11:40] what's going on but it's overall really
[04:11:42] basic CSS the very first thing I'm doing
[04:11:44] for my container is I'm reverting all
[04:11:45] the Styles this is to make sure that
[04:11:47] every style that I have is going to be
[04:11:49] default I don't have any weird stuff
[04:11:50] inheriting from their stylesheet then
[04:11:52] I'm just making sure things are in the
[04:11:54] flex column Direction so it's stacked
[04:11:55] vertically I'm making sure my background
[04:11:57] color font size are all being set by the
[04:11:59] particular user's customization the font
[04:12:01] family is inheriting add a little bit of
[04:12:03] padding if they set it as sticky the
[04:12:05] position is set to Sticky and it's set
[04:12:07] to the top section and the text is in
[04:12:09] the center now for The Branding this is
[04:12:11] just a little bit different I have my
[04:12:13] color inheriting font size inheriting
[04:12:15] and I'm making this an inline block just
[04:12:16] so it shows up on a new line and then
[04:12:18] finally making it so it's underlined so
[04:12:19] I can easily see what the text looks
[04:12:21] like this essentially lets users know
[04:12:22] that this is an actual link and all of
[04:12:24] this is in a style tag again because I
[04:12:26] need to be able to import this into
[04:12:27] someone else's website that's why this
[04:12:29] component looks so funky but now I can
[04:12:31] go ahead and actually use this Banner
[04:12:33] right here so I'm just going to paste in
[04:12:34] what the banner will look like and you
[04:12:36] can see here that the banner is taking
[04:12:37] in a few different things first of all I
[04:12:39] need to get all my form values so that's
[04:12:41] actually really easy to do I can say
[04:12:42] form values is equal to calling watch
[04:12:45] just like that on my form and that's
[04:12:47] going to get all the values from my form
[04:12:49] then I'm going to set up a fake mapping
[04:12:50] so I'm going to say the country's India
[04:12:52] coupons half off discounts 50 just some
[04:12:54] fake mapping so that we can see what
[04:12:56] this would actually look like and then
[04:12:58] finally I have my customizations and
[04:13:00] whether or not they can remove The
[04:13:01] Branding to show that branding section
[04:13:03] or not so I'm going to give that a quick
[04:13:04] save give my banner a quick save and now
[04:13:06] if we scroll over here you can see
[04:13:08] exactly what the banner will look like
[04:13:09] on their website now even when I click
[04:13:12] on it brings me directly to to this
[04:13:13] homepage when I click on that link so
[04:13:14] you can see this link is right there
[04:13:16] because they are required to show
[04:13:17] branding now if I go ahead and I
[04:13:19] actually change whether or not they need
[04:13:20] to show branding or not so for example
[04:13:22] in the section where it says can remove
[04:13:24] branding if I set that to
[04:13:26] True you'll see that if I give it a
[04:13:28] quick refresh that branding has been
[04:13:30] removed so again this is all set up
[04:13:31] based on our permissions and again I'm
[04:13:33] going to remove this permission for
[04:13:35] customization in a little bit but for
[04:13:36] now I'm going to allow myself to
[04:13:37] customize so we can actually see if
[04:13:39] saving this information will work so now
[04:13:41] you can see the banner and when I change
[04:13:42] information it live updates which is
[04:13:44] exactly what we want so now let's go
[04:13:46] ahead and make it so we can save this
[04:13:47] information and then work on permissions
[04:13:49] so the very first thing that we need to
[04:13:50] do make this a lot bigger so we can work
[04:13:52] on it and wherever we are actually doing
[04:13:54] our product customization form in our
[04:13:56] onsubmit we obviously need to call some
[04:13:58] update
[04:14:01] product
[04:14:03] customization
[04:14:05] function there we go we're going need to
[04:14:07] pass it in our values. product ID
[04:14:10] actually that's coming from
[04:14:11] customization
[04:14:13] product ID and then our values so we
[04:14:15] know which product we're doing this on
[04:14:17] and where our specific values are and
[04:14:19] then again inside of our actions we need
[04:14:21] to create this action I'm just going to
[04:14:23] paste it down because this is pretty
[04:14:24] much the same thing we've done over and
[04:14:26] over again it's very straightforward you
[04:14:28] can see first we get the user then we
[04:14:30] make sure our data is correct and we
[04:14:31] check to see if they can do the
[04:14:33] customization based on those permissions
[04:14:35] for now I'm going to comment this out
[04:14:36] because we want to be able to test to
[04:14:37] see if this works so I'll just say that
[04:14:39] this is going to be true all the time
[04:14:41] we'll come back and fix this once we
[04:14:42] deal with per missions then I'm going to
[04:14:44] call this update product customization
[04:14:46] DB and if it was successful render out a
[04:14:48] message so all the way at the very top
[04:14:50] here let's make sure we import this
[04:14:53] function just like that and now we can
[04:14:55] go ahead and Implement that function so
[04:14:59] export async function that's going to be
[04:15:02] updating our product customizations just
[04:15:04] like that inside this function we're
[04:15:06] going to be passing it down the data as
[04:15:07] well as the product and user ID that
[04:15:09] we're going to be updating this
[04:15:11] information for then the next thing we
[04:15:13] need to do is we need to get our product
[04:15:15] if the product exists that means the
[04:15:16] user has permission to update it and in
[04:15:18] that particular scenario then we just
[04:15:20] want to call the really simple update
[04:15:21] code get our product customization pass
[04:15:23] it in all the data where the ID is set
[04:15:25] to the ID we passed in so this first
[04:15:27] line of code makes sure that the user
[04:15:28] that we're thinking about is the one
[04:15:30] that owns this product second line of
[04:15:32] code updates our actual database and
[04:15:34] then finally we just need to revalidate
[04:15:36] our cache so here we're just saying
[04:15:37] redate our product cache for this
[04:15:39] particular product and for this
[04:15:41] particular user so this code again
[04:15:43] relatively straightforward very similar
[04:15:45] to what we've done all over our
[04:15:46] application and once we get all these
[04:15:48] different building blocks in place as
[04:15:49] you can see it becomes rather easy to
[04:15:51] implement and write all these different
[04:15:52] functions and as you can see all this
[04:15:54] code is working as well the last step is
[04:15:56] just to make sure it actually works
[04:15:57] inside of the form itself so let's go
[04:15:59] back to the form and we can import this
[04:16:02] particular function just like that from
[04:16:03] the action version there we go that is
[04:16:05] the action version We implemented then
[04:16:07] what I want to do inside of here is I
[04:16:09] want to get my data by awaiting that
[04:16:11] information and then I just want to
[04:16:13] render out a message to the screen using
[04:16:15] toast again so const toast equals use
[04:16:19] toast there we go make sure I spell that
[04:16:21] properly and now we can render a message
[04:16:23] onto the screen whether or not it was a
[04:16:25] success or a failure so let's come over
[04:16:27] to here let's go ahead and we're going
[04:16:28] to change the font size to .5 RM very
[04:16:32] very small click save you can see it
[04:16:34] says it updated we'll refresh our page
[04:16:36] go back to the customization and you can
[04:16:37] see that that font size stayed really
[04:16:39] small so we know that this is working
[04:16:41] we'll just leave it at default though
[04:16:42] for for most part it really doesn't
[04:16:44] matter so let's go back again to our
[04:16:45] customization and now work on making
[04:16:47] sure that our actual permissions are
[04:16:49] correct so right now wherever we have
[04:16:52] the value of or true we need to change
[04:16:54] that so here this should obviously not
[04:16:56] be or true so now again all of this is
[04:16:59] disabled because we don't have
[04:16:59] permission and same thing here if we try
[04:17:01] to save without permission it should
[04:17:03] give us an error so now we cannot
[04:17:04] customize this page at all and we also
[04:17:07] should probably show the people that
[04:17:08] they do not have permission to access
[04:17:10] all this customization with a nice
[04:17:11] little custom message so inside of our
[04:17:13] form underneath of our Banner if they
[04:17:16] cannot customize the banner well then we
[04:17:18] should probably show them a message
[04:17:20] telling them that so we're going to put
[04:17:21] a div here with a class name put it some
[04:17:24] margin on the top just to give it a
[04:17:25] little space and we'll create something
[04:17:27] called a no permission card and this is
[04:17:30] a nice little card that we can put
[04:17:32] anywhere we want to tell people they
[04:17:33] don't have permission in a really nice
[04:17:34] and easy way so let's go into our
[04:17:36] components we'll create a no permission
[04:17:39] card. TSX and this is a very
[04:17:41] straightforward card as you can see here
[04:17:44] all it does is take in some children and
[04:17:45] by default the children say you did not
[04:17:47] have permission to perform this action
[04:17:48] try upgrading your account to access
[04:17:49] this feature the title of the card says
[04:17:51] permission denied we're rendering out
[04:17:53] the children as the description and then
[04:17:55] in the footer we have a link that goes
[04:17:56] to the subscription page so that they
[04:17:58] can upgrade their account and if we just
[04:17:59] come in here and take a look at that
[04:18:01] that would look like if I make sure to
[04:18:02] import that card just like that and save
[04:18:05] you can see we get permission denied you
[04:18:07] do not have permission to perform this
[04:18:08] action try upgrading your account to
[04:18:09] access this feature also you notice how
[04:18:11] our Banner is sticking to the the top
[04:18:13] that is intentional because we have
[04:18:14] sticky set to true but we don't really
[04:18:16] want that inside of our form here so I'm
[04:18:18] going just going to put this inside of a
[04:18:20] div and that means that it'll be stuck
[04:18:22] inside this div so now when I scroll you
[04:18:24] can see it doesn't actually stick to the
[04:18:25] top of the page because that's not
[04:18:26] really what we want Even though
[04:18:27] technically it is what we want we don't
[04:18:29] want it on this particular form now when
[04:18:31] I click upgrade account it'll bring me
[04:18:32] to the subscription page which we
[04:18:33] haven't worked on yet but right now we
[04:18:35] have pretty much everything related to
[04:18:37] products done and it may seem like it's
[04:18:38] taking a long time to get here and that
[04:18:40] we have a ton left which I mean we do
[04:18:41] have quite a bit left but but this is by
[04:18:43] far the bulkiest part of our entire
[04:18:45] project now while we're on the stage of
[04:18:47] permissions I want to focus on
[04:18:48] permissions for creating new projects as
[04:18:50] well because depending on what tier
[04:18:52] you're on you have the ability to create
[04:18:53] only a limited number of products so I'm
[04:18:55] going to go back to my product new page
[04:18:57] because I actually need to implement
[04:18:59] authentication here so I'm going to
[04:19:01] create a simple helper function called
[04:19:03] has permission this is a nice little
[04:19:05] component we can use that allows us to
[04:19:07] determine if a user has permission or
[04:19:09] not and if they do have permission we'll
[04:19:10] render the content inside otherwise we
[04:19:12] render out some form of fallback or just
[04:19:14] don't render anything at all so here we
[04:19:16] can say permission and this permission
[04:19:18] be can create product which is a
[04:19:21] permission we will need to create in
[04:19:22] just a second and this is going to
[04:19:24] render a fallback because we want it to
[04:19:26] render the fallback and we'll determine
[04:19:28] what that fallback text is if we want to
[04:19:30] be able to customize it so in our case
[04:19:32] I'll just copy over this fallback text
[04:19:34] and essentially it's just saying you
[04:19:35] have created the maximum number of
[04:19:36] products try upgrading your account to
[04:19:38] create more so now we need to both
[04:19:40] implement this can create product
[04:19:41] function and this has per per component
[04:19:43] the has permission component is going to
[04:19:45] be really easy so we can do that first
[04:19:47] has
[04:19:48] permission. TSX this component right
[04:19:51] here all it does is like I said takes in
[04:19:52] a permission a fallback whether or not
[04:19:54] we want to render it any fallback text
[04:19:56] and the children so the permission is a
[04:19:58] function that takes a user ID or a null
[04:20:00] and if you remember all the permissions
[04:20:02] we've created so far that's the exact
[04:20:03] parameters they take it also is
[04:20:05] optionally able to render a fallback if
[04:20:07] you don't want to render the fallback it
[04:20:09] just returns null if you don't have
[04:20:10] permission and if you want to be able to
[04:20:12] change the back text that goes in that
[04:20:14] no permission card so that no permission
[04:20:16] card we already created handles all of
[04:20:17] this for us so really all this function
[04:20:19] does is get the user ID check to see if
[04:20:21] the user has permission if they do
[04:20:22] render the children if they don't render
[04:20:24] the fallback but if you don't want to
[04:20:25] render the fallback literally render
[04:20:27] nothing at all super straightforward
[04:20:29] function for the most part we'll go
[04:20:30] ahead we'll import that and now we can
[04:20:32] work on can create product so we need to
[04:20:34] go into our permissions right here and
[04:20:36] we need to create a brand new
[04:20:38] one async function can create product
[04:20:42] user ID string or null and this is going
[04:20:46] to be pretty much the same thing we have
[04:20:48] up here if the user ID is null return
[04:20:50] false then we want to get their
[04:20:51] subscription and this time it's going to
[04:20:53] be a little different because we have a
[04:20:54] max number of products so we need to get
[04:20:56] how many products they have as well so
[04:20:57] we can just say
[04:20:59] const product count equals await G
[04:21:03] product count just like that we can pass
[04:21:06] it in a user ID then we just need to
[04:21:08] create this function which again is in
[04:21:10] our database folder so we can create a
[04:21:12] function just going to pretty much copy
[04:21:15] this function that we have here this is
[04:21:16] just going to take in a user ID which is
[04:21:20] a string it's going to call get product
[04:21:22] count it's going to be on the products
[04:21:24] but this is going to be a user tag
[04:21:26] instead because we're going to have a
[04:21:27] user ID and then down here we pass in
[04:21:31] the user ID so there's our git product
[04:21:34] count function now we need to make sure
[04:21:36] we just create the internal version of
[04:21:38] that so function git product count
[04:21:40] internal it's going to take in a user ID
[04:21:44] which is a string and it's a very simple
[04:21:46] function all we do is
[04:21:48] get the counts this is going to return
[04:21:50] to us an array we're going to await
[04:21:53] calling DB Dot and we want to do a query
[04:21:56] so we're going to select actually and we
[04:21:58] want to select specifically the product
[04:22:01] count and that's just calling the count
[04:22:03] function directly from drizzle so this
[04:22:06] allows us to count up all the different
[04:22:07] products in our database we can get this
[04:22:10] from the product table so we're getting
[04:22:12] all of the ones from our product table
[04:22:14] and we specifically want to get them
[04:22:16] where a certain criteria is true and
[04:22:18] that criteria that we're waiting for is
[04:22:19] going to be an equal criteria and we
[04:22:22] want to check to see where our product
[04:22:24] table. clerk user ID is equal to our
[04:22:27] user ID make sure this is an
[04:22:29] asynchronous function and that gives us
[04:22:31] an array of different counts and we just
[04:22:33] want to return the first one from our
[04:22:34] array so counts of zero we want to get
[04:22:37] the product count otherwise we're just
[04:22:39] going to return zero if we don't get
[04:22:41] something from the array cuz that means
[04:22:42] they have no products at all so that's
[04:22:43] all it takes to create this particular
[04:22:45] permission that's relatively easy we can
[04:22:47] go back to our new page here we can
[04:22:49] import this function just like that and
[04:22:51] we can finish implementing this function
[04:22:52] because now we need to make sure we get
[04:22:54] this and we need to make sure that their
[04:22:56] product count is less than the amount
[04:22:59] that are allowed and that means that
[04:23:00] they can still create new products so
[04:23:02] now whenever we try to create a new
[04:23:04] product if they already have the maximum
[04:23:05] number of products it'll give us a nice
[04:23:07] warning so here new product you can see
[04:23:09] canate product is not defined we looks
[04:23:11] like we need to save the file we forgot
[04:23:13] to click save so here give that a save
[04:23:16] now you can see I'm trying to create a
[04:23:17] product but I already have the maximum
[04:23:19] number which is one so I get this nice
[04:23:20] permission denied message showing up on
[04:23:22] the screen I also need to make sure in
[04:23:24] my action for creating a product that I
[04:23:26] also make sure I check to see if they
[04:23:28] can create a product before I go ahead
[04:23:29] and do it so we'll scroll all the way up
[04:23:31] to the top where I have create product
[04:23:33] and at the very top here I'm just going
[04:23:34] to check can they create the product for
[04:23:36] this particular user ID and if they
[04:23:38] cannot create the product then I'm just
[04:23:40] going to throw down an error to the user
[04:23:42] so again a really easy way to check and
[04:23:44] make sure that they able to create it
[04:23:45] before we Implement anything in our
[04:23:47] database now the final thing for
[04:23:49] products that we really need to do is to
[04:23:50] implement the products page we haven't
[04:23:52] implemented this page yet but luckily
[04:23:54] this page is dead simple page. TSX I'll
[04:23:57] paste in the code for it that's just
[04:23:58] because we've already written this page
[04:24:00] essentially entirely this page all it's
[04:24:02] doing is getting all of the different
[04:24:03] products for a user ID make sure I
[04:24:05] import that properly looks like it's
[04:24:07] still throwing an error I believe that's
[04:24:08] because we need to make sure that this
[04:24:10] is optional we don't want to have to
[04:24:11] pass down a limit that should fix that
[04:24:13] error there we go so now all I'm doing
[04:24:15] is I'm getting my user id redirecting if
[04:24:16] they're not null or if they are null
[04:24:18] sorry then I'm getting all my products
[04:24:20] if we don't have any show the no product
[04:24:21] screen otherwise show my product Grid
[04:24:23] it's literally the exact same code as
[04:24:25] our dashboard if we go to our dashboard
[04:24:26] and our products you'll notice they're
[04:24:27] almost identical minus the fact you can
[04:24:29] link to the product page from the
[04:24:30] dashboard so now we have everything done
[04:24:32] with our products actually for real this
[04:24:34] time we can move on to dealing with our
[04:24:36] subscriptions because that'll lead
[04:24:37] perfectly into dealing with all of our
[04:24:39] analytics so let's go ahead and create
[04:24:40] our subscription page we come over to
[04:24:42] our Pages we'll just minimize all these
[04:24:44] so we can kind of get started from
[04:24:46] complete scratch since we're kind of on
[04:24:47] a whole new section of the application
[04:24:48] now in the dashboard we'll create a
[04:24:50] folder called subscription and inside of
[04:24:53] here page. TSX export function
[04:24:59] subscription
[04:25:01] page and make sure that this is a
[04:25:03] default function so there we go we at
[04:25:05] least have something we can return on
[04:25:07] our subscription page so now we go to
[04:25:08] that page at least we have something to
[04:25:10] render now on this page here what we
[04:25:12] need to do is first get all of our user
[04:25:14] information so user
[04:25:16] ID that's equal to
[04:25:18] off and we need to get the redirect to
[04:25:21] sign in as well and of
[04:25:24] course if our
[04:25:26] user ID is equal to
[04:25:28] null then we'll redirect them to the
[04:25:31] sign
[04:25:32] in just like that now the next thing we
[04:25:35] need to do is to figure out what tier
[04:25:36] the user is currently on so we've
[04:25:38] already created a function for this this
[04:25:39] is the really nice thing about using
[04:25:40] those DB functions cuz now I can just
[04:25:42] get my user subscription tier boom
[04:25:45] passed my user ID and now it's just
[04:25:47] going to work make this an async
[04:25:48] function you can see everything just
[04:25:49] works same thing here I want to get how
[04:25:51] many products I've created so I can say
[04:25:54] get product count and that's a weit get
[04:25:56] product count boom we've already created
[04:25:59] this it's that easy so now we have the
[04:26:00] number of products that we've created I
[04:26:02] also need to get the number of times
[04:26:03] I've viewed the pricing page because on
[04:26:05] this subscription page I'm going to show
[04:26:06] you how many views you have left how
[04:26:08] many products you have left and so on so
[04:26:09] I'm going to say get pricing View count
[04:26:13] is a weit get product view count we're
[04:26:16] going to pass in our user ID and also we
[04:26:18] need to pass in where we want to count
[04:26:20] this from I'm going to be counting from
[04:26:22] the start of the month with whatever the
[04:26:25] current date is now this start of month
[04:26:27] I need to make sure I get from date FNS
[04:26:29] so
[04:26:31] npm I date FNS this is just a really
[04:26:34] handy library for dealing with dates
[04:26:36] once that's installed really quickly we
[04:26:38] can go ahead and actually import this
[04:26:40] function we just need a manually import
[04:26:42] for
[04:26:44] now import start of month from date FNS
[04:26:49] there we go so now we just need to
[04:26:50] implement this git product view count
[04:26:52] which is a relatively simple function so
[04:26:54] we're going to go over to our server
[04:26:56] inside of our database we need to now
[04:26:58] get one for product views. TS export
[04:27:03] function get product view
[04:27:07] count and we also need to get the
[04:27:09] internal version I'll paste down what
[04:27:10] the internal version looks like it's a
[04:27:12] relatively simple function and I'll
[04:27:14] explain obviously in- depth exactly what
[04:27:15] each line of code is doing but it really
[04:27:18] doesn't make sense to have me type out
[04:27:19] each line individually so let me just
[04:27:21] get all my imports in real quick get
[04:27:24] that import and then finally we need to
[04:27:26] do this
[04:27:28] import and greater than input so all
[04:27:31] this function is doing is taking in a
[04:27:33] user ID and a start date and what I'm
[04:27:35] doing is I'm querying on my product view
[04:27:37] table I want to just count all my
[04:27:38] pricing view counts so just get a count
[04:27:40] of everything then what I want do is I
[04:27:42] want to join this on my product table
[04:27:44] where my product ID is equal to the
[04:27:46] View's product ID so I only want to be
[04:27:48] able to get the products that the user
[04:27:50] has actually done so here I'm checking
[04:27:52] the product table for the user ID and
[04:27:54] I'm checking to make sure it's greater
[04:27:55] than the start dat so really what this
[04:27:56] code is doing is it's getting all the
[04:27:58] count of how many rows are in my view
[04:28:00] table that are associated with the
[04:28:02] products for my user and or after
[04:28:04] whatever the given time that I pass into
[04:28:06] this function is and then I just need to
[04:28:08] set up everything with my caching so
[04:28:10] here I can call all that caching related
[04:28:12] code and just make sure I import
[04:28:14] everything that I need so I get my user
[04:28:16] tag here and of course all my props are
[04:28:18] going to be the same props from up here
[04:28:20] get the cache tags just like that so
[04:28:22] this is going to be caching for a
[04:28:23] particular user because again there's no
[04:28:25] individual ID it's just a user ID since
[04:28:27] I'm checking all my product views for
[04:28:29] this particular user and now we can come
[04:28:31] back into here and we have our count
[04:28:33] function implemented it's very similar
[04:28:34] to our product count we're just making
[04:28:36] sure we have an extra joint in there and
[04:28:37] that's about the only step now we pretty
[04:28:39] much have all the information we need to
[04:28:41] implement this function so the first
[04:28:42] thing I want to do is render out a top
[04:28:44] section here that's just going to be the
[04:28:45] title for our page H1 it's going to have
[04:28:48] a class name too to make this a little
[04:28:50] bit larger margin bottom of six text is
[04:28:53] going to be 3XL font is semi bold and
[04:28:57] then in here we can just put the text
[04:28:58] your subscription and now you can see we
[04:29:00] get that text showing up on our page the
[04:29:02] next thing we can focus on is going to
[04:29:04] be for all of our different content at
[04:29:06] the very top of our page which is going
[04:29:07] to be all the content for how much we've
[04:29:09] used in our subscription so we're going
[04:29:11] to have a div here
[04:29:13] and it's going to have a class name of
[04:29:14] flex Flex column Gap 8 and margin bottom
[04:29:18] of eight and then inside of this div
[04:29:20] we're going to have another div because
[04:29:22] this is going to be our column based
[04:29:23] layout essentially we're going to have
[04:29:25] two cards that represent how many views
[04:29:27] we have and how many products we have
[04:29:29] and then another card for managing our
[04:29:30] subscription if we have one so here this
[04:29:33] is going to be for containing our two
[04:29:34] separate side by-side cards so we're
[04:29:36] going to have a grid grid Columns of one
[04:29:39] or on a larger screen size obviously the
[04:29:41] columns are going to be set to two and a
[04:29:43] gap of eight then inside of here we can
[04:29:45] render out each one of our individual
[04:29:46] cards so let's import our card we're
[04:29:49] going to get our card header from here
[04:29:51] our card title in our case I'm going to
[04:29:54] make the text a little bit larger just
[04:29:56] like that and this is our monthly usage
[04:29:58] so this is just how many views we've
[04:30:00] essentially had in the month then we're
[04:30:02] going to have our card description and
[04:30:04] inside of here we're going to use that
[04:30:05] format compact number function we
[04:30:07] created earlier to take how many views
[04:30:09] we've actually already had and then we
[04:30:11] want to compare that to the exact same
[04:30:13] formatted of our compact numbers of our
[04:30:15] maximum number of views so this is the
[04:30:17] maximum number of visits for our pricing
[04:30:19] page and this will say pricing page
[04:30:23] visits this month give that a quick save
[04:30:26] you can see here's our monthly usage we
[04:30:27] have zero total pricing page visits this
[04:30:29] month because we aren't tracking any of
[04:30:31] that information yet next we're going to
[04:30:33] do our card content and inside of here I
[04:30:35] want to render out a progress bar which
[04:30:38] is something that we can easily get from
[04:30:40] Shaden so let's just import
[04:30:42] the progress component from Shad CN it's
[04:30:46] a relatively simple and straightforward
[04:30:47] component shouldn't take too long to
[04:30:48] install and now we can import that
[04:30:50] progress component and inside of here we
[04:30:52] can give it a value and our value is
[04:30:54] just going to be our pricing view count
[04:30:58] divided by our tier. maximum number of
[04:31:00] visits we need multiply that by 100 to
[04:31:02] convert it to a number between 1 and 100
[04:31:05] now if we give that a save you can see
[04:31:06] we have that bar showing up right there
[04:31:08] now the formatting looks a little bit
[04:31:09] off so my guess is I imported my card
[04:31:11] content from the the wrong location
[04:31:12] looks like that's the right location but
[04:31:13] my progress that's also the right
[04:31:15] location so it does actually look like
[04:31:16] everything's being imported from the
[04:31:18] right location let me just make sure uh
[04:31:20] my card content should be outside my
[04:31:21] header that should fix my styling and
[04:31:23] there we go we now have our progress bar
[04:31:25] showing up now we're going to make
[04:31:26] what's arguably an identical card for
[04:31:28] our number of products so same text
[04:31:29] large we're going to have the exact same
[04:31:31] product count and number of products and
[04:31:33] the same thing for our progress bar and
[04:31:34] if we say that you can see we get that
[04:31:36] showing up now I'm going to slightly
[04:31:37] modify our progress bar instead of using
[04:31:39] a background primary I'm going to come
[04:31:41] in here with a background of accent
[04:31:43] instead so let's just make sure I spell
[04:31:45] accent properly give that a quick save
[04:31:47] and now you can see we have a blue
[04:31:48] background instead of the black
[04:31:50] background which looks better for our
[04:31:51] particular styling and on a larger
[04:31:53] screen size you can see that these two
[04:31:54] elements will show up side by side but
[04:31:56] actually it doesn't look like that's
[04:31:57] quite working so there's clearly
[04:31:59] something going on inside of my grid
[04:32:01] here you can see grid columns one on
[04:32:03] medium it should be grid calls 2 and now
[04:32:06] when we expand our screen size you can
[04:32:07] see they are side by side so that is
[04:32:09] working as we expect now after this we
[04:32:11] need to have another card for managing
[04:32:13] our subscription and this is only going
[04:32:14] to be a card that exists if we already
[04:32:16] have a subscription we're paying for
[04:32:19] because this is for managing our
[04:32:20] subscription inside of stripe so if we
[04:32:22] have a free subscription so far there's
[04:32:24] nothing in stripe if that makes sense so
[04:32:26] if our tier is not equal to subscription
[04:32:29] tiers whoops subscription tiers. free
[04:32:33] then we don't want to render this or we
[04:32:34] do want to render this I'm sorry so if
[04:32:36] our subscription is not free then we're
[04:32:37] going to render out a brand new card let
[04:32:40] me make sure I get rid of the Subscribe
[04:32:41] for from here that shouldn't be there
[04:32:42] there we go card header inside of there
[04:32:45] we know our card title and I'm just
[04:32:48] going to copy down what the content in
[04:32:50] the title and description is cu it's
[04:32:51] just plain text you're currently on the
[04:32:53] whatever the tier is if you'd like to
[04:32:54] upgrade cancel or change your payment
[04:32:56] method use the button below and then we
[04:32:58] need to actually put a button so we'll
[04:33:00] say card content just like that inside
[04:33:02] of here we're going to have a very basic
[04:33:04] form with an action and the action is
[04:33:06] going to be for creating a customer
[04:33:08] portal session this is going to be
[04:33:09] dealing specifically with stripe and
[04:33:11] this is just going to create a link and
[04:33:13] redirect the user to that link so what
[04:33:15] we're going to do is just put a simple
[04:33:17] button inside of here our variant is
[04:33:19] going to be
[04:33:20] accent we're going to have a class name
[04:33:22] on
[04:33:23] here so we're going to say text
[04:33:26] large
[04:33:28] rounded large and then our size is also
[04:33:31] going to be large this is just going to
[04:33:33] be an overall relatively large button
[04:33:35] that says
[04:33:36] manage
[04:33:38] subscription and then let's go ahead
[04:33:40] close off that button just like that and
[04:33:42] of course we don't have this action yet
[04:33:44] so let's just remove that so we can see
[04:33:45] what our code looks like and you can see
[04:33:47] right now we are on the free
[04:33:48] subscription if we just make this say
[04:33:50] equal free subscription you can see
[04:33:51] you're currently on the free plan if you
[04:33:52] like to upgrade blah blah blah do this
[04:33:54] and again make sure our card content is
[04:33:56] outside of our header to make sure our
[04:33:57] styling looks right there we go so now
[04:34:00] we can add in that action that we
[04:34:02] removed so action equals and this is
[04:34:05] going to be create customer portal
[04:34:08] session we'll go ahead and Implement
[04:34:10] that in just a second
[04:34:12] but obviously we're going to get an
[04:34:13] error because it doesn't exist quite yet
[04:34:15] so I'm just going to move on and we'll
[04:34:16] come back and create this function in a
[04:34:17] second because we're going to create
[04:34:18] some other functions with stripe that
[04:34:19] are going to do similar things so the
[04:34:21] next thing I want to work on is dealing
[04:34:22] with all of my different pricing cards
[04:34:24] because I'm going to render out each
[04:34:25] individual pricing card this codee's
[04:34:27] almost identical to what we had before
[04:34:28] for rendering our pricing cards and I
[04:34:30] want to render each individual pricing
[04:34:32] card out and I want to show them with a
[04:34:33] button that says like upgrade downgrade
[04:34:35] swap whatever it is so let's go ahead
[04:34:38] and get all of our pricing code
[04:34:39] functioned now I'm going to copy this
[04:34:41] over this is about 90% identical to the
[04:34:43] pricing card that we've already created
[04:34:45] but I'll go over the major differences
[04:34:47] once I get all the different things
[04:34:48] imported that we need so get our tier
[04:34:50] names imported from here and we can make
[04:34:52] sure that these functions will create in
[04:34:53] just a second and then finally we need
[04:34:55] to implement our card footer and react
[04:34:58] node from here and of course get the
[04:35:00] check icon and this CN class right there
[04:35:03] so this feature section identical
[04:35:05] nothing about this changes it's exactly
[04:35:07] the same as what we had before all the
[04:35:08] stuff in our footer identical all the
[04:35:10] stuff in our header idental
[04:35:12] the one major difference between these
[04:35:13] two versions is in the card content we
[04:35:15] have a giant form that instead of
[04:35:17] bringing us to the sign up button brings
[04:35:19] us to a button that is either going to
[04:35:20] allow us to cancel by deleting our
[04:35:22] session or by creating a brand new
[04:35:24] session which allows us to check out and
[04:35:26] sign up for a subscription for the very
[04:35:27] first time so what we can do is we can
[04:35:29] come in here I'm going to comment out
[04:35:31] these actions just because we don't have
[04:35:33] one yet so I'm just going to put
[04:35:35] undefined into here and same thing up
[04:35:37] here for our action I'll put undefined
[04:35:40] just so we can see what this looks like
[04:35:41] like now if we save you can see down
[04:35:43] here I have my four pricing cards you'll
[04:35:45] notice they look identical the only
[04:35:46] difference being is that these buttons
[04:35:48] for the current one says current and is
[04:35:50] gray out and the other ones have the
[04:35:51] ability to swap and they'll submit a
[04:35:53] form for us when we click on them right
[04:35:54] now the forms do nothing so let's bring
[04:35:56] in those functions and go ahead and
[04:35:58] actually work on creating those
[04:35:59] different functions for stripe
[04:36:00] implementations also what we need to
[04:36:02] make sure we do is scroll all the way to
[04:36:04] the very top set this to not equal to
[04:36:06] free and now we can go into our server
[04:36:08] folder we can create a brand new file
[04:36:10] called stripe for managing all our
[04:36:11] different stripe related things so we
[04:36:13] have an async function called create
[04:36:16] checkout
[04:36:18] session function just like that and we
[04:36:21] don't even need to pass anything to this
[04:36:23] except for the tier that we're going to
[04:36:24] be creating this for so we're going to
[04:36:25] create a tier and this is only for our
[04:36:27] paid tier names so I'm going to say paid
[04:36:29] tier names and I'm going to actually
[04:36:30] create that type inside of our data so
[04:36:32] go into our data subscription tiers
[04:36:35] we're going to export a type which is
[04:36:38] paid tier names which is just equal to
[04:36:41] tier tier names but we want to exclude
[04:36:44] the free
[04:36:45] tier there we go so now paid tier names
[04:36:48] is basic standard or premium that's
[04:36:50] exactly what we want make sure we import
[04:36:51] this and there we go we're importing one
[04:36:53] of the tiers that we want now the next
[04:36:55] thing we need to do is to get our user
[04:36:57] and we actually need the full user
[04:36:58] information because we need to be able
[04:37:00] to get certain things like the stripe
[04:37:01] custom ID and so on so this is going to
[04:37:03] be called
[04:37:05] await current user and that is actually
[04:37:07] coming from Clerk and allows us to get
[04:37:09] our current user and if our
[04:37:12] user is equal to null then we can just
[04:37:15] return that there was an error so we'll
[04:37:17] say error true next thing is we can get
[04:37:19] our subscription so
[04:37:22] subscription is equal to get user
[04:37:25] subscription and we'll pass in our users
[04:37:27] ID again since we already created all
[04:37:29] these functions it's super easier for us
[04:37:30] to just Implement them and use them
[04:37:32] without having to worry about anything
[04:37:33] else so we'll await that function now
[04:37:36] down below we can say if our
[04:37:39] subscription is equal to null again we
[04:37:41] have an error so return
[04:37:45] error true otherwise we can finally move
[04:37:48] on to this next section so this is where
[04:37:50] we're going to Branch a little bit so if
[04:37:52] we don't have a subscription yet then we
[04:37:54] want to be able to create a brand new
[04:37:55] subscription so if our subscription oops
[04:37:59] subscription. stripe customer ID if this
[04:38:03] is equal to null well then we want to
[04:38:04] create a brand new checkout session
[04:38:06] otherwise we're going to piggyback on
[04:38:08] some of the features built into stripe
[04:38:10] so this is going to give us a URL and
[04:38:12] we're going to call get checkout session
[04:38:16] we're going to pass it in the tier the
[04:38:18] subscription and the user that we're
[04:38:19] creating this for so let's create that
[04:38:21] function function G checkout session and
[04:38:25] we're going to pass it in all of that
[04:38:26] information and I'm just going to copy
[04:38:28] over the typing for that information
[04:38:30] because the paid tier is going to be one
[04:38:31] of our tiers here we're going to have
[04:38:33] our subscription and the only thing we
[04:38:34] care about is a stripe customer ID and
[04:38:36] the stripe subscription ID and then our
[04:38:38] user just gets the user type from clerk
[04:38:41] now to to use this function we need to
[04:38:42] First figure out what customer details
[04:38:44] we need for our user so our customer
[04:38:46] details is equal to and this depends on
[04:38:48] if our subscription has information for
[04:38:50] our particular user and actually we
[04:38:52] don't even need to do this because we
[04:38:53] already know our stripe customer ID is
[04:38:54] null so we don't even need to pass in
[04:38:56] our subscription information we only
[04:38:58] really need the user and for our
[04:39:00] customer details this is going to be
[04:39:01] rather straightforward we want to take
[04:39:03] our customer and we want to set the
[04:39:05] email specifically and that's just user.
[04:39:07] primary email address and we want to get
[04:39:09] the email address property from that so
[04:39:11] this is just going to get whatever the
[04:39:12] user's email address is and that's going
[04:39:14] to be our customer details so what we
[04:39:16] can do next is we can say that we're
[04:39:17] going to have a session and that's going
[04:39:19] to be called await calling the stripe
[04:39:21] function and this means that we now need
[04:39:23] to import stripe into our application so
[04:39:25] we can say
[04:39:27] npmi stripe just like that that's going
[04:39:29] to import stripe and then all the way up
[04:39:31] here we can say import Stripe from
[04:39:34] stripe we also need to make sure that we
[04:39:37] move this stripe folder or file into our
[04:39:39] actions folder cuz technically these are
[04:39:41] going to be actions that we can call so
[04:39:43] let's make sure we call use server at
[04:39:45] the top here because these are actions
[04:39:47] there we go we now have access to stripe
[04:39:50] and we can just say const our small
[04:39:51] stripe is going to be equal to creating
[04:39:53] a brand new stripe instance using our
[04:39:55] server environment variables which we
[04:39:57] need to
[04:39:59] import server environment from and
[04:40:03] that's going to be at slash data SL
[04:40:07] environment server there we go and we
[04:40:09] want to get essentially our stripe
[04:40:12] secret key there we go and let me make
[04:40:15] sure I spell all of this properly and
[04:40:16] now we're getting an error because we
[04:40:18] don't have stripe secret key to find on
[04:40:20] here so stripe secret key z. string and
[04:40:25] let's actually put that into our actual
[04:40:27] environment variables so to do that we
[04:40:29] need to go ahead and log into stripe and
[04:40:31] once you're inside of stripe we
[04:40:32] essentially need to find the section for
[04:40:34] our API Keys a lot of times you can go
[04:40:35] to settings and click on developers and
[04:40:37] we can see here API Keys now inside of
[04:40:40] this section just zoom it in a little
[04:40:42] bit so it's easier to see we have the
[04:40:43] publishable key and the secret key we're
[04:40:45] just going to be getting the secret key
[04:40:46] cuz we're not even doing anything on the
[04:40:47] client everything we're doing is on the
[04:40:48] server so let's just copy that we're
[04:40:50] going to minimize all this down go to
[04:40:52] our EnV file section we're going to
[04:40:54] create a new section for
[04:40:57] stripe we have our stripe secret key and
[04:41:01] we're going to set it equal to that
[04:41:02] secret key that we just added in I'm
[04:41:04] also going to make sure I copy this over
[04:41:06] into the EnV example section and add a
[04:41:08] section here for stripe as well so let's
[04:41:10] save all that information save this and
[04:41:13] now hopefully with all that done we come
[04:41:14] back over here and refresh obviously
[04:41:16] we're still getting errors but at least
[04:41:17] this section is fixed and now we can
[04:41:19] actually access the stripe API to do
[04:41:20] things so here we want to create a basic
[04:41:22] checkout session so we're going to say
[04:41:23] we want to create a checkout session
[04:41:26] just like that and we want to pass along
[04:41:27] all the information we need so I'm just
[04:41:29] going to take this customer email paste
[04:41:30] it into here get rid of this customer
[04:41:32] details up there the next thing we need
[04:41:34] to do is pass along all the data for our
[04:41:35] subscription so our subscription data we
[04:41:38] specifically just want to have some
[04:41:39] metadata clerk user ID
[04:41:41] is user. ID this way we can link
[04:41:44] together our subscription with our clerk
[04:41:46] user the next thing we need to do is to
[04:41:48] specify any line items that we have this
[04:41:50] is the thing that someone is going to be
[04:41:52] buying this is going to have a price
[04:41:54] section and it's going to have a
[04:41:56] quantity which in our case is always
[04:41:57] going to be one because we're just
[04:41:58] buying one single subscription now for
[04:42:01] the price this is actually something
[04:42:02] that we're going to be getting and
[04:42:03] setting inside of stripe so inside of
[04:42:06] stripe I'll make this quite a bit larger
[04:42:07] so you can see we have this product
[04:42:09] catalog section where we can create
[04:42:10] different products so for example if
[04:42:12] this basic product right here all I did
[04:42:14] was create a product I'll show you what
[04:42:15] it looks like you can just click add
[04:42:17] product all you need to do is type in
[04:42:18] the name of your product optionally give
[04:42:20] it a description if you want determine
[04:42:22] the amount that your product is going to
[04:42:23] be and whether or not it's going to be
[04:42:25] recurring in our case we want it to be
[04:42:26] recurring and be monthly and there we go
[04:42:28] that's how you create a product you
[04:42:29] click add and that'll create the brand
[04:42:30] new product for us we have a premium
[04:42:32] standard and basic product already
[04:42:34] created and what we can do is we can go
[04:42:36] inside of here and we just need to be
[04:42:37] able to get the product IDs so here we
[04:42:39] have our product IDs we actually need
[04:42:40] the pricing ID so we can click on our
[04:42:42] price and up here we get the pricing ID
[04:42:44] and that is what we're essentially going
[04:42:46] to put into here we're going to put each
[04:42:48] one of these pricing IDs now I want to
[04:42:50] make sure that these are private
[04:42:51] variables so inside of our EnV we're
[04:42:53] going to have our stripe basic
[04:42:56] plan price ID and set it equal to that
[04:42:59] and we're going to get this for each of
[04:43:00] them so instead of making you watch me
[04:43:02] type these out I'm just going to copy
[04:43:03] each of those plans in and then I'm
[04:43:05] going to go over to our example and
[04:43:07] again same thing going to paste those
[04:43:09] down and I'm going to delete them
[04:43:10] because we don't want them to be stored
[04:43:11] in there so now we have all of our
[04:43:12] different plan IDs I can now add these
[04:43:15] into our environment variables so we're
[04:43:17] going to have our different
[04:43:18] plans again let make sure I get this
[04:43:20] hooked up right z.
[04:43:22] string comma
[04:43:26] afterwards z.
[04:43:33] string and there we go now we have those
[04:43:35] inside of our EnV variables now we can
[04:43:37] actually use them which is really great
[04:43:38] because if we go back to our data folder
[04:43:41] that's where we set up all of our
[04:43:42] subscription tiers and I can add in the
[04:43:44] stripe price ID just like this so stripe
[04:43:48] price ID is going to be EnV I want to
[04:43:50] get my server ones and I want to get the
[04:43:52] basic plan so I'm going to take this and
[04:43:54] I'm going to move it down to here now
[04:43:56] this one doesn't have a stripe plan ID
[04:43:58] so we'll say stripe price ID is going to
[04:44:01] be undefined or null it just doesn't
[04:44:04] have one so we're going to specify it as
[04:44:06] null then we'll move this down to both
[04:44:08] of these this one is going to be the
[04:44:10] premium version
[04:44:15] and then this one right
[04:44:16] here is standard so now we at least have
[04:44:19] all of our IDs associated with each one
[04:44:21] of our different projects or our
[04:44:22] products I'm sorry our tiers actually
[04:44:25] and now we can just say tier Dot and we
[04:44:27] can get the actual pricing plan for it
[04:44:29] so this is based on our tier plan names
[04:44:31] so that means I need to take my
[04:44:32] subscription whoops subscription tiers I
[04:44:36] need to get the one for the specific
[04:44:37] tier and I want to get that stripe price
[04:44:39] ID just like that so this is is going to
[04:44:41] be an ID of a stripe price and that
[04:44:43] means it's going to be perfectly linked
[04:44:44] with our stripe database so we specified
[04:44:46] what the customer email is we specified
[04:44:48] how to link this to our customer we
[04:44:49] specified what they're purchasing now we
[04:44:51] need to specify that this is going to be
[04:44:52] a subscription so stripe knows this is a
[04:44:54] monthly payment and then we need to have
[04:44:56] a success URL which is where we redirect
[04:44:58] the user to and this is coming from our
[04:45:00] client EnV so all the way up here I'm
[04:45:03] going to copy this down I'm going to get
[04:45:05] our client environment variables from
[04:45:08] the client version of this file so our
[04:45:10] Cent
[04:45:11] EnV comes with a next public server URL
[04:45:15] and we just want to redirect them back
[04:45:16] to the page they were just on so the
[04:45:18] subscription page and we want to do the
[04:45:20] exact same thing for a cancel so the
[04:45:23] cancel URL bringing them back to the
[04:45:25] exact same place then all we want to do
[04:45:26] is down here return our session. URL
[04:45:29] back to the user so up here we now have
[04:45:31] that URL which could be null so if the
[04:45:34] URL is equal to null then we just return
[04:45:37] an
[04:45:39] error otherwise we're going to redirect
[04:45:41] the user to that URL and this is going
[04:45:44] to redirect them to stripe where they
[04:45:45] can enter their payment information and
[04:45:46] so on now this is something we're going
[04:45:49] to worry about implementing it in just a
[04:45:50] little bit so we're going to come back
[04:45:51] here now to make sure that everything is
[04:45:53] going to be working we also need to
[04:45:54] implement the other two functions so we
[04:45:56] have an
[04:45:57] export async function and this one is
[04:46:00] going to be a
[04:46:01] create
[04:46:03] cancel session just like that for now
[04:46:06] I'm just going to make it do absolutely
[04:46:07] nothing and then an async function
[04:46:10] called
[04:46:11] create customer portal session again I'm
[04:46:15] going to make it do nothing these are
[04:46:16] just the functions that we created on
[04:46:18] this page so now we can import all of
[04:46:20] these different functions even the ones
[04:46:22] that don't do anything yet so we can at
[04:46:24] least see if this is working it looks
[04:46:26] like we've gotten rid of all of our
[04:46:27] errors we come back over here everything
[04:46:29] is rendering and hopefully if I click on
[04:46:31] one of these buttons it's going to bring
[04:46:33] me to the page where I can actually
[04:46:34] purchase this product so I can click
[04:46:35] swap for example and now you can see
[04:46:37] it's brought me to this particular page
[04:46:39] where I can enter in my credit card
[04:46:40] information
[04:46:41] and purchase this particular product and
[04:46:43] if I were to go back for example you can
[04:46:44] see it brings me back exactly to this
[04:46:46] page now before we go ahead and actually
[04:46:48] test this implementation we first need
[04:46:49] to deal with web hooks inside a stripe
[04:46:51] so I'm just going to search here for web
[04:46:53] hook you can see here we have the web
[04:46:55] hooks right there and this allows me to
[04:46:56] actually deal with creating web hooks so
[04:46:58] let's actually Zoom this out a little
[04:47:00] bit more so it's easier to see I will
[04:47:02] again go to the settings actually the
[04:47:04] developer button is right there you can
[04:47:06] see we can click on web Hooks and I get
[04:47:07] a bunch of information inside of here
[04:47:09] we'll Zoom it in a little more so it's
[04:47:10] easier to see you can see we have create
[04:47:12] local listener and create an endpoint
[04:47:13] I'm just going to do local because
[04:47:14] that's how we're going to be testing
[04:47:16] first I need to install the stripe SDK
[04:47:18] and log in and then I can call stripe
[04:47:19] listen and forward it to whatever my
[04:47:21] particular URL is and finally I can
[04:47:23] trigger that particular endpoint and
[04:47:25] then from this exact page I can see what
[04:47:27] all the things are being sent along I
[04:47:28] can go to this events Tab and see all
[04:47:30] the events that are being sent along
[04:47:31] with everything for example I had a
[04:47:33] billion portal session created because
[04:47:35] of the things that I've done so far so
[04:47:37] I'm going to go ahead and I'm going to
[04:47:38] come into my web Hooks and start
[04:47:39] implementing this web Hook from stripe
[04:47:41] It's relatively simple to actually do
[04:47:43] this implementation so to get started
[04:47:45] with implementing this we first need to
[04:47:46] create the actual location in our API
[04:47:48] we'll create a folder called stripe and
[04:47:50] inside of here we'll create our own
[04:47:53] routts file and inside this route. TS
[04:47:55] file we just need to get started with
[04:47:57] stripe now dealing with web Hooks and
[04:47:58] stripe is relatively easy we're going to
[04:48:00] export an async function called post
[04:48:03] that's going to take in our request
[04:48:05] whoops request and this is a
[04:48:08] next request and then inside of here I
[04:48:11] want to get my event which is as simple
[04:48:13] as calling a wait on the stripe and of
[04:48:16] course we need to get stripe so we can
[04:48:18] say con stripe equals new stripe make
[04:48:21] sure we import that and it's going to be
[04:48:23] getting my environment variable for my
[04:48:25] stripe secret key there we go so we're
[04:48:27] going to give be getting a stripe and I
[04:48:29] want to deal with web Hooks and I want
[04:48:31] to be to construct an event so here we
[04:48:33] go inside of here I want to get the body
[04:48:35] for my text so request. text is going to
[04:48:38] get all the text from whatever sent to
[04:48:39] me by stripe
[04:48:41] I then need to get the headers from
[04:48:42] stripe so get the particular header
[04:48:45] which is my stripe signature just like
[04:48:47] that and I'll say that this is a string
[04:48:49] because it should come back as a string
[04:48:51] and then I need to get my stripe web
[04:48:54] hook secret now to be able to get this
[04:48:56] stripe web hook secret we need to First
[04:48:58] Implement that into our environment
[04:48:59] variables so here we're going to say
[04:49:01] stripe web hook secret is a string in
[04:49:04] our environment variables in our stripe
[04:49:06] section we need to add in our stripe web
[04:49:09] hook secret and we need to do do the
[04:49:11] exact same thing on our example version
[04:49:12] as well now to be able to get that we
[04:49:14] just need to create a local listener so
[04:49:16] I'm just going to copy this particular
[04:49:18] code to get the local listener go into
[04:49:20] my package Json and create a simple
[04:49:22] script for setting this up so here we'll
[04:49:24] just say stripe and I'll just call this
[04:49:26] web hooks just like that and this is
[04:49:29] going to call stripe listen and I want
[04:49:30] to forward to Local Host 3000 API web
[04:49:36] hooks SL stripe and that that's going to
[04:49:38] do is forward every single stripe API
[04:49:41] web hook to this particular URL when I
[04:49:43] call that so what I can do is I can say
[04:49:45] npm run stripe web
[04:49:48] Hooks and if I give that a quick second
[04:49:51] to run you can see that it is going to
[04:49:53] give me a brand new secret key that I
[04:49:55] can use and it's going to say hey you
[04:49:56] know what everything is up and running
[04:49:58] so now we can go ahead into our route or
[04:50:01] not into our route into our environment
[04:50:02] variable paste that key in and now we
[04:50:03] have a secret key that we can use for
[04:50:05] our web hooks as well so now if we go
[04:50:07] back to that web hook that we were
[04:50:08] implementing right here we can set okay
[04:50:11] now we have an event and we can switch
[04:50:12] on the particular event. type there we
[04:50:15] go so event. type in the particular case
[04:50:18] that we have a customer. subscription
[04:50:21] deleted I want to do something I then
[04:50:23] want to do the exact same thing in the
[04:50:26] case that I have a customer.
[04:50:28] subscription and I want to do when I
[04:50:30] have an update or not an update yeah an
[04:50:31] update that'll work make sure I put the
[04:50:34] colon at the end of these there we go
[04:50:37] and I'm going to copy this one more time
[04:50:39] for what happens when we have a created
[04:50:41] ad as well so I think it's just create
[04:50:43] nope created just like that and then
[04:50:45] finally at the very bottom I want to
[04:50:47] return a new response which is null and
[04:50:49] has a status of 200 just so stripe knows
[04:50:52] that this successfully worked so let's
[04:50:54] get started with the created all I can
[04:50:55] do is say await handle create pass in my
[04:50:59] event. dat. object and then I can put a
[04:51:02] break statement and I can create a
[04:51:03] function called handle create which
[04:51:06] takes in my
[04:51:09] subscription which is a stripe.
[04:51:11] subscription just like that so it's
[04:51:13] giving me all of my subscription data
[04:51:15] from stripe now I can copy this and
[04:51:17] paste this down a couple times but this
[04:51:19] one's going to be for handle delete and
[04:51:21] this one's going to be for handle update
[04:51:23] there we go and I can create essentially
[04:51:25] the exact same function for
[04:51:27] handle
[04:51:29] delete and handle update and they're all
[04:51:31] going to do different things but they're
[04:51:32] going to be relatively similar between
[04:51:34] all of them so inside of handle create
[04:51:37] the very first thing I want to do is get
[04:51:38] my tier for the user so I say tier is
[04:51:41] equal to get tier by Price ID and I can
[04:51:45] pass in my subscription. items. dat this
[04:51:48] is that list of line items that we
[04:51:49] created so if we look at this create
[04:51:51] checkout session I'm sorry not this one
[04:51:53] it's this one right here these line
[04:51:54] items that's this list that's giving it
[04:51:56] back to us so we're going to get the
[04:51:57] very first item from
[04:51:59] there and I want to get the price. ID so
[04:52:02] now I can use this function that I'm
[04:52:04] about to create to get a tier based on
[04:52:06] that price ID so back into here I'll
[04:52:09] create a function
[04:52:11] make sure I export
[04:52:13] this this is going to take in a price ID
[04:52:16] which is a string and it's actually a
[04:52:18] stripe price ID there we go make sure I
[04:52:22] actually spell all this
[04:52:23] properly and then I can just return
[04:52:26] subscription tiers and actually it'll be
[04:52:28] easier if I just paste this in there I
[04:52:30] just want to get the values from that
[04:52:31] and get it based on my stripe price ID
[04:52:34] so essentially I'm just looping through
[04:52:35] each of my subscription tiers and
[04:52:36] returning whichever one has the right
[04:52:38] price ID that's going to return to me
[04:52:40] single one of my tiers now what I can do
[04:52:43] is I can go back to here and this will
[04:52:44] get me a particular tier which will give
[04:52:46] me all the information I need to be able
[04:52:48] to create this in my user the next thing
[04:52:49] I need to do is figure out which user
[04:52:51] this is associated with so my clerk user
[04:52:53] ID is going to be equal to subscription.
[04:52:55] metadata that's why I set that metadata
[04:52:58] and I want to get the clerk user ID now
[04:53:01] obviously if my clerk user ID is equal
[04:53:04] to null or my tier is equal to null then
[04:53:06] something bad happened and I need to
[04:53:08] throw an error so that way I know for in
[04:53:10] fact there's a problem so I'm going to
[04:53:12] return a new response with null and
[04:53:14] status of 500 so now we have an error
[04:53:17] please somebody solve that the next
[04:53:19] thing I want to do is get my customer
[04:53:21] information from stripe so I can say
[04:53:22] that's equal
[04:53:23] to subscription. customer make sure I
[04:53:27] spell that properly there we go that's
[04:53:28] going to give me all of my customer
[04:53:30] information namely this is a customer ID
[04:53:32] that it's going to get for me or it
[04:53:33] could be a customer object so I want to
[04:53:36] get the customer ID from that so I'll
[04:53:38] say customer ID is equal to to and I
[04:53:40] want to check the type of my customer if
[04:53:43] it's equal to a
[04:53:46] string there we go then I know that I
[04:53:49] can just return whatever this is because
[04:53:50] it's an ID but if it's not equal to a
[04:53:52] string well then I want to get the ID
[04:53:54] property from my customer by saying
[04:53:56] customer. ID so this may or may not be a
[04:53:58] string and depending on what we do we
[04:54:00] want to make sure we get the right value
[04:54:02] then finally I can actually update my
[04:54:04] user subscription so I'll call a
[04:54:06] function called update
[04:54:07] user subscription that's going to be
[04:54:10] accessing my database I essentially just
[04:54:11] want to pass along a bunch of
[04:54:13] information into here so I'm going to go
[04:54:14] and create this function now so we'll
[04:54:16] come all the way down into our section
[04:54:19] for our database which is inside of our
[04:54:21] server and our database we got our
[04:54:23] subscription section and here export
[04:54:26] function update subscription just like
[04:54:29] that and it's actually called update
[04:54:31] user subscription now inside of here I
[04:54:34] need to obviously get all my data and so
[04:54:35] on but let's go ahead and write out our
[04:54:37] database query so let's make sure this
[04:54:39] is asynchronous and we want to do a db.
[04:54:42] update and we want to update the user
[04:54:44] subscription table and we want to set
[04:54:47] our data so we can get that data in
[04:54:49] safely from here which is just a partial
[04:54:51] for my type of user subscription table.
[04:54:55] infer insert that's pretty much the same
[04:54:57] as all of our other update functions
[04:54:59] then I want to do it where specific
[04:55:01] things are true and unfortunately I
[04:55:03] can't just do a generic where wear based
[04:55:05] on like user ID or stripe customer ID
[04:55:07] because depending on if we're doing a
[04:55:09] create an update or delete we're going
[04:55:11] to get slightly different information
[04:55:12] back so I'm actually going to take my
[04:55:14] wear in directly from my update function
[04:55:17] so up here I'm going to pass in a wear
[04:55:19] which is just going to be SQL and this
[04:55:22] SQL is just a type that comes directly
[04:55:24] from drizzle so it's saying just any
[04:55:26] amount of SQL that I'm going to write is
[04:55:27] coming in as my wear Clause then what I
[04:55:30] want to do is I want to make sure I
[04:55:31] return specifically the ID which is the
[04:55:33] user subscription table. ID and I want
[04:55:37] to get the user ID which is my user
[04:55:39] subscription table table clerk user ID
[04:55:42] that way I can use that to revalidate my
[04:55:44] cache so I can say
[04:55:47] updated
[04:55:49] subscription is equal to waiting for
[04:55:51] that and then if my updated subscription
[04:55:55] is not equal to
[04:55:56] null make sure I spell that properly
[04:56:00] there we go then I can revalidate my DB
[04:56:02] cache where the tag is the cach
[04:56:06] whoops cach tag. subscription
[04:56:10] I want to get it for user ID which is my
[04:56:14] updated subscription again didn't spell
[04:56:16] that
[04:56:18] properly and then finally my ID is my
[04:56:20] updated subscription. ID so just
[04:56:23] revalidating my cash for all that
[04:56:24] information so I just now need to pass
[04:56:26] along aware as well as all my data
[04:56:28] directly from this route right here so
[04:56:30] let's make sure we import that just fine
[04:56:32] here for my wear Clause it's just going
[04:56:34] to say I want to check equal
[04:56:36] user subscription table dot in our case
[04:56:40] I have have a clerk user ID so I'm going
[04:56:41] to check for my clerk user ID and then
[04:56:44] we can pass along all the different data
[04:56:45] so if we look here the data we need is
[04:56:47] our clerk user ID well that's pretty
[04:56:48] easy but we don't really need to add
[04:56:50] that in there if we're doing an update
[04:56:52] so we can do just next step of thing
[04:56:54] which is our stripe customer ID which is
[04:56:57] our customer ID we also need to get the
[04:56:59] tier that they're upgrading to which is
[04:57:01] just tier. name we need to get the
[04:57:03] stripe subscription ID which is our
[04:57:05] subscription. ID and then we need to get
[04:57:07] the stripe subscription item id which
[04:57:10] again is coming from our subscription.
[04:57:12] items we want to get the first element
[04:57:14] from our data array because we're only
[04:57:15] ever passing one and we get the ID for
[04:57:17] that so now if we make it this an
[04:57:20] asynchronous function and then we come
[04:57:22] into here we can just return a waiting
[04:57:24] for this and now there we go we
[04:57:25] automatically have the ability to handle
[04:57:27] the creation of different user
[04:57:29] subscriptions so whenever someone signs
[04:57:31] up we update their subscription to that
[04:57:32] next tier level so hopefully this all
[04:57:35] should be working I'm already listening
[04:57:36] for my web hooks so let's go ahead and
[04:57:38] just test that and see if everything
[04:57:39] works properly so I'm going to come in
[04:57:41] here I'm going to upgrade to the basic
[04:57:43] plan I'll make this a little bit larger
[04:57:44] Zoom this in and I can come in here just
[04:57:47] enter a bunch of credit card
[04:57:49] information enter a name enter a random
[04:57:52] zip code none of this information
[04:57:53] actually matters and we'll click
[04:57:55] subscribe and hopefully everything will
[04:57:56] work successfully it'll redirect us to
[04:57:58] the last page we were on and we should
[04:58:00] see it actually updates their
[04:58:01] subscription and look at that we're now
[04:58:02] on the basic plan you can see we have
[04:58:04] one of five products we have a monthly
[04:58:06] usage of 10,000 now so now we have the
[04:58:08] ability to actually spap between
[04:58:10] different plans and we have this manage
[04:58:11] subscription button right now it doesn't
[04:58:13] work but you can see it showing up so we
[04:58:15] at least have handle create completely
[04:58:16] finished now while we're here I might as
[04:58:18] well do the update function as well so
[04:58:20] for the update function it's going to
[04:58:22] have some similarities to this function
[04:58:23] for example we need to be able to get
[04:58:24] the tier so just paste that in there
[04:58:26] we're going to get the tier based on
[04:58:27] that ID I want to be able to get my
[04:58:29] customer information as well so we'll
[04:58:31] copy that down but we don't have the
[04:58:33] clerk user ID cuz we don't have any
[04:58:34] metadata that we can pull from this
[04:58:36] subscription so instead what I'm going
[04:58:38] to do I'm going to first just check if
[04:58:39] my here is equal to null then I'm going
[04:58:42] to return a new response that's going to
[04:58:45] be a status of 500 again just throwing
[04:58:47] down an error to the user and then we
[04:58:49] just want to call this update function
[04:58:51] again so let's just do that we're going
[04:58:53] to call update but this time we don't
[04:58:54] have a clerk user ID but I do have a
[04:58:57] stripe user ID so I can say stripe
[04:58:59] customer ID is customer ID and in that
[04:59:03] case if we're updating our subscription
[04:59:05] the subscription ID should stay the same
[04:59:06] the item id should stay the same the
[04:59:08] customer ID should stay the same the
[04:59:09] only only thing changing is the tier for
[04:59:12] what we're updating so that's the only
[04:59:13] thing I'm going to pass along to this
[04:59:15] particular function now finally we need
[04:59:16] to handle delete and again I want to get
[04:59:18] my customer information so I can get my
[04:59:20] customer information from here and I can
[04:59:22] just essentially call the exact same
[04:59:24] function but this time I'm going to be
[04:59:25] updating the tier specifically to the
[04:59:27] free tier so I can say subscription
[04:59:31] whoops a subscription tiers there we go
[04:59:34] free. name and I also want to make sure
[04:59:37] that I take the stripe subscription ID
[04:59:39] and remove that so let's say stripe
[04:59:41] subscription ID is equal to null and our
[04:59:45] stripe subscription Item ID is equal to
[04:59:47] null because we've removed this
[04:59:48] subscription from the user there we go
[04:59:51] now we can keep the stripe customer ID
[04:59:53] because they're still associated with
[04:59:54] that particular user but we can get rid
[04:59:57] of all the other stuff and downgrade
[04:59:58] them back down to the free tier so we at
[05:00:00] least have handled all the different
[05:00:01] scenarios that stripe can throw at us
[05:00:03] with the different web hooks that we're
[05:00:04] dealing with so now let's go back to
[05:00:06] stripe and implement the rest of our
[05:00:08] different functions here so we have this
[05:00:10] create customer portal session as well
[05:00:12] this one's actually relatively easy we
[05:00:14] first need to get our user ID which
[05:00:16] equals await actually I'm sorry we don't
[05:00:18] need to wait we just need to get our off
[05:00:21] just like that then the next thing is
[05:00:23] obviously if our user ID equals null to
[05:00:25] return an
[05:00:27] error just like that and then we need to
[05:00:30] get our subscription which is just get
[05:00:33] user subscription again something we've
[05:00:34] already created in the past and then if
[05:00:37] our
[05:00:38] subscription whoops sub
[05:00:40] cription do stripe customer ID obviously
[05:00:44] I need to await
[05:00:47] this there we go if the stripe custom ID
[05:00:50] equals null then we have another error
[05:00:52] so we can return error true and that's
[05:00:55] because to view this portal you need to
[05:00:56] view it as a customer so now let's get
[05:00:59] our portal session which is just equal
[05:01:01] to await make sure I spell that properly
[05:01:03] and we want to get
[05:01:05] stripe. billing this time and we want to
[05:01:08] get the billing portal specifically and
[05:01:10] we want to create a session for that so
[05:01:12] we can create it for our
[05:01:15] subscription. customer ID and we can get
[05:01:18] a return URL which is just going to be
[05:01:21] the exact same as our success URL down
[05:01:23] here so I'm just going to find where I
[05:01:24] pasted that and we're going to copy that
[05:01:26] exact code so up here for our return URL
[05:01:29] we're just going to paste that in and
[05:01:30] then finally we're going to return or
[05:01:32] I'm sorry
[05:01:33] redirect to our portal session. URL just
[05:01:37] like that so now if they click the
[05:01:39] manage session button or manage
[05:01:41] subscription button it'll bring them to
[05:01:42] their portal so let's refresh and see if
[05:01:44] that works manage subscription and you
[05:01:46] can see it's redirected me right here to
[05:01:48] this ability to actually manage
[05:01:49] everything related to my subscription
[05:01:51] now you may notice that yours doesn't
[05:01:53] quite work right away so come over here
[05:01:55] and search for customer portal or
[05:01:57] actually it may be billion
[05:02:00] portal there we go billion customer
[05:02:02] portal you need to search for this
[05:02:04] particular page right here and you just
[05:02:05] need to go through and you need to set
[05:02:07] up all the information for how your page
[05:02:09] works and you need to make sure that
[05:02:10] it's activated once that's done you
[05:02:12] should be able to actually see and use
[05:02:13] this inside your application and this
[05:02:15] allows them to update their plan and so
[05:02:17] on so for example I can update my plan
[05:02:19] to the standard plan click continue it's
[05:02:21] going to ask me to confirm I click
[05:02:23] confirm now after a quick second after
[05:02:25] the payment goes through we should see
[05:02:27] when we go back to this particular page
[05:02:29] the user is now on the standard plan and
[05:02:31] that's because the web Hook from Strike
[05:02:32] sent over to my application and said hey
[05:02:34] they went ahead and they updated their
[05:02:35] plan and it went over and updated me to
[05:02:37] this particular standard plan now now if
[05:02:40] I were to swap back to this plan that
[05:02:41] button currently doesn't work so we need
[05:02:43] to make sure we Implement that next this
[05:02:45] is luckily not too terribly difficult to
[05:02:47] do where we have our create checkout
[05:02:48] session you can see we have this else
[05:02:50] section we still need to implement for
[05:02:51] what happens when they already have a
[05:02:52] subscription and we want to update it in
[05:02:54] that case we want to call the git
[05:02:57] subscription upgrade session function
[05:03:00] which we're going to create we're going
[05:03:01] to pass in our tier and we're going to
[05:03:03] pass in our subscription and we'll say
[05:03:06] const URL is equal to that and then we
[05:03:08] will just redirect to the URL down here
[05:03:10] and there we go that's all we need to do
[05:03:12] inside of this function so let's go
[05:03:13] ahead and create an async function
[05:03:16] called get subscription update session
[05:03:19] or upgrade session it's going to take in
[05:03:21] a tier which is a paid tier name and
[05:03:24] then it's going to take in our
[05:03:25] subscription and the subscription is
[05:03:28] going to have our stripe customer ID
[05:03:30] which is a string or null and it's also
[05:03:32] going to contain our subscription and
[05:03:33] item id which we all need all of this
[05:03:35] information to make all of this work so
[05:03:37] the very first thing I can do is just
[05:03:39] check if any of these do not exist then
[05:03:41] I want to just essentially throw a new
[05:03:43] error by returning a new response and
[05:03:46] this response is going to be null status
[05:03:49] 500 then we can just go ahead and create
[05:03:51] a brand new session just like we did all
[05:03:54] the way up here we essentially want to
[05:03:55] create the same thing that we did here
[05:03:57] so I'm going to paste this down we want
[05:03:58] a billion portal session we want to
[05:04:00] create it for this particular customer
[05:04:02] we want the exact same return URL but
[05:04:04] this time we want to specify where we
[05:04:06] want them to go by giving them a type of
[05:04:08] data so this one is going to be an
[05:04:09] update confirmation then what we can do
[05:04:12] is we can say for that update confirm
[05:04:14] what we want to do is pass along what
[05:04:16] the subscription is that is just our
[05:04:19] subscription. ID so we want to get the
[05:04:21] subscription ID then what we need to do
[05:04:23] is pass along all the different items
[05:04:24] that we're going to be updating so the
[05:04:26] ID is our subscription and we want to
[05:04:28] get the item id we want to get the price
[05:04:31] that we are upgrading them to which is
[05:04:33] coming from our subscription tiers for
[05:04:35] our particular
[05:04:36] tier and we want to get the stripe price
[05:04:39] ID and then finally the quantity which
[05:04:41] in our case is always going to be one so
[05:04:43] all this complicated bit of code does
[05:04:46] let me just make sure at the bottom we
[05:04:47] return our portal. URL all this
[05:04:50] complicated bit of code does is
[05:04:51] essentially say hey bring them to that
[05:04:53] exact same billion portal but make sure
[05:04:55] you bring them exactly to the page that
[05:04:57] updates their subscription to the brand
[05:04:59] new subscription that they selected
[05:05:01] that's all that you need to do in this
[05:05:02] section so now we can see here that we
[05:05:04] need to make sure we await this function
[05:05:06] and everything should work if we give
[05:05:08] that a quick save it's still saying this
[05:05:10] could be a string or a response I should
[05:05:12] probably just make sure here I just
[05:05:14] throw a new error instead there we go
[05:05:17] that just cleans that up makes it a
[05:05:18] little bit easier so now if I come in
[05:05:20] here and I want to swap to for example
[05:05:21] the basic plan if I click on Swap you
[05:05:23] can see it's loading it's loading it's
[05:05:25] loading and now I have the ability to
[05:05:26] confirm my update to downgrade to the
[05:05:28] basic plan the last thing I need to
[05:05:30] handle is what happens when I want to do
[05:05:32] a delete so let's just come all the way
[05:05:34] up here for the delete just like in all
[05:05:36] the other ones I need to get the
[05:05:37] particular subscription that I'm dealing
[05:05:39] with and in this particular case I need
[05:05:41] to figure out if I have a customer ID
[05:05:43] and if I have a subscription ID
[05:05:46] otherwise I want to return a new
[05:05:49] response there we go and this is going
[05:05:51] to be null with a status of 500 just to
[05:05:55] say hey there was some type of error
[05:05:57] these things are required to be able to
[05:05:58] do this cancellation because if you
[05:05:59] don't have a subscription you can't
[05:06:01] cancel it now to get our session it's
[05:06:03] going to be very similar to what we did
[05:06:05] down here I'm actually going to copy
[05:06:06] this entire thing bring it all the way
[05:06:08] up here but instead of returning I'm
[05:06:10] going to redirect to the portal session.
[05:06:13] URL and this time I just want to change
[05:06:15] our type so our type here is going to be
[05:06:18] for the subscription cancel and this is
[05:06:21] going to be subscription cancel and we
[05:06:22] just need to put different information
[05:06:24] inside here it's actually very simple we
[05:06:26] just need to specify what subscription
[05:06:27] we're canceling which is our
[05:06:28] subscription. stripe subscription ID
[05:06:31] there we go make sure I put the final
[05:06:33] parentheses there and this allows me to
[05:06:34] create a URL that goes directly towards
[05:06:36] canceling so now hopefully if I click to
[05:06:39] swap to free that is essentially
[05:06:40] canceling my subscription and we should
[05:06:42] see it redirects me to the page that
[05:06:43] says are you sure you want to cancel
[05:06:45] your plan boom there we go I and cancel
[05:06:47] right there if I want to obviously I'm
[05:06:48] not going to do that because I want to
[05:06:49] still maintain my subscription now the
[05:06:51] final thing we need to do to make sure
[05:06:52] we handle everything related to our
[05:06:54] script subscriptions is if we search for
[05:06:56] to-do you'll notice we need to remove
[05:06:58] our stripe subscription on this
[05:06:59] particular page when a user deletes
[05:07:01] their account this is actually super
[05:07:03] easy to do with stripe so we can come
[05:07:05] all the way up here we can import stripe
[05:07:11] from stripe there we go and then we can
[05:07:15] say that we want to get a small stripe
[05:07:17] by creating a new stripe with our
[05:07:20] EnV that is coming from here EnV dot we
[05:07:24] want to get our stripe secret key so now
[05:07:26] we have a new stripe instance we can
[05:07:28] work on and down here we can just say
[05:07:30] stripe do subscriptions dot whoops Not
[05:07:32] subscription items we want to get
[05:07:34] subscriptions. cancel and we just pass
[05:07:36] it in the ID of the thing that we want
[05:07:37] to cancel so that's actually relatively
[05:07:40] easy so before we delete our user we
[05:07:42] want to do that all the way up here and
[05:07:43] we can say const
[05:07:46] user
[05:07:49] subscription equals get user
[05:07:51] subscription and we want to get the user
[05:07:54] subscription for our user ID which is
[05:07:57] our event. data. ID there we go give
[05:08:00] that a quick await and then with our
[05:08:02] user subscription we can pass in the
[05:08:05] stripe subscription ID but we only want
[05:08:07] to do this if our stripe subscription ID
[05:08:10] is not equal to
[05:08:12] null there we go so now if we have a
[05:08:15] user subscription and the ID is not
[05:08:17] equal to null then we're going to go
[05:08:18] ahead and we're going to cancel that
[05:08:20] subscription for them we can just throw
[05:08:21] a quick await on that and that's all we
[05:08:23] need to do to get that to work there we
[05:08:25] go we can remove that to do and luckily
[05:08:27] that was super straightforward and we've
[05:08:29] actually done everything we need to do
[05:08:30] with our entire subscription section we
[05:08:32] don't have anything left the only two
[05:08:34] sections we have left is going to be our
[05:08:35] analytics and it's going to be the thing
[05:08:37] that allows us to render the app
[05:08:39] application the banner on another
[05:08:41] person's website now that sounds like
[05:08:43] it's going to be really complicated but
[05:08:44] it's actually not that bad and the
[05:08:46] amount of code for it is going to be
[05:08:47] essentially one single file so let's go
[05:08:49] ahead and work on making this actually
[05:08:50] show up on other people's websites so
[05:08:52] we're going to close out everything
[05:08:53] we're kind of at almost a new chapter of
[05:08:55] this application and inside of our API
[05:08:57] we're going to create a brand new folder
[05:08:58] and this is going to be for products
[05:09:00] slash we want to get our product ID and
[05:09:04] we want to get the banner and then
[05:09:05] directly inside that Banner folder we
[05:09:08] can create a file called route
[05:09:10] .ts this is going to be for rendering
[05:09:12] out our entire thing so we can just say
[05:09:14] export function this is going to be an
[05:09:16] async
[05:09:18] function called git this is going to
[05:09:20] retake in our request which is a next
[05:09:24] request and it's also going to take in
[05:09:25] our
[05:09:27] prams which is our product
[05:09:31] ID so we can say product ID is a string
[05:09:35] there we
[05:09:36] go looks like I have some spelling or
[05:09:38] things wrong
[05:09:40] get that spelled properly to pams and
[05:09:43] make sure I also hook all this up
[05:09:45] correctly looks like I'm just missing a
[05:09:47] parentheses or not a parenthesis there
[05:09:48] we go bracket and it looks like I also
[05:09:51] forgot another bracket right
[05:09:53] there there we go now we can give that a
[05:09:56] quick save and that's all of our
[05:09:57] parameter information taken care of now
[05:09:59] the first thing I want to do is get our
[05:10:00] headers so we're going to say headers
[05:10:02] just like
[05:10:03] that then what I want to do is I want to
[05:10:05] get whatever URL the person is calling
[05:10:08] our page from because what's going to
[05:10:09] happen is on our products page they're
[05:10:11] going to come to our products page and
[05:10:12] click add to site and they're going to
[05:10:13] copy this code and they're going to
[05:10:15] paste this code in their application and
[05:10:16] it's going to call our site now we want
[05:10:18] to determine what URL they're calling us
[05:10:20] from because that is important in
[05:10:22] determining which product they're
[05:10:23] associated with and we want to make sure
[05:10:25] that the product associated with this
[05:10:27] URL is only ever called from that URL so
[05:10:31] let's get the requesting URL and this is
[05:10:34] a little bit complicated to get from our
[05:10:36] headers map what we need to do is we
[05:10:37] need to get either the F that's where
[05:10:40] they're coming from or we need to get
[05:10:42] the headers map. origin and this again
[05:10:45] is going to be where they are coming
[05:10:47] from one of these is going to give us
[05:10:48] the correct information on where they're
[05:10:49] coming from if neither of these have
[05:10:51] information so if our requesting URL is
[05:10:54] equal to null then we can just return
[05:10:56] not found essentially anyone that calls
[05:10:59] this code not from the correct URL or if
[05:11:01] they don't have a URL they're going to
[05:11:02] get the code not found the next thing we
[05:11:05] need to do is determine what the country
[05:11:06] code for the user is going to be so we
[05:11:08] can say get country code and we're going
[05:11:11] to get that based on our request and
[05:11:13] let's create a function for that get
[05:11:18] country code there we go this is going
[05:11:20] to take a request which is a next
[05:11:22] request and then inside of here we have
[05:11:24] information that's really useful we can
[05:11:26] say Geo and this is going to give us
[05:11:28] their country and here we can say if
[05:11:31] that is not equal to null then we can
[05:11:33] just return the request. goo. country so
[05:11:37] if they have a country associated with
[05:11:38] them it's going to return that now
[05:11:40] unfortunately this does not work in
[05:11:42] development it'll always return null in
[05:11:44] development and that's because it
[05:11:46] depends on your actual hosting provider
[05:11:48] to provide this information so versel
[05:11:50] for example if you deploy to versel they
[05:11:52] will fill in this go information for you
[05:11:54] so for testing purposes if our process.
[05:11:57] env. node environment is equal to
[05:12:00] development well in that case we're
[05:12:01] going to return EnV and make sure we get
[05:12:04] that from our server we're going to
[05:12:06] return our test country code so for some
[05:12:09] some reason we're not able to actually
[05:12:11] get our country we're going to return to
[05:12:13] them a country code so for example in
[05:12:14] development and then when you're in a
[05:12:16] real world application this should fill
[05:12:17] in its information for example if you're
[05:12:19] on ver cell so now let's implement this
[05:12:21] test country code inside of our
[05:12:23] environment variables on our server test
[05:12:26] country code z.
[05:12:28] string there we go and then inside of
[05:12:31] our EnV folder or EnV file I'm sorry I'm
[05:12:34] going to create another section that's
[05:12:35] called development test country code and
[05:12:38] for now let's just say that I'm
[05:12:39] currently residing in India so that way
[05:12:41] we can test what that looks like we can
[05:12:43] bring this entire section over into our
[05:12:45] example and paste this in for example
[05:12:47] just like that so now we can test what
[05:12:49] this code will look like and here if our
[05:12:53] country code is equal to null again
[05:12:57] return not found because we were unable
[05:12:59] to find the country code for this
[05:13:00] particular user based on their Geo
[05:13:02] information so we don't want to do
[05:13:03] anything now the next thing I want to do
[05:13:04] is call a rather complicated database
[05:13:06] query that's going to get our product
[05:13:08] our disc account and our country based
[05:13:10] on whatever ID and country code we pass
[05:13:13] in so that's a rather complicated
[05:13:15] function that we need to worry about
[05:13:16] creating so we can come all the way over
[05:13:18] into our server into our database go
[05:13:20] into the product section and let's
[05:13:21] create that exact function so all the
[05:13:23] way down
[05:13:24] here async function we want to get this
[05:13:28] this is the
[05:13:30] internal version of the function just
[05:13:32] like that and it's taken in two
[05:13:34] parameters an ID and a country code
[05:13:39] our ID is a string and our country code
[05:13:42] is a string as well now inside of here
[05:13:44] we're going to get some data that's
[05:13:45] going to be calling await dbquery and we
[05:13:48] want a query on the product table and we
[05:13:50] want to find the very first product
[05:13:52] where our ID is equal to the particular
[05:13:54] ID that we have here so what I can do is
[05:13:56] I can say
[05:13:58] where and I can make sure that I get all
[05:14:01] this as a function I want to get equals
[05:14:04] and I want to get my ID as an ID column
[05:14:08] and what I can say is equals my ID
[05:14:10] column is equal to my ID there we go
[05:14:13] that works super great so I'm just
[05:14:14] getting the first product with that
[05:14:16] particular ID then I want to get only
[05:14:19] specific columns so I'm going to say
[05:14:20] that I want to get the ID and the clerk
[05:14:22] user ID are the only columns I want to
[05:14:24] get from this so this is everything for
[05:14:26] getting our product next I want to get
[05:14:28] specific things for that for example I
[05:14:30] want to get all of my customizations
[05:14:32] I'll set that to true I also want to get
[05:14:34] my country group discounts I'm again
[05:14:37] going to specify only certain certain
[05:14:39] columns so I'm going to say that I want
[05:14:40] to get just the
[05:14:42] coupon and I want to get just the
[05:14:44] discount percentage those are the only
[05:14:46] things that I care about from my country
[05:14:48] group discount but I also only want to
[05:14:50] get the country group discount for a
[05:14:52] specific country so I'm going to come
[05:14:53] down here I'm going to get all my
[05:14:55] country
[05:14:56] groups just like that make sure I put
[05:15:00] this inside of an object there we go and
[05:15:03] for my country groups I want to get
[05:15:05] specific columns and actually I don't
[05:15:07] want to get any columns I don't want any
[05:15:08] colums from my country groups instead
[05:15:10] what I want to get from my country
[05:15:12] groups is the countries themselves so
[05:15:15] here countries and it looks like I might
[05:15:17] have a typo somewhere because this is
[05:15:19] not showing up properly let's see here
[05:15:22] country group just like that so yes it
[05:15:23] should be country group because there is
[05:15:25] only one country group per country group
[05:15:27] discount then I want to get all of the
[05:15:29] countries and for the countries I want
[05:15:31] to get Only The Columns of ID and name
[05:15:34] that's all I care about for my country I
[05:15:36] want to get just one country and that's
[05:15:39] because I'm going to throw in a wear
[05:15:40] Clause here and this wear Clause is a
[05:15:42] rather simple wear Clause that
[05:15:44] essentially just gets me the country for
[05:15:45] a specific code so I'll say equal and
[05:15:49] code and I want to get it where my code
[05:15:52] is equal to my country code just like
[05:15:54] that so all of this rather complicated
[05:15:56] code all it's doing is getting a product
[05:15:59] the product customizations and the
[05:16:01] discount for the product for the
[05:16:03] particular country ID now I need to do a
[05:16:05] little massaging to make this data look
[05:16:07] correct so first I can get my
[05:16:12] discount and that is going to equal to
[05:16:14] getting my data and I want to get the
[05:16:16] country groups
[05:16:18] discounts. find and I want to find the
[05:16:20] discount where the discount. country
[05:16:22] group countries. length is greater than
[05:16:25] zero So based on my wear Clause here I'm
[05:16:27] only getting the country with a specific
[05:16:29] code so only one of my country groups
[05:16:31] will have a country and it will have
[05:16:33] exactly one item in the array so what
[05:16:34] I'm doing here is I'm saying hey find me
[05:16:36] the exact group that has a country
[05:16:38] that'll be my active discount for this
[05:16:40] user then I want to get my country which
[05:16:43] is just getting my discount. country
[05:16:45] group and I want to get the very first
[05:16:46] country because I only got one now what
[05:16:49] I can do is I can get my product
[05:16:50] information so this is just going to be
[05:16:52] if my data is equal to null or my data.
[05:16:56] product
[05:16:57] customization is equal to null then I'm
[05:16:59] going to return undefined otherwise I'm
[05:17:02] going to return down an object that
[05:17:03] contains my data. ID my clerk user ID
[05:17:08] Which is my data. clerk user ID and my
[05:17:11] customization which is my data. product
[05:17:13] customization so this is all my product
[05:17:15] related information so down here I can
[05:17:19] return whoops return my product I can
[05:17:24] return my discount which is going to be
[05:17:26] if my discount is equal to null then
[05:17:28] return undefined otherwise return a
[05:17:31] coupon which is my discount.
[05:17:35] coupon and my
[05:17:37] percentage which which is my discount.
[05:17:40] discount percentage finally I can add in
[05:17:42] the country here as well I'll just put
[05:17:44] it at the top like that so now I have my
[05:17:46] product my country and my discount they
[05:17:48] all could be undefined if they're not
[05:17:49] able to be found but hopefully they are
[05:17:51] able to be found so here I should be
[05:17:53] able to call this function actually
[05:17:55] after I create the internal version so I
[05:17:56] have the internal version I need to
[05:17:58] create the non- internal version so
[05:18:00] we'll just come up here copy one of
[05:18:02] these that's the create one we don't
[05:18:03] want that we'll copy this get right here
[05:18:06] and this one I'm essentially going to
[05:18:07] call this function so it's going to call
[05:18:09] this particular function this is the
[05:18:11] non- internal version and for my tags I
[05:18:14] need to see exactly what I'm using also
[05:18:15] I want to make sure my props are exactly
[05:18:17] the same so I'll copy the
[05:18:19] props paste those into here and then
[05:18:22] make sure I pass those props into my
[05:18:24] cache function now for this one I'm
[05:18:25] getting a specific or specific ID here
[05:18:28] so I can say get ID tag and pass it in
[05:18:32] my ID I also am getting information from
[05:18:35] my countries so I need a global tag for
[05:18:36] that Global tag get Global tag there we
[05:18:40] go and this one is for my
[05:18:42] cach key tags. countries I need to do
[05:18:45] the exact same thing for my country
[05:18:47] groups because when either of those
[05:18:49] change I obviously am querying both of
[05:18:51] those datas so now with that done
[05:18:53] hopefully once I close all this down go
[05:18:55] back over to here I can import this and
[05:18:57] this will essentially get me my product
[05:19:00] my discount and my country but any of
[05:19:02] them could be null the first one I'm
[05:19:03] going to check is if my product equals
[05:19:05] null if my product equals null then that
[05:19:07] means one of a few few things number one
[05:19:10] this is a bad product ID and it doesn't
[05:19:11] exist or two it means that the page that
[05:19:14] this information is being loaded on does
[05:19:16] not line up with the actual user ID that
[05:19:19] we're associated with so obviously that
[05:19:21] would be another problem and actually I
[05:19:22] just realized we're not even using our
[05:19:24] requesting URL so I should make sure I
[05:19:26] pass in the requesting URL to this
[05:19:28] function so this should take in a URL
[05:19:31] which is a
[05:19:32] string and that should obviously be
[05:19:34] passed down into here as well and then
[05:19:36] the internal function should take in a
[05:19:39] URL and here it should take in the URL
[05:19:42] because I only want to get this where
[05:19:44] the URL is also equal so we'll say URL
[05:19:47] as our URL column we can add in an and
[05:19:50] here and we'll say and are equals for
[05:19:54] our URL column is equal to our URL that
[05:19:57] way this only loads on the specific URL
[05:20:00] that we specified so now if we go back
[05:20:02] into here and our product is equal to
[05:20:04] null that means that we either loaded it
[05:20:06] on an incorrect URL or the user doesn't
[05:20:08] have access or something like that so
[05:20:10] again return not found now if we do have
[05:20:12] a product though that means that we can
[05:20:14] actually log this as a view for our
[05:20:16] users so we can say create product view
[05:20:20] this is going to be a function we're
[05:20:21] going to create in just a second because
[05:20:22] this is going to count towards their
[05:20:24] subscription usage if they go to the
[05:20:25] subscription page here it's going to
[05:20:27] count against their monthly usage so we
[05:20:29] can say for a specific product ID we're
[05:20:32] also going to do it for our country ID
[05:20:35] which is
[05:20:37] country. ID and this country ID could be
[05:20:39] null which is perfectly okay and user ID
[05:20:42] which is our product. clerk user ID now
[05:20:45] the reason it's okay that our country
[05:20:46] IDE is null is if for some reason the
[05:20:48] user coming from a country that we don't
[05:20:50] recognize in our database we still are
[05:20:52] going to log that as a view to the
[05:20:54] particular user and we'll just Mark that
[05:20:55] as undefined inside of our database
[05:20:57] that's how the parody deals clone is or
[05:20:59] that's how parody deals the actual site
[05:21:01] works so that's how our site's going to
[05:21:03] work as well you could change that if
[05:21:04] you don't like how that works so let's
[05:21:06] go into our product views and we need to
[05:21:08] create a function for creating things so
[05:21:11] export async function this is called
[05:21:14] create product view just like that and
[05:21:17] I'm actually just going to paste this
[05:21:18] code in it's super simple we take in the
[05:21:19] product ID country ID and user ID and
[05:21:22] all we do is we just insert that into
[05:21:23] our database and then we revalidate our
[05:21:25] cache for that particular product View
[05:21:28] and we can even do it for the ID as well
[05:21:29] I didn't include that in here so let's
[05:21:31] throw in the ID so instead of row count
[05:21:33] here we're going to be
[05:21:36] returning and we're going to get the ID
[05:21:38] which which is our product view table.
[05:21:40] ID just like
[05:21:42] that so this is going to give us an
[05:21:44] array with an ID just like that so if
[05:21:46] our ID actually let's just call this new
[05:21:51] row there we go new
[05:21:54] row is not equal to
[05:21:57] null then we can pass along our new row.
[05:22:00] ID there we go now that's working much
[05:22:02] better we're creating our product View
[05:22:04] and we're making sure we're setting all
[05:22:05] of our caching information now back in
[05:22:07] our route here we can just make sure we
[05:22:09] create that ra row just like that now
[05:22:11] the next thing we need to do is to check
[05:22:12] to see if they can actually show this
[05:22:14] Banner so I'm going to come in here I'm
[05:22:16] going to say can they show the banner
[05:22:17] which is something that I'm going to
[05:22:19] create a function for just like this can
[05:22:22] show discount banner and then here we
[05:22:25] have the ability to do all this stuff so
[05:22:26] to get the can show discount Banner I'm
[05:22:28] actually going to do that up here can
[05:22:31] show Banner is equal to that so this can
[05:22:34] show Banner function is just a
[05:22:36] permission we need to create so let's do
[05:22:37] that real quick and then I'll explain
[05:22:38] how all the rest of this code is working
[05:22:40] so inside of our server we're going to
[05:22:42] go into our permissions export a async
[05:22:46] function can show banner and that's
[05:22:48] going to take in the exact same user ID
[05:22:50] all the rest of these take in and I'll
[05:22:52] just copy this code because it's very
[05:22:54] similar so instead of getting our
[05:22:55] product count we're going to get our
[05:22:57] product view count just like that and
[05:22:59] this is a function that we've already
[05:23:00] implemented I just need to make sure I
[05:23:02] pass in the start date and this is going
[05:23:04] to be a new date and this is going to be
[05:23:08] start of
[05:23:11] month there we go so just getting all
[05:23:13] the count for the entire
[05:23:15] month there we go I just realized while
[05:23:18] editing this video that I actually
[05:23:20] forgot to update this tier section down
[05:23:22] here so this should be called the
[05:23:25] product views and then obviously the
[05:23:28] product views must be less than the
[05:23:30] maximum number of views that they can
[05:23:31] have so max number of visits I forgot to
[05:23:33] update this when I was doing the video
[05:23:35] but here is the updated code and when
[05:23:36] you download the code from GitHub it
[05:23:37] will be up updated now if we go back to
[05:23:39] this particular page we can import this
[05:23:41] function and this will return true if
[05:23:43] they have less than in our case 100,000
[05:23:45] pricing page visits so first we check
[05:23:47] how many pricing page visits they have
[05:23:49] and make sure that they have few enough
[05:23:50] that we can actually do this then we add
[05:23:52] a brand new visit to it and then if we
[05:23:54] can show the banner we're going to make
[05:23:56] sure we do so if we can't we return not
[05:23:57] found if our country or our discount is
[05:24:00] null we also return not found and then
[05:24:02] finally we get to the point where we
[05:24:04] return JavaScript down to the user all
[05:24:06] of this code up here is just checking to
[05:24:07] make sure can this user see this
[05:24:09] JavaScript then we can actually return
[05:24:11] the JavaScript so I'm going to call a
[05:24:13] function called get JavaScript just like
[05:24:16] that and this is going to take in our
[05:24:18] product our
[05:24:19] country our discount and it's going to
[05:24:22] take in can remove branding as well
[05:24:25] which takes in our product. clerk user
[05:24:27] ID there we go so now let's create this
[05:24:30] simple function we'll do it down
[05:24:32] here just like that now for our actual
[05:24:35] typing of everything I'll paste that in
[05:24:37] we have our product which has all of our
[05:24:38] customization information our country
[05:24:40] name our discount and if we can remove
[05:24:42] The Branding then inside of here what I
[05:24:44] want to do is I want to take my banner
[05:24:46] component and render it as static markup
[05:24:49] so there's a function called render to
[05:24:53] static markup and we can get this here
[05:24:57] from awaiting the import of
[05:25:01] react-dom server there we go and now you
[05:25:04] may think why would I await this import
[05:25:06] directly inside of here when I could
[05:25:08] just just import it at the top of my
[05:25:09] page and that's because nextjs actually
[05:25:12] prevents you from importing this
[05:25:13] function if you import it it immediately
[05:25:15] crashes your site it's annoying I don't
[05:25:17] know why they do that but if you want to
[05:25:19] be able to import this function you need
[05:25:20] to actually do it in this Dynamic import
[05:25:23] way so that's why we're doing this to
[05:25:24] get around next js's limitations then we
[05:25:27] can return some string and the string is
[05:25:29] just going to be JavaScript code so I
[05:25:31] can say const Banner is equal to
[05:25:35] document. create element
[05:25:38] and we're going to create a div and this
[05:25:40] is just code that's going to run on the
[05:25:42] user's browser then I can come in here
[05:25:44] and set the inner HTML inner HTML is
[05:25:47] going to be equal to and this is where I
[05:25:49] want to render all of my stuff to a
[05:25:51] static markup so inside of here put some
[05:25:54] quotes like that and I can say render to
[05:25:56] static markup and I can pass it in
[05:25:59] create element whoops which allows me to
[05:26:01] pass in my element which is a banner
[05:26:03] that's my component and then we need to
[05:26:05] pass in all the props for this
[05:26:07] particular component that we want to
[05:26:08] render so let me make sure I get all my
[05:26:10] parentheses closed up there we go so now
[05:26:13] inside of here I can pass along my
[05:26:16] message this is my product.
[05:26:18] customization location message then we
[05:26:21] have my
[05:26:22] mappings so our country maps to our
[05:26:25] country. name my coupon maps to my
[05:26:29] discount.on and then finally my discount
[05:26:33] Maps 2 taking my discount. percentage
[05:26:36] multiplying it by 100 just like that and
[05:26:39] let's make sure this is spelled mappings
[05:26:41] and this actually needs to be a string
[05:26:43] so we'll just convert this to a
[05:26:45] string there we go that gives us our
[05:26:48] discount information now we can pass
[05:26:50] along our
[05:26:53] customization which is our product.
[05:26:55] customization and then finally can
[05:26:57] remove branding whoops remove branding
[05:27:00] is the last thing we need to pass along
[05:27:02] so this is all the stuff to pass along
[05:27:04] to create our Banner now that we've
[05:27:05] created our Banner with all the inner
[05:27:07] HTML that it needs needs we can come in
[05:27:09] here and we can do a quick document.
[05:27:12] query
[05:27:13] selector we want to get a query selector
[05:27:15] specifically for whatever our product.
[05:27:19] customization Banner container is so I
[05:27:21] want to search for that Banner container
[05:27:23] I then want to prepend onto that all of
[05:27:26] the children of my banner
[05:27:29] component just like that so essentially
[05:27:32] I'm creating this Banner component
[05:27:33] filling it with all my HTML and taking
[05:27:35] everything from it and prepending it to
[05:27:37] the beginning of this there we go and
[05:27:40] now the final thing that I want to do is
[05:27:41] I just want to call replace just like
[05:27:44] this and I want to remove all the white
[05:27:45] space information from here that I don't
[05:27:47] actually need so I'm just going to copy
[05:27:49] over this quick replace statement this
[05:27:51] replace statement just gets rid of all
[05:27:53] the additional new lines in my code to
[05:27:55] make sure everything is super clean and
[05:27:56] tidy because obviously with using this
[05:27:59] syntax right here of these back ticks it
[05:28:01] actually leaves new lines in your code
[05:28:02] and JavaScript won't know how to parse
[05:28:04] that potentially so I'm just getting rid
[05:28:05] of all those new lines and this right
[05:28:07] here is going to return to me some
[05:28:08] JavaScript that I'm getting right here
[05:28:10] for my response and the last thing I
[05:28:12] need to do is make sure I tell my
[05:28:14] response that this is Javascript so in
[05:28:16] my headers I'm going to pass along the
[05:28:18] content type header of
[05:28:21] text/javascript so I'm essentially
[05:28:23] anytime someone calls this API they're
[05:28:24] either going to get not found or a bunch
[05:28:26] of JavaScript on their page so now let's
[05:28:28] test and see if this actually works I'm
[05:28:30] going to go over to my products page I
[05:28:31] have this product right here for Local
[05:28:33] Host 5500 I'm going to try to add that
[05:28:35] to a site and click copy code now this
[05:28:38] is a site right here that just has some
[05:28:39] random text on it I'm just going to
[05:28:41] paste this JavaScript script tag right
[05:28:43] into here that's all I need to do and
[05:28:45] now I can essentially access this site
[05:28:48] on Port 5500 so if I open that up this
[05:28:50] is that site being accessed on Port 5500
[05:28:53] and when I refresh it's currently not
[05:28:54] showing me my application I'm at the URL
[05:28:58] 1271 5500 and if I look here it
[05:29:01] specifically specifies the URL must be
[05:29:03] Local Host 5500 so let's make sure we go
[05:29:05] to Local Host 5500 and see if that works
[05:29:07] you you can see we're on that Local Host
[05:29:09] and it's still not working I think part
[05:29:11] of the reason why this is is because we
[05:29:13] need to make sure we remove the trailing
[05:29:15] Slash from our requesting URL so when we
[05:29:18] get our product Banner we have our URL
[05:29:20] here and all the way down where we're
[05:29:22] using that internally I want to make
[05:29:23] sure that we remove the trailing Slash
[05:29:26] from it whoops that's the wrong one
[05:29:27] product Banner there we go and here I
[05:29:30] want to say
[05:29:32] remove trailing slash and pass in my URL
[05:29:36] just to make sure that's not the
[05:29:37] potential problem we're having let's
[05:29:38] refresh it looks like that didn't fix
[05:29:40] the issue so now the best thing that we
[05:29:42] can do is just add in some console logs
[05:29:43] to see what's going wrong the very first
[05:29:45] thing is just let's see if we get to
[05:29:47] this particular point we'll just say hi
[05:29:49] right here give this a quick refresh
[05:29:51] check out our console and see we are
[05:29:53] printing out high so it's getting to
[05:29:54] that point let's get to this point and
[05:29:56] we're going to print out our product
[05:29:58] hopefully this prints out something
[05:30:00] instead of null we'll refresh and we'll
[05:30:02] scroll up and we do have all of our
[05:30:03] product information so we know we're
[05:30:05] getting to that point that's working
[05:30:06] fine the next step is we can down here
[05:30:08] and see can we show the banner so let's
[05:30:10] check to see if that works give that a
[05:30:12] quick refresh and it says we can show
[05:30:13] the banner so now let's check to see if
[05:30:15] our country and our discount are
[05:30:17] possibly set to null so give this a
[05:30:19] quick refresh here and it looks like in
[05:30:21] our case our country is India and our
[05:30:23] coupon is set so obviously all of that
[05:30:25] is correct we're getting all the way to
[05:30:27] this JavaScript section so maybe
[05:30:28] something in our JavaScript is actually
[05:30:30] Incorrect and if we look unexpected
[05:30:32] identifier text you can see there's
[05:30:34] currently a problem with our code so
[05:30:36] let's go to the sources Tab and see what
[05:30:37] are actual JavaScript looks like that's
[05:30:39] being imported so we give this a quick
[05:30:41] refresh pull this over and you can see
[05:30:43] Local Host 3000 it's importing this
[05:30:45] particular Javascript file so we're
[05:30:47] getting our document creating the
[05:30:48] element setting the banner HTML and as
[05:30:50] you can see I'm using double quotes
[05:30:52] multiple times so I need to get rid of
[05:30:53] one of those sets of double quotes so
[05:30:55] here change this to single quotes change
[05:30:58] that to single quotes that should fix
[05:30:59] the problem refresh and you can see hey
[05:31:01] our Banner is showing up and it's being
[05:31:03] stuck directly to the top of the page
[05:31:04] which is exactly what we want if we were
[05:31:06] to go ahead and then change change the
[05:31:08] url of this so let's say edit and we're
[05:31:10] going to change the url so it's only on
[05:31:12] 5501 give that a quick save it's been
[05:31:15] updated now if I come back to here and
[05:31:16] refresh you can see it no longer shows
[05:31:18] up on our page also if we go to our
[05:31:20] subscription you can see we've had seven
[05:31:22] monthly usages because we viewed this
[05:31:24] page seven separate times and if I
[05:31:26] refresh this a bunch of times you'll
[05:31:27] notice it doesn't actually add any
[05:31:29] usages as you can see here it's still
[05:31:31] set to seven that's because it's not
[05:31:32] able to show because the URL is
[05:31:34] incorrect but if I were to go back to
[05:31:36] our product change the url back to what
[05:31:39] it should be so we can edit this back to
[05:31:41] 5500 click save now when I go here and I
[05:31:44] refresh the page a couple times showing
[05:31:46] this banner and go back to my
[05:31:48] subscription you can see now we have 11
[05:31:50] out of 100,000 pricing page visits so
[05:31:52] now the nice thing here is we're finally
[05:31:54] to the last section which is just
[05:31:55] dealing with our analytics and honestly
[05:31:57] it's not too bad other than a few rather
[05:32:00] complicated javascri I'm sorry SQL
[05:32:02] queries really that's the only thing
[05:32:04] complicated about all of our analytics
[05:32:06] so let's just make this a little bit
[05:32:07] easier to work with we're going to
[05:32:08] minimize and close everything down again
[05:32:10] because we're kind of at a new section
[05:32:12] and what I want to do in my dashboard is
[05:32:13] create a new folder called analytics and
[05:32:17] inside of here I'll create a page. TSX
[05:32:20] so we'll export a async function make
[05:32:25] sure it's
[05:32:26] default this is going to be called
[05:32:29] analytics
[05:32:31] page now this is going to have some
[05:32:33] search prams on the page so we'll say
[05:32:35] search prams just like that and to type
[05:32:38] out our search
[05:32:41] prams whoops search prams we're gonna
[05:32:45] have a few different parameters first of
[05:32:47] all we're going to have an interval so
[05:32:48] do we want to do it last s days last 30
[05:32:50] days and so on which is going to be a
[05:32:52] string we're going to have a time zone
[05:32:55] which is going to be a string and we're
[05:32:56] going to have a product ID which is
[05:32:58] going to be a string and all of these
[05:33:00] are optional whether or not we specify
[05:33:02] them or not it doesn't really matter so
[05:33:03] here's our analytics page let's come in
[05:33:05] here return null just so we have
[05:33:07] something showing up and if we go to
[05:33:08] that page you can see it's showing
[05:33:10] nothing now just like with all of our
[05:33:11] Pages we're going to check for our user
[05:33:13] ID using this off to make sure we have
[05:33:15] access to that to do all of our
[05:33:16] different queries that we need now for
[05:33:18] our application I'm going to come in
[05:33:19] here and I'm just going to render out a
[05:33:20] simple H1 for the analytics at the very
[05:33:22] top of our page so we have that showing
[05:33:24] up and then what I want to do is I want
[05:33:25] to check to see if the user has
[05:33:27] permission and the permission is going
[05:33:29] to be the can access analytics
[05:33:31] permission if they have access to that
[05:33:33] I'm going to render this otherwise I'll
[05:33:35] render out a fallback and inside of here
[05:33:37] I want render out essentially a flex
[05:33:39] column grid layout so Flex column with a
[05:33:42] gap of eight and inside of here I want
[05:33:44] to render out each of my different grids
[05:33:46] inside of a card I'm sorry each of my
[05:33:48] different charts inside of a card so
[05:33:49] we're going to have like a views by Day
[05:33:52] card and we're going to render out all
[05:33:53] the information for that make sure I
[05:33:56] spell that properly we're also going to
[05:33:58] have different charts as well so here
[05:34:00] we're going to have a views by
[05:34:02] PPP card and then finally views by
[05:34:06] country card there we go so we can
[05:34:08] determine where all these views came
[05:34:09] from for different analytics sections
[05:34:11] now each of these cards is going to be
[05:34:13] nearly identical I'll Pace down exactly
[05:34:15] what they look like and I'll cover each
[05:34:16] one of them individually so for our
[05:34:18] cards we just need to make sure we
[05:34:20] import all the different things that
[05:34:21] we're using inside of these cards and
[05:34:23] then finally each of these cards has
[05:34:25] essentially three different things that
[05:34:26] go on first we have chart data that we
[05:34:28] need to get based on a function that's
[05:34:30] accessing our database we'll comment
[05:34:31] that out for now as well as the props
[05:34:33] that we have the next thing we have is a
[05:34:35] card that says like visitors per day and
[05:34:36] then it renders out what that chart is
[05:34:38] given the data we get from our database
[05:34:40] and as you can see this exact same
[05:34:42] pattern repeats for all three of our
[05:34:43] different charts so each one of them
[05:34:45] renders out a card it gets data from our
[05:34:47] database and it puts that inside of a
[05:34:48] chart so if we remove that you can see
[05:34:50] we just have titles with no charts at
[05:34:52] all so that at least is giving us a
[05:34:54] starting point for our application so to
[05:34:56] get started I'm going to focus on the
[05:34:57] views by country card because that is
[05:34:59] going to be the easier of the ones to
[05:35:01] implement and then once we understand
[05:35:02] how that works the rest of them should
[05:35:04] relatively fall into place so let me
[05:35:06] make sure I get our props in here just
[05:35:08] like that make sure that they have all
[05:35:10] of the typing information correct for
[05:35:12] them there we go that's exactly what we
[05:35:14] need so now we need to create this git
[05:35:16] views by country chart data that's going
[05:35:18] to be inside of our database folder so
[05:35:21] in our server in our database and our
[05:35:23] product views that's where we're going
[05:35:24] to access this information we can just
[05:35:26] minimize all these ones that we already
[05:35:28] have existing and I want to create a
[05:35:30] brand new
[05:35:32] function export function get this
[05:35:35] information just like that and this is
[05:35:38] going to be pretty much exactly what we
[05:35:39] have up here but obviously the internal
[05:35:42] function is going to be this internal
[05:35:44] function the tags I'm going to come back
[05:35:46] to so we're going to get those in a
[05:35:47] little bit and then we want to make this
[05:35:49] internal version of the
[05:35:51] function now before we start working on
[05:35:53] this function the very first thing we
[05:35:54] need to do is to specify a constant
[05:35:56] variable called chart intervals and this
[05:35:59] is just going to make it really easier
[05:36:01] for us to swap between like last 7 days
[05:36:03] last 30 days and so on so for example I
[05:36:05] could say last s days
[05:36:08] and that is going to have information
[05:36:09] like a label which is last 7 days and
[05:36:12] it's going to have a start date for
[05:36:14] example make sure I spell that properly
[05:36:16] so we could say start date is going to
[05:36:18] be sub days and we're going to take a
[05:36:21] new date and we're going to subtract 7
[05:36:24] days from it so this is essentially
[05:36:25] going to be 7 days ago now we obviously
[05:36:28] want to do this for all the different
[05:36:30] fields we're going to have I'm only
[05:36:31] going to be creating three just because
[05:36:33] it's going to be simpler but you can
[05:36:35] create as many as you want so let's go
[05:36:37] all the way to 365 this one is subtract
[05:36:40] 30 days last 30 days last 365 days is
[05:36:45] going to be
[05:36:46] 365 just like that so now with this
[05:36:49] chart interval we essentially can get
[05:36:51] all the information we need for how to
[05:36:52] do these queries and how to display them
[05:36:54] to the user so let me get our props
[05:36:56] typed into here we have our time zone
[05:36:57] product ID user ID and interval and the
[05:37:00] time zones required product ID is
[05:37:02] optional because we can do something for
[05:37:03] all the products instead of just one our
[05:37:05] user ID is required and the interval is
[05:37:07] is essentially just going to be either
[05:37:08] last 7 days last 30 days so on if I
[05:37:10] hover over the type you can see it's
[05:37:12] going to be one of these different types
[05:37:13] of intervals so it's going to be the
[05:37:14] data directly inside of one of these
[05:37:16] different intervals now this is going to
[05:37:17] be by far the most complicated query
[05:37:19] these three queries are but the nice
[05:37:21] thing about these queries is that we
[05:37:22] have drizzle which makes writing complex
[05:37:24] queries possible and easier than
[05:37:26] anything else so the very first thing I
[05:37:27] want to do is convert everything to the
[05:37:29] correct time zone so I'm going to get my
[05:37:30] start date which is a start of day and I
[05:37:33] want to get that to a zoned time that's
[05:37:35] going to come from a new library so
[05:37:37] we'll come into here we'll just cancel
[05:37:39] out of that stripe stuff npmi dat FNS TZ
[05:37:44] that's the time zone specific version of
[05:37:46] the library and we're actually getting
[05:37:47] an error and that's because we don't
[05:37:49] even need this Library anymore literally
[05:37:52] today as I'm recording this they updated
[05:37:54] the date FNS library and added time zone
[05:37:56] support so we don't actually even need
[05:37:58] this Library anymore and we can do this
[05:38:00] directly in date FNS so to get the start
[05:38:02] of the day we're going to say new date
[05:38:04] just like this and actually this is not
[05:38:06] a new date this is our inter
[05:38:08] dat so we're going to get the start of
[05:38:10] whatever our start date is and then
[05:38:11] we're going to convert that to our time
[05:38:13] zone so we can just say in TZ which is
[05:38:15] coming from date FNS we'll have to
[05:38:17] probably manually import this import
[05:38:20] TZ from date FNS SL TZ and it's going to
[05:38:24] be at dat FNS TZ so we just put an at at
[05:38:27] the front of that and we will need to
[05:38:29] actually install this Library so we'll
[05:38:31] just come in here install the new date
[05:38:33] FNS Library that's built into date FNS
[05:38:35] which is incredibly nice make sure I all
[05:38:37] that properly that should install the
[05:38:39] brand new library for us there we go so
[05:38:41] now what I can actually do is make sure
[05:38:43] that this Imports properly looks like it
[05:38:45] did and down here I can call this TZ
[05:38:47] function and pass in our time zone there
[05:38:49] we go it'll now convert this to the
[05:38:51] correct time zone the next thing I need
[05:38:52] to do is to actually get a subquery so
[05:38:55] I'm going to get our product
[05:38:57] subquery there we go this is going to be
[05:38:59] equal to calling get product subquery
[05:39:04] and a subquery inside of drizzle is just
[05:39:06] a way for us to combine multiple queries
[05:39:09] together in an easier to use way I'll
[05:39:10] show you what I'm talking about so we're
[05:39:12] going to get a user ID which is a string
[05:39:14] I'm sorry we don't need to type this
[05:39:15] here and a product ID whoops product
[05:39:19] ID there we go so now we can create this
[05:39:22] function function just like that this is
[05:39:25] going to take in a user ID which is a
[05:39:27] string and a
[05:39:28] product ID which is a string or it's
[05:39:31] going to be
[05:39:32] undefined there we go and now what we
[05:39:35] can do in here is we can return d Dot
[05:39:37] and there's this dollar sign width we
[05:39:39] need to give it a name in our case it's
[05:39:41] products and then we can specify what we
[05:39:43] want this to represent and this is just
[05:39:45] another DB query so in this case we're
[05:39:47] going to be selecting all of the
[05:39:48] products that we can actually access
[05:39:50] using this user ID and product ID again
[05:39:53] we're breaking our query down into
[05:39:54] multiple smaller chunks which makes
[05:39:56] working with it much easier so we're
[05:39:57] going to be selecting from the product
[05:39:59] table all of the information where and
[05:40:02] we want to do an and query and an equals
[05:40:04] query make sure I import equals there we
[05:40:06] go and we we want to check to see when
[05:40:08] the product table. ID or I'm sorry user
[05:40:12] ID is equal to our user ID just like
[05:40:14] that and we also in here need to add
[05:40:16] another check but we only want to add
[05:40:18] this if our product ID is not equal to
[05:40:20] null so if it's equal to null we're
[05:40:22] going to return undefined otherwise
[05:40:24] we're going to return our product table.
[05:40:28] ID is equal to our product ID so what
[05:40:30] this is doing is going to check okay get
[05:40:32] all the products for our particular user
[05:40:34] and if we passed along a product ID only
[05:40:36] get the product for that specific ID so
[05:40:39] this right here is going to be a
[05:40:40] subquery we can use that gives us all
[05:40:42] the valid products so here is
[05:40:43] essentially a limited list of the
[05:40:45] products that we have access to I'm then
[05:40:47] going to create another subquery but
[05:40:49] this one is for our product views so
[05:40:51] we'll call this product view subquery I
[05:40:54] might as well just call it SQ same thing
[05:40:55] up here just make it a little bit easier
[05:40:56] to work with this is going to be another
[05:40:58] DB this time I'm going to say DB dollar
[05:41:01] sign width this one is product views and
[05:41:05] then this one is going to be as another
[05:41:07] DB and to be able to combine together
[05:41:09] subqueries so if I want to use this
[05:41:11] products subquery in my new query I can
[05:41:14] just say with and pass along the product
[05:41:17] subquery so products subquery just like
[05:41:19] that so now I have this as a table that
[05:41:21] I can join on and so on so what I want
[05:41:24] to do is I want to select some
[05:41:25] information I'll get to what I'm
[05:41:26] selecting in just a little bit I want to
[05:41:28] get it from the product view table and I
[05:41:30] want to do some joins so I'm going to
[05:41:32] put an inner join here on my product SQ
[05:41:35] so I'm going to be joining on this
[05:41:36] particular table this subquery that I
[05:41:39] created where my
[05:41:40] subquery whoops
[05:41:43] subquery doid is equal to my product
[05:41:47] view table. product ID so here I'm
[05:41:51] joining these two tables together so I
[05:41:52] have a limited list of only the products
[05:41:54] that I have access to and I'm combining
[05:41:56] them with my product view table to get
[05:41:58] all the product views for the products I
[05:42:00] have access to then I want to get the
[05:42:02] information for the country as well so
[05:42:04] I'll join my country table where my
[05:42:07] country table. ID is equal to the
[05:42:10] product view tablecountry ID so now I'm
[05:42:12] getting all my product and Country
[05:42:14] information from here and I only want to
[05:42:16] get it where the visited at row visited
[05:42:20] at row right here is greater than or
[05:42:24] equal to visited at and start date there
[05:42:28] we go so how do I get this visited at
[05:42:30] row well that comes from my select I can
[05:42:32] come in here and say that I want to get
[05:42:35] a visited at row and this visited at row
[05:42:37] is going to be some custom SQL because I
[05:42:38] need to convert everything using time
[05:42:40] zones so I'm going to pass in my product
[05:42:42] view table. visited at and I want to
[05:42:44] convert it to a Time Zone by saying at
[05:42:46] time zone and passing in the time zone
[05:42:49] that I want to convert to now to make
[05:42:51] sure that everything lines up and works
[05:42:52] properly I need to actually inline my
[05:42:54] parameters here so that way it knows
[05:42:56] what time zone to convert to and I need
[05:42:58] to give this an as property just to make
[05:43:00] sure that it actually will render
[05:43:01] properly if you don't give your custom
[05:43:03] SQL an as property it won't run inside
[05:43:05] of drizzle so this gives me my visited
[05:43:07] ad converted to the correct time zone
[05:43:09] and I'm comparing it against this time
[05:43:11] zone right here the next thing that I
[05:43:13] need to do is to get my country group ID
[05:43:16] which is my country table. country group
[05:43:19] ID I want to get my country name which
[05:43:22] is my
[05:43:23] country table. name and then finally
[05:43:27] country code which is my country table.
[05:43:31] code so this is just getting all the
[05:43:33] information for each one of the visits
[05:43:35] on my particular website based on the
[05:43:37] name and code as well as the group ID
[05:43:39] that's associated with them so with this
[05:43:41] product subquery I have my products and
[05:43:43] with this view subquery I have all the
[05:43:44] views now I just need to get the data
[05:43:47] that I want so here I can return Calling
[05:43:50] await DB dowith and I want to use that
[05:43:53] product view subquery that I just
[05:43:55] created and I want to select only
[05:43:57] specific columns I want to get the
[05:43:59] country name which is my product view
[05:44:01] subquery do countryname I want to get my
[05:44:04] country code which again is my product
[05:44:07] subcount code and I want to get my views
[05:44:10] which is just going to be a count of all
[05:44:13] of the different visited at rows that I
[05:44:15] have inside of here so visited ad there
[05:44:17] we go make sure this is an async
[05:44:19] function so I can return that awaiting
[05:44:22] that I have here so I'm selecting all
[05:44:24] those rows I want to start with my
[05:44:26] country group table just like that and I
[05:44:29] want to do a join on my product view
[05:44:32] just like that and I want to get where
[05:44:34] it's equal my product View whoops
[05:44:38] product view subquery doid or I'm sorry
[05:44:41] country group ID is equal to my country
[05:44:44] group table. and actually I don't even
[05:44:47] think I need to do this additional step
[05:44:49] of joining on this country table CU I'm
[05:44:51] not actually using the country table
[05:44:52] data so I can essentially remove all
[05:44:55] this information about the country group
[05:44:56] I don't need any of that so I'll get rid
[05:44:58] of this all my SQL for my visited app
[05:45:00] I'm actually just going to put in line
[05:45:02] directly right here so I can get rid of
[05:45:05] all of that right there so that's SQL
[05:45:07] has been directly inlined there and
[05:45:08] instead I'm just going to change this to
[05:45:10] be my count and this is going to count
[05:45:13] essentially the visited at row itself so
[05:45:15] this is going to be my product view
[05:45:18] table. visited at because I don't care
[05:45:20] about the time zone when I'm doing
[05:45:21] counting so I don't need to convert the
[05:45:23] time zone at all then what I can do I
[05:45:25] don't need any of this particular code I
[05:45:26] already have the country name and
[05:45:27] country code up here so I can get rid of
[05:45:29] all of this I can make sure that this is
[05:45:32] not even a subquery so I can just get
[05:45:34] rid of all this subquery related stuff
[05:45:36] here we go just call a wait on this and
[05:45:39] return this so this should be a little
[05:45:41] bit simpler than what I had before there
[05:45:42] we go looks like I'm probably missing
[05:45:44] missing a parentheses or bracket there
[05:45:46] something is being missed completely
[05:45:48] here let's see parentheses
[05:45:50] parentheses maybe I have an extra set of
[05:45:52] parentheses there we go so I have all my
[05:45:54] joins I have my wear Clauses all I have
[05:45:55] left to do next is to do my grouping so
[05:45:57] here I'm going to do a group bu and I
[05:45:59] want to group by my
[05:46:02] country
[05:46:04] code make sure I spell that properly
[05:46:08] make that into a function and I also
[05:46:10] want to group by my country name so
[05:46:12] we're just going to put an array in here
[05:46:14] with our country code country name just
[05:46:17] like that and then I also want to order
[05:46:19] them and I want to order them by My
[05:46:21] Views which is going to be my account I
[05:46:23] might as well call this views though so
[05:46:25] here we go
[05:46:28] views and we're going to order in the
[05:46:30] descending order My
[05:46:32] Views there we go so whichever one has
[05:46:34] the most views is going to show up first
[05:46:36] in my list of orders
[05:46:37] and I also want to only get 25 just
[05:46:39] because I can only really fit at most 25
[05:46:41] different countries in my chart so this
[05:46:43] right here I know it's a rather
[05:46:45] complicated query I'll go through it in
[05:46:46] depth first I'm getting only the
[05:46:48] products that I have access to then what
[05:46:50] I'm doing is I'm counting up all my
[05:46:52] views for each country based on their
[05:46:53] name and code that's where this group by
[05:46:55] comes in I'm only grouping by country
[05:46:56] name and code and for each grouping of
[05:46:58] country name and code count how many
[05:47:00] views have that country name and code
[05:47:02] then I'm doing a couple joins here to
[05:47:04] make sure I'm only joining on the
[05:47:05] products I have access to and I'm
[05:47:07] joining on the country table to get
[05:47:08] information for the country this little
[05:47:10] query right here is making sure I only
[05:47:11] get data after my current start date and
[05:47:13] then I'm just ordering everything in the
[05:47:15] correct order so that should be
[05:47:16] everything for this function I'm going
[05:47:18] to copy over all of this into here so I
[05:47:21] can make sure I get all the props being
[05:47:23] passed down for both of these here same
[05:47:25] exact
[05:47:27] thing pass it in my props and then I
[05:47:29] need to figure out exactly what my tags
[05:47:31] are going to be so the very first user
[05:47:32] tag that I'm going to have here is going
[05:47:34] to be for my user ID
[05:47:37] and the cach tags. product views because
[05:47:39] I'm getting all the product views I'm
[05:47:41] also going to have an ID tag so get ID
[05:47:44] tag that's going to be for my product ID
[05:47:47] if there is one and then I'm going to
[05:47:49] get my cach tags.
[05:47:52] products there we go and this particular
[05:47:55] tag is going to depend on if there's a
[05:47:56] product ID or not so if product ID is
[05:47:59] equal to null then I'm going to render
[05:48:01] out a git user tag for my user ID and
[05:48:05] the cach tag
[05:48:09] tags. products there we
[05:48:12] go so essentially if I have a product ID
[05:48:15] give me the tag for that one otherwise
[05:48:16] give me a tag for all of my users
[05:48:18] products then I want to have a global
[05:48:20] tag that's because I'm getting all of my
[05:48:22] countries so Global tag on my cach tags.
[05:48:26] countries there we go so that's
[05:48:27] everything that this particular function
[05:48:29] is using and hopefully with all of that
[05:48:31] done we should hopefully see back onto
[05:48:33] this page if I import this function
[05:48:36] maybe I'll have to import it right here
[05:48:37] there we go give that a quick import and
[05:48:39] make sure I get the correct information
[05:48:41] up here there we go that should give me
[05:48:43] all the different props I need all I
[05:48:45] need to do is create my actual chart and
[05:48:47] pass in the correct props up here so if
[05:48:49] we look at this you can see I have my
[05:48:50] interval that I need to pass in I have
[05:48:53] my time zone that I need to pass in my
[05:48:54] user ID and my product ID so we already
[05:48:57] know the product ID that's going to be
[05:49:00] my product ID that's coming from my
[05:49:03] search pams and to make it a little bit
[05:49:06] easier easier we can actually just get
[05:49:08] that information out here so we can say
[05:49:09] my time zone is going to be my search
[05:49:11] time zone or UTC by default and my
[05:49:13] product ID is going to be my product ID
[05:49:15] so I don't even need to get that for my
[05:49:16] search frames anymore same thing for
[05:49:18] time zone that's just going to be my
[05:49:19] time zone my interval is going to be a
[05:49:21] little bit more confusing so interval is
[05:49:23] either going to equal chart interval and
[05:49:26] I want to get it for my search prams
[05:49:28] whoops search prams do interval just
[05:49:31] like that or if this doesn't exist I'm
[05:49:34] going to get my chart interval. last
[05:49:36] Days by default now this you can see is
[05:49:38] throwing me an error because this must
[05:49:40] be of the key of type of chart intervals
[05:49:44] so I'm just going to manually cast that
[05:49:46] saying hey it's one of these and if it's
[05:49:47] not just give me essentially something
[05:49:49] that's from the last seven days now I'll
[05:49:51] expand my screen a little bit so all the
[05:49:52] code fits on one line looks a little bit
[05:49:54] cleaner that way and my interval I can
[05:49:56] now pass in just like that and the user
[05:49:58] ID I already have access to that just
[05:50:00] like that so now I have all the
[05:50:01] information I need inside of here if I
[05:50:03] scroll all the way down I have my chart
[05:50:04] data which is views country name country
[05:50:07] code now all I need to do is render this
[05:50:09] in a chart and we're going to use Shad
[05:50:10] CN for all of their charts now to add
[05:50:12] Charts it's relatively easy we can just
[05:50:14] call Shaden add chart that's going to
[05:50:16] add the charts into our application and
[05:50:18] then working with the charts is not too
[05:50:20] difficult let's make sure we don't
[05:50:21] overwrite any of the files we don't want
[05:50:22] to overwrite and now we can create this
[05:50:24] chart Library function so inside of our
[05:50:26] components we're going to create a brand
[05:50:28] new folder called charts and inside of
[05:50:30] here is we're going to render out our
[05:50:32] view actually I think I copied it so
[05:50:34] there we go TSX this has to be a client
[05:50:36] component when you're dealing with
[05:50:37] charts and then we can export that
[05:50:39] function just like this now this chart
[05:50:42] function is going to take in our chart
[05:50:45] data as its only prop and the type of
[05:50:49] this chart
[05:50:51] data is going to be a
[05:50:54] country country code which is a string
[05:50:57] it's going to be a country
[05:50:59] name which is a string and it's going to
[05:51:02] be views which is a number make sure I
[05:51:04] spell all of that correctly and now
[05:51:06] inside here we could just return null
[05:51:08] for example and at least that'll render
[05:51:09] out properly and it'll let me import
[05:51:11] this right there it looks like our chart
[05:51:13] data is maybe not lining up properly
[05:51:14] let's make sure I spelled country code
[05:51:16] country name and Views that looks like
[05:51:18] it was all spelled correctly obviously
[05:51:20] it should be an array of data though
[05:51:21] that fixes all the errors that I had
[05:51:23] inside of here so now let's go ahead and
[05:51:24] Implement what our chart should look
[05:51:26] like so the very first thing I want to
[05:51:27] do for this particular chart we possibly
[05:51:29] could have no data at all so I'm going
[05:51:31] to say if our chart data. length equals
[05:51:32] zero just render out that there's no
[05:51:34] data and we're going to put that in the
[05:51:35] middle of our screen next what I want to
[05:51:37] do is I want to render out a chart
[05:51:39] container which comes directly from Shad
[05:51:41] CN this chart container takes two things
[05:51:43] the first is a config which is how it
[05:51:45] hooks up different things so we'll say
[05:51:47] chart config just like that and then
[05:51:49] finally we need to specify some class
[05:51:51] names and if you want things to be
[05:51:52] responsive you generally need to have a
[05:51:54] minimum height so we'll say Min height
[05:51:56] of 150 a Max height is going to be 250
[05:51:59] pixels whoops 250
[05:52:03] pixels there we go and we're also going
[05:52:05] to say that the width is is full so it
[05:52:07] spans the entire container now to get
[05:52:09] this chart config we can come up here we
[05:52:11] can say con chart config equals and
[05:52:13] essentially for every single row or type
[05:52:15] of data that you have you need to have a
[05:52:17] chart config with a data Row in it so in
[05:52:20] our case views is the only thing that
[05:52:22] we're showing inside of our data as a
[05:52:24] bar in our bar chart so that's the only
[05:52:26] thing I'm going to set a column for here
[05:52:28] so I'm going to say views and I'm going
[05:52:30] to give it a label which is visitors
[05:52:33] there we go and then we can give it a
[05:52:35] color in our case I'm going to use use
[05:52:36] the HSA
[05:52:39] color which is based on our accent
[05:52:43] variable there we go so now we have our
[05:52:45] chart config and everything done inside
[05:52:47] of our chart container we need to render
[05:52:48] out a chart and in our case we're going
[05:52:49] to use a bar chart from recharts that's
[05:52:52] the library behind the scenes we want to
[05:52:54] render out the accessibility layer and
[05:52:55] then our data is just equal to our
[05:52:58] chart data there we go now inside of
[05:53:01] this bar chart we want to render out
[05:53:03] what our xaxis is going to look like our
[05:53:05] data key in this case is going to be
[05:53:06] country code so it's going to put the
[05:53:08] country code on the x-axis we're going
[05:53:10] to say that for a tick line we're going
[05:53:12] to set that to false and then finally
[05:53:14] our tick margin is going to be equal to
[05:53:16] 10 just to space things out a little bit
[05:53:19] now let's just make sure we close that
[05:53:20] off and import our X access and now we
[05:53:23] have that showing up you can see this
[05:53:25] column visited at does not exist so
[05:53:27] there's problems with my query that I
[05:53:28] need to fix so let's go ahead and
[05:53:29] actually fix that before we go back so
[05:53:31] inside of product views here we can
[05:53:33] scroll all the way down and it's saying
[05:53:34] that this visited at column when I doing
[05:53:36] my count on does not exist I think I may
[05:53:38] just be able to remove this as section
[05:53:40] right here because I don't actually need
[05:53:42] that now that it's no longer in my
[05:53:43] select statement and that may actually
[05:53:44] fix the problem and it looks like that
[05:53:46] did and you can see down here visitors
[05:53:47] per country we have India showing up
[05:53:49] that's the only country I've faked doing
[05:53:51] anything from so right there we can see
[05:53:52] that that is showing up there's some
[05:53:54] other errors inside of this looks like
[05:53:56] just some typing errors that should
[05:53:57] hopefully resolve itself in just a
[05:53:59] second but for now I'm going to go back
[05:54:00] and finish out the rest of this chart so
[05:54:02] we're going to come in here with a Y AIS
[05:54:04] so we can actually see our bars so we're
[05:54:06] going to have a tick line equal false on
[05:54:08] this
[05:54:09] one we're also going to come in here
[05:54:11] make sure I import this there we
[05:54:13] go we're going to have a tick margin of
[05:54:16] 10 just like the other one we're going
[05:54:18] to make sure allow decimals is set to
[05:54:20] false it doesn't make sense to have half
[05:54:22] of a person so obviously get rid of that
[05:54:24] and our tick formatter is going to
[05:54:25] format this as a compact number because
[05:54:27] these numbers could get quite large
[05:54:29] there we go that's our y AIS done next
[05:54:31] thing we're going to render is our bar
[05:54:33] that's probably the most common thing we
[05:54:34] want to render so we data key for this
[05:54:36] one is going to be views that's just
[05:54:38] whatever we have here that's our number
[05:54:40] views that's what we want to render here
[05:54:42] so for the fill of this particular thing
[05:54:45] I'm going to set this to the variable
[05:54:47] which is our color views there we go and
[05:54:50] that is just based on let we close that
[05:54:52] off real quick that is based on whatever
[05:54:55] we put for our color inside of here so
[05:54:57] color views there we go now we give that
[05:55:00] bar from recharts give that a save and
[05:55:02] now you can see that we have this
[05:55:03] showing up the last thing I want to do
[05:55:05] is add in a really nice looking chart
[05:55:06] tool tip so our chart tool tip is going
[05:55:08] to have some content and inside that
[05:55:10] content is our chart tool tip content
[05:55:13] directly from Shaden and the label key
[05:55:16] is going to be country name there we go
[05:55:18] so now whenever we hover over this it's
[05:55:20] going to use the country name instead of
[05:55:22] the actual country code I believe the
[05:55:23] reason we're having this problem is
[05:55:25] because this should say name key instead
[05:55:27] of label key let's see if that fixes it
[05:55:29] and there we go it says I in this should
[05:55:31] be our country name though not our
[05:55:33] country code let's try refreshing that
[05:55:35] to see if that works
[05:55:36] maybe there's something wrong with the
[05:55:37] data coming back so let's
[05:55:40] console.log our chart data to see if
[05:55:42] maybe there's a problem with our chart
[05:55:43] data we can just come in here look at
[05:55:46] our actual page inspect that go over to
[05:55:49] the console look at this array you can
[05:55:51] see it has country code and country name
[05:55:53] so that is correct it should be getting
[05:55:55] the name to be the country name let's
[05:55:57] try setting both the label key and the
[05:56:00] name key so we'll say
[05:56:02] Here country name just like that that's
[05:56:06] not working either so that's obviously
[05:56:08] not ideal so I think our label key is
[05:56:10] just not pulling in the correct
[05:56:11] information honestly not a huge deal we
[05:56:14] can just leave it as is give that a
[05:56:16] quick save and it'll just say I in
[05:56:18] instead now let's close out of that and
[05:56:19] make sure all of our typescript errors
[05:56:21] yeah we have no more typescript errors
[05:56:22] it was just some weird typescript
[05:56:23] compilation thing but we have our entire
[05:56:25] chart done now to be able to make sure
[05:56:26] that this works for multiple countries
[05:56:28] I'm going to go into my environment
[05:56:29] variable I'm going to change this to be
[05:56:31] like us for example so now we have us
[05:56:33] and India both showing up so if I come
[05:56:35] over to here and refresh my page you see
[05:56:37] I get no Banner oh there we go it is
[05:56:38] actually showing up you can see I get a
[05:56:40] banner for this particular discount code
[05:56:42] and now hopefully if I come over here
[05:56:43] you can see we have 11 visitors from
[05:56:45] India and one from the US so this is
[05:56:47] working as we expected to for different
[05:56:48] parody groups in different countries the
[05:56:50] next thing we have to do is to implement
[05:56:52] our last two charts and we'll do the
[05:56:53] visitors per PPP group because it's
[05:56:55] actually relatively similar to the chart
[05:56:57] that we already created so what I'm
[05:56:58] going to do is I'm essentially going to
[05:56:59] copy this entire function down and
[05:57:01] instead of saying country chart I'm
[05:57:03] going to say PPP and I'm going to come
[05:57:05] all the way up to here here where we
[05:57:06] have the non- internal version which is
[05:57:08] right here copy that paste it down and
[05:57:11] where it says country going to change
[05:57:13] that to PPP now I may need to change
[05:57:16] around what my different tags are so I
[05:57:18] think I'm going to need my country
[05:57:19] groups for this one so we'll say country
[05:57:21] groups I'm just going to preemptively
[05:57:22] add that in there we'll see if we need
[05:57:24] it or not so now we have my PPP version
[05:57:27] there we go close that down come all the
[05:57:30] way down to the PPP chart and this chart
[05:57:32] is going to be a little bit different
[05:57:33] because we actually will need multiple
[05:57:35] subqueries we're going to need to get
[05:57:36] our product View
[05:57:39] subquery and we're going to need to be
[05:57:42] able to get our normal subquery so this
[05:57:43] one's going to say with with a dollar
[05:57:46] sign product
[05:57:48] views. as and we'll put this entire
[05:57:51] query directly inside of here we can get
[05:57:53] rid of some of the stuff on this query
[05:57:55] like all this grouping by we don't need
[05:57:56] any of that and I do need to take all of
[05:57:58] this SQL that I inlined and move it back
[05:58:01] out so this is going to say visited at
[05:58:03] is that as visited
[05:58:06] at make sure I spell that properly there
[05:58:09] we go put a comma get rid of this views
[05:58:12] section right here and we need to make
[05:58:14] sure we have a DB just like that so now
[05:58:17] this greater than is going to be a
[05:58:18] function version which has our
[05:58:21] visited
[05:58:24] at takes a
[05:58:26] function and this function is going to
[05:58:28] call greater than with visited
[05:58:31] at start date there we go give that a
[05:58:34] quick save looks like all that's
[05:58:35] formatted now I don't actually need the
[05:58:37] country name or country code for this
[05:58:39] one but I do need the country group ID
[05:58:41] because I need to get the name of the
[05:58:42] group that's what this entire one is for
[05:58:44] the PPP group is our country group so
[05:58:47] country table Dot and I want to get the
[05:58:49] country group ID so essentially I'm
[05:58:51] getting the visited at field and I'm
[05:58:53] getting the country group ID and I'm
[05:58:55] making sure I only get the ones that are
[05:58:56] visited after the specific date so now
[05:58:58] that I have that subquery I can return
[05:59:01] awaiting db. with this particular new
[05:59:04] subquery make sure I put it as a
[05:59:06] lowercase Q so it lines up with the rest
[05:59:07] of my formatting I did I want to select
[05:59:10] specific Fields we'll leave that blank
[05:59:12] for now and we'll come back to it and
[05:59:13] the most important thing is I want to
[05:59:14] get this from the country group table so
[05:59:17] there we go from our country group table
[05:59:19] and I want to specifically join with the
[05:59:22] other table that I already have and in
[05:59:24] this case I want to do a left join
[05:59:26] instead of an inner join on that product
[05:59:28] subquery and I want to do it where my
[05:59:30] product subquery dogr ID is equal to my
[05:59:34] country group table ID and the reason
[05:59:37] I'm doing a left join here instead of an
[05:59:39] inner join is I want to get all of my
[05:59:41] country groups and display them in my
[05:59:43] chart so even if I have zero views from
[05:59:45] the 30% group I still want to show that
[05:59:47] on my chart as a null value so that's
[05:59:50] why I'm getting this as a left joint
[05:59:51] because this is going to give me every
[05:59:53] country table even if there are no views
[05:59:55] associated with it if I didn't an inter
[05:59:56] jooin instead it would only give me the
[05:59:58] tables that have or the country tables
[06:00:00] that have an actual product view
[06:00:02] associated with them which is not what
[06:00:04] we want so now what I can do is all of
[06:00:06] my grouping so in my case I want to
[06:00:08] group by a specific field so we need to
[06:00:11] do our select first so I want to get the
[06:00:13] PPP name which is our country group
[06:00:15] table. name and I also want to get my
[06:00:17] views which is going to be calling count
[06:00:20] on my product views. visited field so
[06:00:24] now here I can do a group bu which takes
[06:00:26] in a function we want to get that
[06:00:29] visited not visited at the PPP name
[06:00:31] that's what I want to group on so we're
[06:00:33] going to say PPP name just like that
[06:00:35] that's my group by field and then I also
[06:00:37] want to order so I'll come in here with
[06:00:39] an order by and I want to order by this
[06:00:41] particular field as well so there we go
[06:00:43] and that's all it takes to be able to
[06:00:45] implement this function you can see it's
[06:00:46] nearly identical to what we did before
[06:00:48] all I want to do is just get the country
[06:00:49] groups instead of the individual
[06:00:51] countries so we can minimize that down
[06:00:52] and we can actually use that inside of
[06:00:54] this particular page so the PPP chart
[06:00:57] and all these parameters information we
[06:00:59] can use so I'm going to take these props
[06:01:01] move them up here there we go make sure
[06:01:04] that I get the data from the corre cor
[06:01:06] chart same thing there and now I need to
[06:01:08] make sure I get all the information I
[06:01:10] need from up here so just going to copy
[06:01:12] this
[06:01:14] information paste it down in there it
[06:01:16] should be all the exact same information
[06:01:17] and I might as well do the same thing at
[06:01:19] while I'm at it for this chart because
[06:01:20] it's obviously going to be the same data
[06:01:22] for that chart as well so now let's
[06:01:24] implement this chart and again I'm just
[06:01:25] going to copy my existing chart because
[06:01:27] it's going to be somewhat similar so
[06:01:28] this one is views by
[06:01:32] PPP there we go views by PPP chart and
[06:01:38] now I want to get all my chart
[06:01:39] information but in this one it's going
[06:01:40] to have a PPP name instead of the
[06:01:43] country name and country code so same
[06:01:45] thing for my chart config that's going
[06:01:46] to be the same this data should never be
[06:01:48] null because as long as I have a country
[06:01:49] grouop it should show up but just in
[06:01:51] case I might as well just leave it in
[06:01:53] there then the next thing is I want to
[06:01:55] deal with having my chart so my xaxis is
[06:01:57] my PPP name and nothing else and that
[06:02:00] should be the only thing I need to
[06:02:01] change for this chart to make it
[06:02:02] actually work so let's give that a quick
[06:02:04] save and see if it works says views by
[06:02:06] PPP chart obviously I need to import
[06:02:08] this component there we go now if I give
[06:02:10] it a save we give this a quick refresh
[06:02:13] you can see that now it's actually
[06:02:14] showing all my different parody groups
[06:02:16] between 23 all the way all the way up to
[06:02:19] point or 1.1 now I do want to make one
[06:02:21] slight modification to the way that this
[06:02:23] chart data is showing up so inside of
[06:02:26] this function here I want to just
[06:02:28] create data which is equal to chart
[06:02:33] data map over each data point
[06:02:38] I want to return an object which is
[06:02:40] going to take all my normal data but I
[06:02:41] want to take the PPP name and I want to
[06:02:43] take whatever that name is and I want to
[06:02:46] make sure that I replace whoops
[06:02:50] replace parody group with an empty
[06:02:54] string and this should never be null so
[06:02:57] I didn't actually need this check there
[06:02:58] there we go so now essentially what this
[06:03:00] little bit of code is doing is removing
[06:03:02] that parody group colon section at the
[06:03:04] start I don't really like that and now I
[06:03:06] can use that as my chart data instead
[06:03:08] and if I give my page a refresh you can
[06:03:10] see that doesn't look like it quite
[06:03:11] worked that's because I forgot to put
[06:03:13] the colon here now we give that a save
[06:03:14] and you can see automatically it has
[06:03:16] already cleaned that up drastically and
[06:03:17] if I open this up you can see now it has
[06:03:19] made my labels a little bit easier to
[06:03:20] read and so on and I have had one
[06:03:22] visitor in the 0.9 to1 group and I've
[06:03:24] had 11 visitors in the 2 to3 Group which
[06:03:27] lines up with my India versus US users
[06:03:29] so at least know that that is working
[06:03:30] now unfortunately this Visitors by day
[06:03:32] chart that we have next is going to be
[06:03:34] the most complicated chart that we need
[06:03:36] to work on so let's go back over to that
[06:03:39] product View and we need to essentially
[06:03:41] just copy over one of these charts let's
[06:03:43] just go ahead and copy this chart paste
[06:03:44] it down and this one is going to be get
[06:03:47] views by day chart and then we want to
[06:03:50] obviously copy up here the exact same
[06:03:53] thing this one is get views by day chart
[06:03:58] and we want to get the internal version
[06:04:00] of that now the tagging for this one is
[06:04:02] going to be a little simpler and that's
[06:04:04] because this table doesn't query any any
[06:04:05] of our country or country groups all it
[06:04:07] cares about is views and days so it only
[06:04:09] queres our product and our product views
[06:04:11] table so at least our caching is
[06:04:12] slightly simpler but that is about the
[06:04:14] only Silver Lining because this is by
[06:04:16] far our most complicated function we
[06:04:18] still need to be able to get our product
[06:04:19] subquery but we don't actually need our
[06:04:21] start date because of the way that we're
[06:04:23] going to be writing this query and the
[06:04:24] way we're writing this query is we
[06:04:25] essentially want to generate all of the
[06:04:27] days within our interval so if it's like
[06:04:29] last seven days I want to generate seven
[06:04:31] days if it's to last 30 I want to
[06:04:32] generate 30 days and so on so I want to
[06:04:35] generate a series one for each day
[06:04:37] inside of my interval that way just like
[06:04:39] this chart has rows for zero I want to
[06:04:41] also show days that have zero visitors
[06:04:44] as well so this products subquery that
[06:04:46] we have right here is going to be really
[06:04:47] rather simple because I'm not actually
[06:04:49] going to join on any country tables and
[06:04:51] I'm not even doing any wear Clauses at
[06:04:53] all instead I just want to get every
[06:04:55] single view for all of my products that
[06:04:57] are in my product subquery so my country
[06:05:00] group ID is gone and this is replaced
[06:05:02] with a product
[06:05:04] ID that comes from my product subquery
[06:05:07] doid there we go and that's the only
[06:05:09] thing I'm getting from here I'm getting
[06:05:11] my visited at and I'm getting my product
[06:05:12] ID the big query the more complicated
[06:05:15] one comes in this section right here so
[06:05:17] we're getting this with our product view
[06:05:18] so we have essentially every single view
[06:05:21] which has a visited that date in our
[06:05:22] time zone for every single product that
[06:05:24] we have access to then what I want to do
[06:05:26] inside of here is I want to select
[06:05:28] specifically a date and this date is
[06:05:30] going to be formatted in a rather
[06:05:32] different way than you may be used to so
[06:05:34] for now I'm just just going to return
[06:05:36] this as undefined and we'll come back to
[06:05:37] this in just a little bit now for our
[06:05:39] from here again we're not going to be
[06:05:41] querying any of the tables in our
[06:05:43] database we're going to create our own J
[06:05:45] table of data essentially an array of
[06:05:47] data and we're going to get that from
[06:05:49] our interval and we're going to call
[06:05:50] that interval. SQL so each one of these
[06:05:52] is going to have a SQL section added
[06:05:54] onto it now this SQL section is going to
[06:05:56] actually call the SQL function and it's
[06:05:58] going to call
[06:05:59] generate series which is a postgress
[06:06:02] function which allows us to generate a
[06:06:04] series of data between a set of dates so
[06:06:07] what we can do is we can take whatever
[06:06:09] the current date is and subtract seven
[06:06:11] days because it's the last seven days
[06:06:13] and we can take that and go all the way
[06:06:15] up to the current date so essentially
[06:06:17] this gives me a series between whatever
[06:06:19] the current date minus 7 is and the
[06:06:21] current date and I can say I want to do
[06:06:23] this in intervals that are one day
[06:06:25] intervals so by using this code right
[06:06:29] here let me make this a little bit
[06:06:31] bigger so it's easier to see I can say
[06:06:34] that I want to generate a series between
[06:06:35] 7 days ago and today and I'm using one
[06:06:38] day intervals which is a type in
[06:06:39] typescript or in postest I'm sorry and I
[06:06:42] want to generate that with the name
[06:06:43] series because I'm going to use that in
[06:06:45] other places so I want to do this exact
[06:06:47] same sequel in all of these other ones
[06:06:49] so down here and down here so now for my
[06:06:51] 30-day one it's really easy I'm just
[06:06:53] going to subtract 30 days at one day
[06:06:55] intervals rather straightforward this
[06:06:57] one is going to be much more complicated
[06:06:58] though because instead of just
[06:07:00] generating this 30 days ago it's going
[06:07:02] to be 365 days ago and I want to do this
[06:07:05] using using one month intervals so here
[06:07:07] I can say that I'm going to have a one
[06:07:09] month interval just like that but I need
[06:07:11] to be able to not just get the current
[06:07:13] date but I want to get what the current
[06:07:14] month is so what I can do is I can say
[06:07:16] date trunk that's going to truncate my
[06:07:19] date and I can say truncate at the month
[06:07:22] Mark just like that so it's going to
[06:07:24] take whatever this date from 365 days
[06:07:27] ago is and truncate it at the month Mark
[06:07:29] and it's going to return to me
[06:07:30] essentially a string with that same
[06:07:32] thing here I can do date trunk just like
[06:07:35] that I can truncate it on the month and
[06:07:37] that's going to be whatever my current
[06:07:39] date is truncated at the current month
[06:07:41] this just makes it so that now I can
[06:07:43] take any day in a month cut off all the
[06:07:45] day information and just be left with
[06:07:47] the month so now I can come up here I
[06:07:49] have the interval. SQL and this is going
[06:07:51] to give me an essential array of data
[06:07:53] between whatever the current day is and
[06:07:55] the day that I want to go all the way
[06:07:56] back to now the next thing I need is a
[06:07:58] way to group my days because all my
[06:08:00] visited at has time all the way down to
[06:08:02] like the millisecond so obviously no two
[06:08:04] dates are going to be exactly the same
[06:08:05] because they have millisecond level data
[06:08:07] so I want to be able to group my date
[06:08:09] using a date grouper function this is a
[06:08:11] function that's going to take in a
[06:08:13] column which is either going to be SQL
[06:08:14] code or SQL do alist code it's
[06:08:17] essentially just some random SQL code
[06:08:19] there we go make sure I import that type
[06:08:21] from drizzle and what I want to do is I
[06:08:23] want to convert this into something that
[06:08:25] will convert my date to a more uniform
[06:08:27] date type so in my case I want this to
[06:08:30] be individual dates instead of times I
[06:08:32] want to cut off all the time and get me
[06:08:34] just the date information so I'll say
[06:08:36] SQL with a type of string is going to
[06:08:38] return to me a new date object from
[06:08:40] postgress using my column and I want to
[06:08:43] make sure I inline the parameters here
[06:08:45] so what this little bit of line of code
[06:08:47] does right here is it's saying okay I
[06:08:49] have a date that's coming in that has
[06:08:51] like time stamp information all the way
[06:08:52] down to the millisecond and I'm going to
[06:08:53] cut off everything except for the
[06:08:55] current date so this is essentially how
[06:08:57] the date trunk function works but it's
[06:08:59] truncating everything except for the
[06:09:00] date so it has like the year the month
[06:09:02] and the date but no time information I
[06:09:04] want to use the same grouping function
[06:09:06] for both my last 30 days and my last 7
[06:09:08] days but when it comes to my last 365
[06:09:11] days I want to truncate this using that
[06:09:13] date trunk function that we've already
[06:09:15] used so I'm going to say date trunk just
[06:09:17] like that I want to truncate it down to
[06:09:19] the month now the final thing I want is
[06:09:21] some way to format these dates so that I
[06:09:22] can easily display them inside of my
[06:09:25] form so I'm going to come in here with a
[06:09:26] date
[06:09:28] formatter just like that and this is
[06:09:31] going to take in a date object from
[06:09:33] JavaScript and for example on this one
[06:09:35] I'm going to use a month formatter and
[06:09:37] I'm going to format my date so instead
[06:09:39] of typing out what the month formatter
[06:09:40] is I'll just paste it down here it's a
[06:09:42] new internationalization date formatter
[06:09:44] that's a two-digit year and a month that
[06:09:45] is short and the time zone now the
[06:09:47] reason I'm using UTC as my time zone
[06:09:49] here which sounds really confusing is
[06:09:51] when I do these date truncations and
[06:09:53] this date here it removes all my time
[06:09:55] information so if I were to format this
[06:09:57] in a time zone that's not UTC it's
[06:09:59] actually going to move my date forward
[06:10:01] or backward like 3 or 4 hours and if it
[06:10:03] moves it backwards like 3 hours hours
[06:10:05] that now puts me the day before and
[06:10:07] that's probably the problem that parody
[06:10:09] deals has on their website so by using
[06:10:11] the UTC time zone it ensures my date
[06:10:13] won't actually move because I don't
[06:10:14] actually have a Time Value so that's why
[06:10:16] I'm using time zone of UTC here to make
[06:10:18] sure my date does not move now the next
[06:10:21] two things I want to format as dates
[06:10:23] instead of months so I can just use the
[06:10:25] date formatter that I've created so we
[06:10:26] have date formatter and date formatter
[06:10:29] and this date formatter just gives me a
[06:10:30] date style of short rather
[06:10:32] straightforward so now my chart
[06:10:33] intervals is much more confusing but it
[06:10:35] allows me to get all the data I need to
[06:10:37] actually use this form for example
[06:10:38] giving me that generate series and this
[06:10:40] also allows us to create what our date
[06:10:42] is going to be so I can take our
[06:10:43] interval and I can get our date grouper
[06:10:45] and I want to group my SQL do raw of our
[06:10:49] Series so SQL raw series just like that
[06:10:52] so essentially whatever this series is
[06:10:54] my generate series I'm going to be
[06:10:56] taking each individual value from that
[06:10:58] series and I'm going to be putting it
[06:11:00] through the exact same date grouper so
[06:11:01] converting it to a date or a month and
[06:11:03] so on then what I'm going to do I'm
[06:11:05] going to call this map with function
[06:11:07] taking in my date string I'm going to
[06:11:09] pass it to my interval. dat formatter
[06:11:11] and that's going to take in a new date
[06:11:13] based on my date string there we go so
[06:11:16] what this little bit of code right here
[06:11:18] does map width essentially says okay
[06:11:20] after my SQL code runs how do you want
[06:11:22] me to convert this SQL to JavaScript so
[06:11:25] I'm saying hey take this date which is a
[06:11:27] string and convert it into an actual
[06:11:28] date object for me from here I can
[06:11:30] finish out the rest of my code by making
[06:11:32] my joins and stuff work properly for
[06:11:34] example for my group grouping I want to
[06:11:35] group based on whatever that date is and
[06:11:38] that's because I'm truncating all of my
[06:11:39] different date information down to
[06:11:42] either the month or the week or so on so
[06:11:44] when I do my left join I'm taking
[06:11:45] whatever my visited at right here is and
[06:11:48] I'm going to be truncating that based on
[06:11:50] my date grouper so here put in that date
[06:11:53] grouper that's going to truncate down my
[06:11:54] date and here I want to get my
[06:11:57] date and this comes from the function
[06:11:59] version of this so I can take in the
[06:12:01] date just like this call this function
[06:12:04] which is going to call just like that
[06:12:06] there we go so essentially I'm getting
[06:12:08] that date row which is right here from
[06:12:09] my database that date column and I'm
[06:12:11] comparing okay if I truncate my date
[06:12:13] that comes from here it should be equal
[06:12:15] to this date here I know this is very
[06:12:18] complicated SQL code but essentially
[06:12:19] what's happening is in this first
[06:12:21] subquery I'm getting all of my products
[06:12:23] that I have access to and I'm counting
[06:12:24] up all the views for each individual
[06:12:26] visit that I have actually I'm not even
[06:12:27] counting them I'm just combining
[06:12:29] together my products and my visited ad
[06:12:31] and then inside of here I'm saying okay
[06:12:33] give me a series of data that's going to
[06:12:35] either months or days and convert all my
[06:12:38] visited at times to either that month or
[06:12:40] that day and if the day for the visited
[06:12:43] at and my series are equal add one to my
[06:12:45] count and do that for every single Row
[06:12:48] in this first query so now we can see if
[06:12:50] this actually worked I can come in here
[06:12:52] comment all of this information
[06:12:55] in make sure we pass our props in just
[06:12:57] like that import this particular
[06:13:00] function and now we just need to add
[06:13:01] this chart in which again shouldn't be
[06:13:03] too difficult we can just copy one of
[06:13:05] our existing
[06:13:06] charts this particular chart here is
[06:13:09] going to be by date and actually I
[06:13:11] believe I called this by day so let me
[06:13:13] just clean that up a little bit there we
[06:13:14] go views by day this is going to have
[06:13:18] date information so I'm going to have a
[06:13:20] date and that's going to be a string
[06:13:21] because it's whatever I mapped that to
[06:13:23] that's converting that to a string for
[06:13:24] me and then all I need to do is instead
[06:13:26] of my country code this should be my
[06:13:28] date and everything else should just
[06:13:30] work out of the box so let's see if
[06:13:32] that's working we can come in here get
[06:13:34] my chart information
[06:13:36] and then I can open this up and you can
[06:13:37] see all of my views were on the 16th
[06:13:39] that's why you can see we have 12
[06:13:41] visitors on that particular day which it
[06:13:43] means that it's working and we have all
[06:13:44] these blank days which is great if we
[06:13:46] didn't generate that series of data we
[06:13:48] would just have one row or one column in
[06:13:50] this chart and all these other columns
[06:13:52] wouldn't show up because they would get
[06:13:53] no data but by doing that series it now
[06:13:55] gives us these blank days the last thing
[06:13:57] we have left to do is just add in all of
[06:13:59] our different filtering that we want to
[06:14:00] do so we can go all the way back to our
[06:14:02] analytics page all the complex charting
[06:14:04] stuff we're done with that we can just
[06:14:06] close that down the only thing we have
[06:14:07] left to do is filtering which is so much
[06:14:09] easier so the very first thing I need to
[06:14:11] do is I need to wrap this entire thing
[06:14:12] inside of a div just my H1 section just
[06:14:15] like that that way I can put my filters
[06:14:17] up here with it and I want to add some
[06:14:18] margin on the bottom we've been waiting
[06:14:20] for this for a long time they've been
[06:14:21] really pushed together Flex this with
[06:14:23] some justifying of between to push them
[06:14:25] as far away as possible and items
[06:14:28] Baseline just like that there we go so
[06:14:30] now inside of here I'm going to put a
[06:14:32] giant has permission and I only want to
[06:14:35] have these things show up if I have
[06:14:36] permission to access the analytics so if
[06:14:38] I can access the analytics then go ahead
[06:14:40] and show the content inside of here
[06:14:42] which is going to be a div with a class
[06:14:44] of flex and a gap of two and then we
[06:14:46] just need a bunch of drop- down menus so
[06:14:49] we're going to get some drop down menus
[06:14:50] just like this I'm going to have a
[06:14:53] dropdown menu trigger just like that
[06:14:57] this is going to have an as child
[06:14:59] because it's just going to render out a
[06:15:01] button and this button is going to be a
[06:15:03] variant of out line inside of here
[06:15:07] interval. Lael is what we want to render
[06:15:10] and we want to render that with a
[06:15:11] Chevron down so we know that it's
[06:15:13] actually something that we can click on
[06:15:14] and go down on so we'll say class name
[06:15:16] size 4 margin left two close that off
[06:15:20] and we should see hopefully there we go
[06:15:22] we have last seven days right there
[06:15:24] obviously it doesn't do anything else we
[06:15:26] just have the drop down trigger so let's
[06:15:27] go ahead and add the drop down content
[06:15:30] drop down menu content there we go so
[06:15:33] this is for changing between our
[06:15:34] different intervals so we need to Loop
[06:15:36] through all of our different intervals
[06:15:37] so we can say
[06:15:39] object. entries for each one of our
[06:15:42] chart intervals I want to map through
[06:15:44] them that's going to give me a key and a
[06:15:49] value and then I want to return
[06:15:51] essentially just a link but that's going
[06:15:53] to be inside of a drop-down menu
[06:15:56] item there we go close that off make
[06:15:59] sure we say that this is as child and it
[06:16:02] has a key which is our key
[06:16:05] now for each one of these I'm going to
[06:16:06] be creating a link make sure that's a
[06:16:08] next link we're going to add in an href
[06:16:10] here which I'm going to come back to
[06:16:11] what it's going to be it's a little bit
[06:16:12] of a complicated href but otherwise
[06:16:14] we're going to have our value.
[06:16:17] Lael inside of
[06:16:20] here just like that make sure we close
[06:16:22] all this off there we go give that a
[06:16:25] save looks like everything's working our
[06:16:26] drop down menu content I believe we made
[06:16:29] not have imported so let me make sure I
[06:16:30] import that there we go and that should
[06:16:33] actually work now our href we'll just
[06:16:35] make an empty string for now so this
[06:16:36] will render hopefully there we go and
[06:16:38] now you can see we have our different
[06:16:39] options obviously it's not quite looking
[06:16:41] as we expect though most likely I
[06:16:42] imported my drop- down menu item from
[06:16:44] the wrong place which I did so let's
[06:16:46] clean that up and now you can see we
[06:16:48] have our different intervals showing up
[06:16:50] but the links currently don't work so to
[06:16:52] make the links work I'm going to create
[06:16:53] a little bit of a helper function we'll
[06:16:55] just close down these function it's
[06:16:57] going to be called create URL and this
[06:17:01] create URL function is going to take an
[06:17:02] href which is a string it's going to
[06:17:04] take take some old params which are our
[06:17:06] old parameters that are search prams so
[06:17:09] that's a
[06:17:10] record of the string string type and
[06:17:13] then finally it's going to take some new
[06:17:15] prams which is again just a record of
[06:17:17] strings so there we go record string
[06:17:20] string and this is going to return to us
[06:17:22] an href now I'm actually going to move
[06:17:23] this into our lib folder so we're going
[06:17:25] to go into lib utils I'm going to paste
[06:17:27] that down into here now for this
[06:17:29] particular function it's not going to be
[06:17:30] too complicated first our prams is just
[06:17:32] going to say new URL search prams and
[06:17:34] we're going to pass in all of our old
[06:17:36] parameters then what we're going to do
[06:17:38] is we're going to Loop through all of
[06:17:39] our new parameters by saying object.
[06:17:41] entries with our new parameters we want
[06:17:43] to Loop through each one of them so
[06:17:45] we're going to get a key and a value and
[06:17:48] for each key and value all I want to do
[06:17:50] is that the value is equal to
[06:17:54] undefined then I want to remove it so
[06:17:57] prams do delete that
[06:17:59] key otherwise what I want to do is say
[06:18:02] prams do set the key to that specific
[06:18:05] value then finally I can return what the
[06:18:07] brand new href is going to be so we say
[06:18:09] href with a question mark and p.2 string
[06:18:13] now we can generate a brand new URL
[06:18:15] anywhere we need to so for example back
[06:18:17] on this particular page where I have my
[06:18:19] link I can just say create URL I can
[06:18:21] pass it in the URL that I want to go to
[06:18:23] which is SL dashboardanalytics
[06:18:27] and what I want to do is pass in my old
[06:18:30] search prams and I want to change the
[06:18:32] new pram for my interval to be whatever
[06:18:35] this particular value is actually in our
[06:18:37] case I want the key and let's just
[06:18:39] import this function whoops create URL
[06:18:43] looks like it's not automatically
[06:18:44] importing probably because I forgot to
[06:18:46] export it there we go now let's make
[06:18:49] sure we import this give that a save and
[06:18:51] now hopefully if I click last 30 days
[06:18:53] you can see up here it's changed to last
[06:18:55] 30 days and my chart has updated if I
[06:18:57] change to last 365 you can see again
[06:18:59] it's updated my URL and the important
[06:19:01] thing is you can see it's rendering out
[06:19:02] each individual month which is exactly
[06:19:04] what what I wanted back to last 7 days
[06:19:06] you can see that's updating this chart
[06:19:08] as well so we have our very first drop
[06:19:09] down menu done the next one we want to
[06:19:11] work on is our product drop down and I'm
[06:19:13] actually just going to bring this into
[06:19:14] its own component and make a little bit
[06:19:15] easier to work with so we'll say user ID
[06:19:18] is our user ID our selected product ID
[06:19:23] is equal to our product ID and our
[06:19:26] search prams is equal to our search
[06:19:30] prams close that off we'll just need to
[06:19:32] create this function down here again I
[06:19:34] have the typing for my parameters
[06:19:35] already in there because that's some
[06:19:37] pretty basic stuff and I want to get my
[06:19:39] products so we can say await get
[06:19:42] products get products there we go for my
[06:19:45] user ID and then we can return inside of
[06:19:48] here all the different drop down stuff
[06:19:50] we need so I might as well just copy
[06:19:51] this drop- down menu paste it down
[06:19:53] because it's going to be rather similar
[06:19:54] to what we had before except for here
[06:19:57] I'm going to be getting my individual
[06:19:58] product and looping through my products
[06:20:00] and so on so this is going to Loop
[06:20:01] through my products and here I'm going
[06:20:03] to have an individual product product
[06:20:05] just like that and then up here for my
[06:20:07] actual label this is going to be a
[06:20:08] little bit of a complex thing so I want
[06:20:10] to take my products and I want to find
[06:20:12] the product with the specific ID I
[06:20:14] already have so p. ID is equal to
[06:20:17] selected product ID and I want to get
[06:20:20] the name from that and if the name
[06:20:21] doesn't exist I'll just have it say all
[06:20:23] products there we go then the next thing
[06:20:26] I need to do down here is I first want
[06:20:28] to create a link specifically for all of
[06:20:30] my products so drop down menu item add
[06:20:34] as child and inside of here is a link
[06:20:37] that goes to my analytics page using my
[06:20:39] old search prams and it sets my product
[06:20:40] ID to undefined by completely removing
[06:20:43] that type now I do need to make sure
[06:20:45] that this can include undefined so that
[06:20:48] I can actually remove things now if I go
[06:20:50] back to here that got rid of that error
[06:20:51] and this just removes product ID from my
[06:20:54] URL now down here I want to Loop through
[06:20:56] each of my products the key is going to
[06:20:58] be my product. ID just like that for my
[06:21:01] href I want to use my product ID and set
[06:21:05] it to my product. ID and down here this
[06:21:08] is my product. name now if I give that a
[06:21:11] save that should hopefully clean up all
[06:21:12] our errors and now I have the ability to
[06:21:14] say okay give me it only for this
[06:21:15] product or for all my products now if I
[06:21:18] create a brand new product just give it
[06:21:19] a random
[06:21:21] name random URL equiv that a quick save
[06:21:25] this product has absolutely nothing
[06:21:26] associated with it at all as you can see
[06:21:29] it also looks like my tab is currently
[06:21:31] incorrect I need to fix that so let's do
[06:21:33] that real quick before I forget we're
[06:21:35] going to go into our page for our
[06:21:36] products we're going to go to our edit
[06:21:38] page and all the way at the top where we
[06:21:40] have our tabs being defined you can see
[06:21:42] this is called country not countries so
[06:21:44] I'll change that to countries and that
[06:21:46] will actually fix it now when I go to
[06:21:47] the page you can see it's on that
[06:21:48] country Tab and there we go it's on the
[06:21:51] country tab that actually fixed all that
[06:21:52] okay back to analytics so now I have
[06:21:54] three products test name three has data
[06:21:57] this one has no data so as you can see
[06:21:59] all these are blank no data available
[06:22:01] down there and for all products we see
[06:22:02] all the data for all of them combined
[06:22:04] together together now the very last
[06:22:05] thing that we need to implement is the
[06:22:06] time zone drop down and this is
[06:22:08] something that a lot of charting places
[06:22:10] don't do and I really wish they would
[06:22:11] because it's super useful to be able to
[06:22:13] choose things in your own specific time
[06:22:15] zone so copy this drop down menu down
[06:22:17] this one's going to be very simple right
[06:22:19] here we're going to render out whatever
[06:22:20] the time zone
[06:22:21] is there we go that's our current time
[06:22:23] zone and we don't even need to do any
[06:22:25] type of array looping or anything like
[06:22:27] that we just need our drop- down menu
[06:22:29] item we don't even need a key on it
[06:22:31] because we only have two different
[06:22:32] options we have UTC and we have non UTC
[06:22:35] so for the time
[06:22:37] zone we have UTC just like that and
[06:22:40] inside of here we're going to print out
[06:22:42] the text UTC so that's going to be our
[06:22:44] UTC option now we need to add the option
[06:22:46] for our current time zone and this will
[06:22:48] actually require us to create a brand
[06:22:50] new component and that's because we need
[06:22:52] it to render on the client because
[06:22:53] otherwise it'll give us whatever our
[06:22:55] server's time zone is so we're going to
[06:22:57] get the drop down menu item which is
[06:22:59] going to take in our search pams
[06:23:05] there we go and now let's create this
[06:23:07] component so over into here we can just
[06:23:10] go into our components create a brand
[06:23:12] new file call it time zone drop down
[06:23:14] menu item export function that exact
[06:23:18] item right there this is going to be
[06:23:20] taking in our search
[06:23:23] pams whoops search
[06:23:26] pams and this is going to be search
[06:23:31] pams this is a record
[06:23:35] which is string or string there we go
[06:23:37] and then all we need to do is just
[06:23:38] render out this drop down menu item I'm
[06:23:40] just going to copy the code because it's
[06:23:42] relatively straightforward and I'll
[06:23:43] explain it we just getting our drop down
[06:23:45] menu item we're making sure we render it
[06:23:47] as a child because we want to render a
[06:23:48] link inside of it we're creating a URL
[06:23:50] just like we did for the rest of them
[06:23:52] the only key difference is that we're
[06:23:53] actually getting whatever the user's
[06:23:55] current time zone in right here so I'm
[06:23:57] just going to take this and say const
[06:23:59] const user time zone is equal to that
[06:24:02] and then we can just place that in both
[06:24:04] sections there we go this is the user
[06:24:07] local time zone so now here I can import
[06:24:10] this and we should hopefully see if all
[06:24:12] this loads that I now have the option to
[06:24:14] view my data in UTC or in my current
[06:24:16] time zone which is the America Chicago
[06:24:18] time zone now it currently makes
[06:24:20] absolutely no difference but I'll show
[06:24:21] you a case where it actually would make
[06:24:23] a difference we'll say npx run DB Studio
[06:24:28] there we go and actually I don't need
[06:24:29] the npx I should just say npm run DB
[06:24:33] Studio that'll open up my drizal studio
[06:24:35] I'm going to add a brand new piece of
[06:24:37] information into this we'll just make it
[06:24:39] full screen we'll go over to our product
[06:24:41] views and I'm going to add a brand new
[06:24:43] row for this particular product ID this
[06:24:46] particular country ID and for the date
[06:24:48] here I want to just do 202 24-09-2019
[06:25:04] now what I can do is close out of this
[06:25:06] and go back to my application here give
[06:25:08] page a refresh and you'll see that we
[06:25:10] should hopefully have some visits on
[06:25:12] that particular day let's go to
[06:25:14] UTC make sure it's all products give
[06:25:16] that a quick refresh it's actually
[06:25:18] showing up on the 16th even if we're in
[06:25:20] our time zone here it's still showing up
[06:25:21] on the 16th and I'm almost 100% sure the
[06:25:24] reason for that is because of our
[06:25:25] caching obviously manually changing our
[06:25:27] database doesn't reset our cach so to
[06:25:29] easily reset our cach I'm just going to
[06:25:30] refresh this page that'll add a new
[06:25:32] product View and that should fix our
[06:25:33] cash in immediate you can see if I
[06:25:35] switch over to UTC I have a date on the
[06:25:37] 15th but my time zone is before UTC so
[06:25:40] when I switch to my time zone you can
[06:25:42] see that that date that was at midnight
[06:25:43] UTC actually swaps to the day before so
[06:25:46] this is why it's really important to be
[06:25:47] able to show people's data in UTC or
[06:25:50] their current time zone cuz for me this
[06:25:52] was something that happened on the 14th
[06:25:54] while if I look at it in UTC it looks
[06:25:55] like it happened on the 15th now that
[06:25:57] pretty much is everything we need to
[06:25:58] cover but I actually realized I forgot
[06:26:00] to do something way back all the way on
[06:26:02] our dashboard page I never added any
[06:26:04] additional for our most popular to add
[06:26:06] like a little Banner in the corner which
[06:26:07] is something that we should have so what
[06:26:09] we can do is we can actually go back to
[06:26:11] that particular page in our marketing
[06:26:13] page that's going to be our normal page
[06:26:15] and what I want to do is all the way at
[06:26:17] the very bottom inside of my pricing
[06:26:18] card I have the ability to see which one
[06:26:21] is most popular you can see is most
[06:26:22] popular and I want to add quite a bit of
[06:26:24] additional flare to this if it is the
[06:26:26] most popular one so in particular on my
[06:26:28] card I want to add quite a bit of
[06:26:29] additional class names so here I'm going
[06:26:31] to have CN to do all the class name
[06:26:33] stuff and and I want to have it be
[06:26:35] relative I want to have a shadow of none
[06:26:38] I want to have it be rounded
[06:26:40] 3XL overflow hidden and then what I can
[06:26:44] do is if it is the most popular I can
[06:26:47] add additional classes so I can say that
[06:26:49] my border should be the accent border
[06:26:51] and I'll put a border of two around it
[06:26:54] otherwise I'll have a
[06:26:56] border of none there we go so now my
[06:27:00] most popular one you can see has this
[06:27:01] nice big blue border around it which
[06:27:03] looks good already ready the next thing
[06:27:05] I want to do is directly inside my card
[06:27:07] header if it is the most popular then
[06:27:09] what I want to do is I want to render
[06:27:11] out a little Banner that's going to go
[06:27:12] in the top left of the or the top right
[06:27:14] of the card so we'll say class name
[06:27:16] background is going to be accent text is
[06:27:18] accent foreground we're going to make
[06:27:20] sure that it's positioned absolutely
[06:27:22] padding on the top and bottom is going
[06:27:24] to be one padding on left and right is
[06:27:25] going to be quite large at 10 we're
[06:27:27] going to position negative right in the
[06:27:29] 8 top is going to be 24 and we're going
[06:27:32] to rotate this 45¬∞ and I'm also going to
[06:27:35] set the origin to be in the top right
[06:27:37] and this is just going to say most
[06:27:38] popular and what that's going to do is
[06:27:40] add this little Banner most popular
[06:27:42] across the very top right corner of this
[06:27:44] particular card another thing I realized
[06:27:46] I completely forgot to add which would
[06:27:47] break your application when you deploy
[06:27:48] it to production is if we go all the way
[06:27:50] into our API open up that API for our
[06:27:53] products remember how I told you that
[06:27:55] this request object is going to have
[06:27:57] information for our actual user this
[06:27:59] request. Geo in our get country code if
[06:28:01] I open this up this request. Geo that
[06:28:03] only is the case on versell if you have
[06:28:06] your runtime set to Edge otherwise that
[06:28:08] will not work so make sure you have a
[06:28:10] runtime set to Edge another thing I
[06:28:11] didn't really do is if we go back to our
[06:28:13] dashboard here and we look at our main
[06:28:16] dashboard you can see we only have the
[06:28:17] product section we don't have anything
[06:28:19] for analytics we should probably add
[06:28:20] that in as well so let's go to our
[06:28:22] dashboard our main page and let's add in
[06:28:24] a section for analytics it's going to
[06:28:26] look pretty much identical to this H2
[06:28:27] section up here so I'm going to copy
[06:28:29] that over it says analytics it has that
[06:28:31] arrow to the right with all the same
[06:28:32] Styles and then I'm obviously not going
[06:28:34] to show anything unless the person has
[06:28:36] permission to access the analytics and
[06:28:38] if they do we're going to show them this
[06:28:39] analytics chart now this analytics chart
[06:28:42] is just the exact same as our day chart
[06:28:44] so we're going to get all of our day
[06:28:45] chart information let me make sure this
[06:28:48] a little bit bigger so it's easier to
[06:28:49] see so you can see get views by day
[06:28:51] chart data we're passing in our user ID
[06:28:53] and our interval and we also need to
[06:28:55] pass it in our time zone which in our
[06:28:57] case is going to be UTC let's get our
[06:28:59] chart interval because this is going to
[06:29:00] show for the last 30 days because it
[06:29:02] kind of shows them the last month which
[06:29:03] is good indicator of how their
[06:29:05] application is doing and then as you can
[06:29:07] see that this card is literally exactly
[06:29:10] the same as the card we had before so
[06:29:11] all of this is pretty much the same as
[06:29:13] what we've rendered before but now you
[06:29:14] can see we've rendered out all of our
[06:29:16] products and if I zoom this out a little
[06:29:18] bit more you can see we now also have
[06:29:19] our analytics for the last 30 days if I
[06:29:21] click on this it brings me to my
[06:29:22] analytics page another minor thing I
[06:29:24] realized I forgot to do is in our
[06:29:25] product customization form if we scroll
[06:29:28] all the way down for our location
[06:29:30] message actually that was all the way at
[06:29:31] the top I went too far we look inside of
[06:29:33] here here I never actually put the error
[06:29:35] message in here so let's make sure we
[06:29:37] have that form message showing up and
[06:29:38] with that final minor change that is
[06:29:40] absolutely everything we need for this
[06:29:42] full application to be completely built
[06:29:44] and honestly this is a massive
[06:29:45] application if you put this on your
[06:29:47] portfolio employers are going to love it
[06:29:49] and even if you don't it's a project
[06:29:50] that you can build and sell and actually
[06:29:52] make money from and if you want you can
[06:29:54] view all the source code in the
[06:29:55] description down below again a huge
[06:29:58] thank you to Clerk and neon for
[06:29:59] sponsoring this video because of them
[06:30:01] I'm able to actually create these
[06:30:02] massive projects entire for free for you
[06:30:05] I wouldn't be able to do that without
[06:30:06] their support So if you liked Clerk or
[06:30:08] neon from this video I highly recommend
[06:30:09] checking it out they'll be linked down
[06:30:10] in the description for you with that
[06:30:12] said thank you very much for watching
[06:30:13] and have a good day
