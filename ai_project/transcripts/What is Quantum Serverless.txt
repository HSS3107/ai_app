Title: What is Quantum Serverless?
Channel: IBM Technology
Published: 2024-10-17T18:11:53Z
Duration: PT3M32S
Description: Want to play with the technology yourself? → https://ibm.biz/BdaRHv
Learn more about the technology → https://ibm.biz/BdaRHK

In this video, Sanket Panda explains what Quantum Serverless is and how it helps manage quantum and classical resources across the development workflow. The video covers the need for flexible tools to manage different resources, such as CPUs, GPUs, and QPUs, and how Quantum Serverless provides a solution for long-running workloads that require flexible resources.

AI news moves fast. Sign up for a monthly newsletter for AI updates from IBM → https://ibm.biz/BdaRHa

Transcript:

[00:00:00] hello today I'd like to explain what
[00:00:02] Quantum serverless is quantum serverless
[00:00:05] is a set of tools to help you manage
[00:00:07] your Quantum and classical resources
[00:00:10] across your entire development workflow
[00:00:14] so with that s
[00:00:17] this as you can imagine you can have use
[00:00:21] a variety of classical and Quantum
[00:00:23] Resources in this workflow you can have
[00:00:27] CPUs gpus
[00:00:31] or
[00:00:31] CPUs that you leverage across this
[00:00:34] workflow now to manage all of these ones
[00:00:37] you need to have a a flexible tool that
[00:00:40] helps you actually figure out when you
[00:00:42] want to use each of these resources for
[00:00:44] your
[00:00:46] tasks now typically when I develop
[00:00:48] software I'm doing it on my laptop my
[00:00:51] laptop has fixed computational resources
[00:00:53] available to me and on top of that my
[00:00:56] laptop has to stay on for the entire
[00:00:58] duration of my computation
[00:01:00] now for programs that I might be running
[00:01:02] on a quantum computer today that could
[00:01:04] take a long
[00:01:07] time this could be on the hours of
[00:01:11] days or a couple of hours even
[00:01:14] but regardless my laptop has to stay on
[00:01:17] for the entire time along with that it
[00:01:20] has fixed resources like I mentioned I
[00:01:22] can't really call on additional flexible
[00:01:25] elastic resources that you know can make
[00:01:29] my comp ation go faster or defer it to
[00:01:31] something else that's more
[00:01:33] performant so here's where quam
[00:01:35] serverless really comes into play
[00:01:37] throughout my entire development
[00:01:38] workflow from
[00:01:42] mapping for classical to Quantum
[00:01:45] optimizing my
[00:01:48] Quantum workload my circuits and my
[00:01:50] observables for Target
[00:01:52] Hardware execution on a Quantum
[00:01:58] system or
[00:02:00] postprocessing I might be using a lot of
[00:02:02] different types of resources
[00:02:04] here each of these tasks have different
[00:02:07] resource requirements you know for for
[00:02:09] mapping this could be a lot of classical
[00:02:13] resources that
[00:02:15] expend for optimization it could be a
[00:02:17] combination actually of both
[00:02:21] Quantum and classical such as if I
[00:02:24] wanted to characterize a Quantum system
[00:02:26] before I optimized it execution is going
[00:02:30] to be a uh on the quantum
[00:02:33] system and then for postprocessing I
[00:02:37] would also want to use a variety of
[00:02:39] classical
[00:02:42] resources now that's a lot of resources
[00:02:45] to manage as you can tell so what
[00:02:47] Quantum servus does is help you have a
[00:02:50] layer underneath all of
[00:02:53] this to manage these
[00:02:56] resources along with that you have these
[00:03:00] long running workloads that can be
[00:03:02] persisted inside this layer that has
[00:03:05] flexible resources that you can allocate
[00:03:07] to whichever task in your
[00:03:10] workload so with that in mind you can
[00:03:13] write your program deploy it into that
[00:03:15] environment turn off your laptop throw
[00:03:18] it into the river and then come back and
[00:03:20] your program and its results are going
[00:03:22] to be there waiting for you at the very
[00:03:23] end
