Title: Next.js Full Stack Project w/ Nextjs 15 & React 19
Channel: Dave Gray
Published: 2024-10-16T13:00:55Z
Duration: PT1H31M19S
Description: Build a Next.js full stack project with Nextjs 15 & React 19 in this video tutorial series. Our full stack app will include Next.js, TypeScript, Tailwind CSS, ShadCN/ui, Sentry, Kinde Auth, Neon Postgres, Drizzle ORM, and more.

⭐ Use the code "davegray" for 3 months free on the Team plan of Sentry for any new accounts:
- Sentry Homepage: https://bit.ly/sentry-dg
- Sentry Sign-up: https://bit.ly/try-sentry-dg
- Sentry Next.js: https://bit.ly/sentry-nextjs-dg
- Sentry Next.js Docs: https://bit.ly/sentry-docs-dg

🔥 Neon Postgres: https://fyi.neon.tech/davegray

👉 Web Dev Roadmap for Beginners (Free!): https://bit.ly/DaveGrayWebDevRoadmap

💖 Support me on Patreon ➜ https://patreon.com/davegray

🚩 Subscribe  ➜ https://bit.ly/3nGHmNn

📬 Course Updates ➜ https://courses.davegray.codes/

❓ Ask Questions & Discuss on Discord ➜  https://discord.gg/neKghyefqh

☕ Buy Me A Coffee ➜ https://www.buymeacoffee.com/davegray

🔗 Next.js Full Stack Project playlist: https://www.youtube.com/playlist?list=PL0Zuz27SZ-6PCLz7VMP2QQdeKa83rshe5

👇 Follow Me On Social Media:
GitHub: https://github.com/gitdagray
Twitter: https://twitter.com/yesdavidgray
LinkedIn: https://www.linkedin.com/in/davidagray/

🔗 Course Resources: https://github.com/gitdagray/nextjs-full-stack-project

Next.js Full Stack Project w/ Nextjs 15 & React 19

(0:00:00) Intro
(0:01:11) Tech Stack Overview
(0:02:07) Prerequisite Skills
(0:02:37) User Stories
(0:07:17) Installing Next.js 15 & React 19
(0:10:46) Installing ShadCN/ui
(0:17:24) Background Image with Tailwind
(0:19:48) Business Card Homepage
(0:27:49) Routing Groups, Layouts & Templates
(0:32:02) Page Routes
(0:34:00) Header & Navigation
(0:48:43) Custom Animations with Tailwind
(0:52:30) Light & Dark Mode with ShadCN/ui
(1:01:45) Sentry Set Up
(1:04:31) Sentry: Alternate Manual Set Up for Next.js 15 RC
(1:14:56) Creating error and global-error files
(1:20:56) Sentry Alerts & Logs
(1:22:05) 404 Not Found page
(1:27:12) Next.js Metadata

📚 Tutorial References:
🔗 Next.js: https://nextjs.org/
🔗 ShadCN/ui: https://ui.shadcn.com/
🔗 Sentry Next.js: https://bit.ly/sentry-nextjs-dg
🔗 Tailwind CSS: https://tailwindcss.com/
🔗 TypeScript: https://www.typescriptlang.org/
🔗 Neon Postgres: https://fyi.neon.tech/davegray
🔗 Kinde Auth: https://kinde.com/

Was this Next.js Full Stack Project tutorial helpful? If so, please share. Let me know your thoughts in the comments. 

#nextjs #fullstack #project

Transcript:

[00:00:01] [Music]
[00:00:05] hello and welcome I'm excited about this
[00:00:07] nextjs full stack project I'm Dave and
[00:00:10] together we're going to build this
[00:00:11] project from scratch and take it all the
[00:00:13] way to deployment it should make a great
[00:00:16] addition to your project portfolio I'll
[00:00:18] provide a link to all resources in the
[00:00:20] description and I'll also provide a link
[00:00:22] to join my Discord server where you can
[00:00:24] discuss this nextjs full stack project
[00:00:26] with fellow students ask questions and
[00:00:29] help each other out hey guys a big shout
[00:00:32] out and thank you to Sentry for making
[00:00:34] this full stack nextjs educational video
[00:00:37] series possible Sentry is defining debug
[00:00:40] ability in full stack web applications
[00:00:42] and I consider Sentry to be an essential
[00:00:44] part of my tech stack from error
[00:00:46] reporting logging and tracking to
[00:00:48] identifying performance issues with
[00:00:50] tracing to user session replays and much
[00:00:53] more Sentry will help you write and ship
[00:00:55] code that delivers exceptional user
[00:00:57] experiences follow the Sentry Link in
[00:01:00] the video description or just visit
[00:01:02] sentry.io and use the code Dave gray to
[00:01:05] get 3 months of the Sentry team plan for
[00:01:10] free today we will begin building a full
[00:01:13] stack NEX js15 and react 19 application
[00:01:17] here's a quick rundown of the full Tech
[00:01:19] stack we'll be using next js15 combined
[00:01:23] with react 19 typescript Tailwind CSS
[00:01:27] Shad CN UI Sentry for debug ability and
[00:01:31] time-saving error identification both
[00:01:33] during and long after deployment kind
[00:01:36] for authentication and a passwordless
[00:01:38] signon neon for their postgres database
[00:01:41] drizzle om to communicate from our
[00:01:44] JavaScript code to our neon postgres
[00:01:47] database Zod for type safety react hook
[00:01:51] form on the front end which will combine
[00:01:54] with Zod and next safe action for type
[00:01:56] safety on the back end which will also
[00:01:59] combine with our s schemas and finally
[00:02:01] tan stack table and when we finish we'll
[00:02:04] deploy the completed project to verel
[00:02:07] this will be a next level project and is
[00:02:09] not for beginners you should be familiar
[00:02:12] with react nodejs and understand the
[00:02:15] difference between a server and a client
[00:02:18] before beginning this project if you
[00:02:20] need to learn react or node.js I have
[00:02:22] free courses available on my channel for
[00:02:24] both prior experience with nextjs is not
[00:02:27] required but if you haven't worked with
[00:02:29] next JS before I encourage you to
[00:02:32] reference the documentation and dive
[00:02:34] deeper on the concepts as we build this
[00:02:36] project we're going to build a repair
[00:02:38] shop app that tracks customers and their
[00:02:40] repair tickets this isn't the type of
[00:02:43] project where I'm going to give you a
[00:02:44] full tour of the complete project before
[00:02:47] we begin we're taking more of a real
[00:02:49] world approach for this project and to
[00:02:51] do that we start by gathering some user
[00:02:54] stories from our stakeholder Dan the
[00:02:56] owner of the computer repair shop I've
[00:02:58] completed a prelim minary interview with
[00:03:00] Dan and I've created a list of 20 user
[00:03:03] stories based on our conversation when
[00:03:05] you interview a stakeholder they'll
[00:03:07] usually describe what they want as a
[00:03:09] user but they won't necessarily put it
[00:03:11] in organized technical requirements it
[00:03:14] can be difficult to get technical
[00:03:16] requirements out of an interview but
[00:03:18] with practice and experience you'll
[00:03:20] continue to improve at this skill and I
[00:03:22] should note that this is an informal
[00:03:24] user stories list at a job your team may
[00:03:26] have a specific required format for
[00:03:28] writing user sto stories that they
[00:03:30] follow let's quickly discuss the user
[00:03:33] stories list the first item says replace
[00:03:36] the current sticky note system and
[00:03:38] that's what they are currently using in
[00:03:40] their computer repair shop for details
[00:03:42] and of course that's not nearly as
[00:03:44] efficient as a nice application would be
[00:03:48] second is add a public facing page with
[00:03:51] basic contact info they already have one
[00:03:53] but they don't want to pay for two
[00:03:55] different websites so we're just going
[00:03:57] to put the public facing essential
[00:03:59] business card information on that
[00:04:01] homepage but that won't really be part
[00:04:04] of the application other than it will be
[00:04:07] the page that launches when of course
[00:04:09] you launch the application add a
[00:04:12] passwordless employee login to the app
[00:04:14] they've had to deal with passwords
[00:04:16] before people always lose them they want
[00:04:18] to make sure they can use passwordless
[00:04:21] logins like they have on some other
[00:04:23] sites show a realtime Open tickets page
[00:04:26] after login so there's a specific
[00:04:29] request for feature as well provide easy
[00:04:32] navigation and search for customers and
[00:04:35] tickets that will be something that
[00:04:37] definitely improves what they have over
[00:04:39] a sticky note system and then provide
[00:04:42] and logout option besides logging in of
[00:04:45] course that makes sense require users to
[00:04:47] log in at least once per week now
[00:04:50] there's something specific about when
[00:04:51] their session should expire uh provide a
[00:04:55] way to remove employee access as soon as
[00:04:58] possible if needed that's what ASAP
[00:05:00] means as soon as possible customers have
[00:05:02] an ID full address phone email and notes
[00:05:07] when we create a customer tickets have
[00:05:10] an ID title notes created and updated
[00:05:14] dates and I should add we'll probably
[00:05:16] put created and updated dates with
[00:05:18] customers as well that's pretty standard
[00:05:20] with records tickets are either open or
[00:05:23] completed so they can have two different
[00:05:25] statuses tickets are assigned to
[00:05:29] specific employees users can have an
[00:05:32] employee manager or admin
[00:05:35] permissions all users can create and
[00:05:37] view tickets and when we're talking
[00:05:39] about users I should mention these are
[00:05:41] just the employees of the store as well
[00:05:43] as the manager and the owner which would
[00:05:45] be the admin then all users can create
[00:05:49] edit and view customers employees can
[00:05:52] edit their assigned tickets they can
[00:05:54] only edit their assigned tickets if they
[00:05:57] have the permissions of an employee but
[00:05:59] man managers and admins can view edit
[00:06:01] and delete all tickets and when we say
[00:06:04] delete we won't really delete those
[00:06:06] we'll want to make the tickets inactive
[00:06:10] essentially because you wouldn't want to
[00:06:11] lose that history of the customer and
[00:06:13] the ticket and all of those things
[00:06:16] desktop mode is the most important for
[00:06:18] the UI but the app should be usable on
[00:06:21] tablet devices as well so mobile phone
[00:06:24] size screens are not really important
[00:06:27] what I got from the interview was the
[00:06:29] desk Top Mode is where the text Will
[00:06:31] typically interact with the application
[00:06:34] but they might pull it up on a tablet
[00:06:36] light and dark mode has been requested
[00:06:39] by the employees so we want to add that
[00:06:41] to the application and he expects quick
[00:06:45] support if anything goes wrong with the
[00:06:47] app and we'll look at how we'll know
[00:06:49] about errors as soon as they do so these
[00:06:53] are 20 good points to start with and of
[00:06:56] course get more into detail as far as
[00:06:59] our technical requirements go and create
[00:07:01] this application but this is a more real
[00:07:03] world approach here we've got a list of
[00:07:05] things our stakeholder wants and that of
[00:07:08] course is our user stories list and
[00:07:10] we'll turn these into the technical
[00:07:12] requirements and eventually the full
[00:07:14] stack application that we'll begin
[00:07:16] creating right now okay I've got vs code
[00:07:19] open and we're about to create our new
[00:07:22] project One requirement though you need
[00:07:24] to have no JS installed as that is a
[00:07:27] prerequisite to go ahead and create cre
[00:07:29] a nextjs application so just ensure you
[00:07:32] have no JS installed and after that
[00:07:34] let's open up a terminal window with
[00:07:36] control and the back tick and from there
[00:07:39] we can create a new project by typing
[00:07:41] npx
[00:07:44] create-- apppp at latest press return it
[00:07:48] will start asking us a few questions
[00:07:50] shortly let's call this repair
[00:07:54] shop after that yes we'll use typescript
[00:07:57] yes for eslint yes for Tailwind yes for
[00:08:01] the source directory yes for the app
[00:08:03] router and no for customizing any import
[00:08:07] Alias and let's go ahead and let it
[00:08:09] create the project and we've
[00:08:11] successfully created the new project now
[00:08:13] let's go ahead and CD into that new
[00:08:15] directory so
[00:08:17] CD repair shop and after that I want to
[00:08:22] go ahead and take a look inside this
[00:08:24] directory over here in the file tree and
[00:08:26] something I want to show you in the
[00:08:27] package Json now I said this is a nextjs
[00:08:31] 15 and react 19 project but currently as
[00:08:36] I install the latest here in early to
[00:08:39] mid October of 2024 we're not quite
[00:08:43] there with the releases but we can
[00:08:45] install nextjs 15 and react 19 and at
[00:08:49] the next conference that's at the very
[00:08:52] end of this month I believe October 24th
[00:08:55] they should be releasing nextjs 15 I
[00:08:59] can't guarantee it but it's been as a
[00:09:02] release candidate for a while and that's
[00:09:04] kind of the expectation coming up at
[00:09:06] that conference so we're just 10 days to
[00:09:08] two weeks away so right now I'm going to
[00:09:11] install the release candidate so we'll
[00:09:14] get nextjs 15 and react 19 however you
[00:09:18] should check because if you just
[00:09:20] installed your project and you're
[00:09:22] watching this at a later time maybe just
[00:09:24] two weeks even after I've created this
[00:09:26] video you may already have nextjs 15 and
[00:09:31] 19 here and if so you won't need the
[00:09:34] next part that I'm about to show you
[00:09:36] let's open a terminal back up with
[00:09:37] control in the back tick and since we've
[00:09:39] already seed into the cded into the
[00:09:42] repair shop directory now we can just
[00:09:44] type npm install going to do next at RC
[00:09:48] which is release candidate react at RC
[00:09:52] then
[00:09:53] react-dom at RC then I'm going to type
[00:09:57] D- Legacy Dash here depths which is
[00:10:02] short for dependencies and let's go
[00:10:04] ahead and press enter and let's get the
[00:10:07] release candidates installed and then we
[00:10:09] will have nextjs 15 and react 19 for
[00:10:12] this project okay the install was
[00:10:14] successful let's close the terminal
[00:10:16] window and once again let's reopen the
[00:10:19] package Json and now we can see what we
[00:10:22] have so we have next 15 it's still
[00:10:24] marked as a release candidate but it is
[00:10:27] 15. o.0
[00:10:29] 19.0 do0 as well for a release candidate
[00:10:33] here and you can see the date currently
[00:10:35] October 14th so really just 10 days away
[00:10:37] I think is when the next conference
[00:10:39] kicks off and you may already have this
[00:10:42] installed and didn't need to go through
[00:10:44] the process that I just showed you and
[00:10:46] now I like to add Shad CN to the project
[00:10:48] right away too and because of what I'm
[00:10:50] showing you here with the release
[00:10:51] candidates you're going to see something
[00:10:54] uh along the way that's just a little
[00:10:55] different that you may also not have to
[00:10:57] do so the first we'll just type what
[00:11:00] everyone will need to do and that is
[00:11:01] shad CN at latest and then anit and go
[00:11:07] ahead and press enter I think I'm going
[00:11:09] to get an error here we'll see what we
[00:11:12] get but you might not let's go ahead and
[00:11:15] answer these questions first I'll go
[00:11:16] with New York I want to choose gray
[00:11:19] that's my last name after that yes for
[00:11:22] CSS variables and it will go ahead and
[00:11:25] start the install I believe let's see if
[00:11:27] I get an error and I did now you may not
[00:11:30] if we're past these release candidates
[00:11:32] that npx Shaden at latest anit may be
[00:11:35] all you need to do but I need to do just
[00:11:38] a little bit more to get Shad to work
[00:11:40] with the release candidates so when I
[00:11:42] scroll up here to the top I see this
[00:11:45] command failed and it's installing all
[00:11:48] of these different packages that Shaden
[00:11:51] does when it initializes so I'm going to
[00:11:53] copy these and I'm going to add that
[00:11:55] Legacy peer depths after it as well so
[00:11:59] let's scroll down and I'm going to paste
[00:12:02] that in now and there we go I also need
[00:12:06] to add
[00:12:08] the-- Legacy Das Pier oops deps press
[00:12:14] enter now it should go ahead and install
[00:12:17] these dependencies as required and it
[00:12:19] will work with the release candidate so
[00:12:21] you can see this flag is often needed
[00:12:23] here with the release candidate but it
[00:12:25] would not be needed afterwards so if you
[00:12:28] didn't get the release candidate you've
[00:12:29] already got the release you can ignore
[00:12:31] that part okay now I'm on the Shad CN
[00:12:34] website and I want to use the button
[00:12:36] component I want to go ahead and install
[00:12:38] that while we're installing our
[00:12:40] dependencies right now and there's
[00:12:42] something to note here if you've
[00:12:44] installed with no problem if you're
[00:12:46] beyond the release candidate you can
[00:12:47] probably just use the npx Shad CN at
[00:12:51] latest add button here and you could
[00:12:53] copy it right here and use that since
[00:12:56] once again I'm using that release
[00:12:57] candidate I'm going to need to use the
[00:13:01] manual copy here and then find out what
[00:13:04] is needed and it looks like the
[00:13:06] dependency for the button is this radx
[00:13:09] UI react slot so I will want to install
[00:13:13] that and use that Legacy PS flag to go
[00:13:16] along with that okay we're back in vs
[00:13:19] code I'm going to add that radic ui/
[00:13:23] react slot with the Legacy peeps flag
[00:13:26] here press enter and it should install
[00:13:29] and I can use it with the release
[00:13:30] candidate as well now back on the Shad
[00:13:32] CN site since we did not get to use the
[00:13:36] npm command that was here for the CLI if
[00:13:40] you use this you won't need to do this
[00:13:42] but since I did not get to use that and
[00:13:44] had to install the dependency separately
[00:13:46] up here I need to use the copy paste
[00:13:49] method here with shad Cen to go ahead
[00:13:51] and create the button component so I'm
[00:13:54] going to copy all of this and now we'll
[00:13:57] go back to vs code and and paste this
[00:13:59] into the file where it needs to be and
[00:14:02] back in VSS code I will close the
[00:14:04] terminal window and then let's go to the
[00:14:06] source directory and inside the source
[00:14:09] directory I need to create another
[00:14:11] directory and this is where Shad xen
[00:14:13] usually puts components inside of a
[00:14:15] components directory and now after we do
[00:14:18] that we need another directory inside
[00:14:21] called UI and this is where the button
[00:14:24] would be created by default if we were
[00:14:26] able to use that CLI command instead of
[00:14:28] using the release candidate method here
[00:14:30] where I'm copying and pasting things in
[00:14:33] so now let's create button not bitten
[00:14:36] but button. TSX and inside of this file
[00:14:41] I'll just paste in the contents that
[00:14:43] we're able to copy from the Shad CN
[00:14:45] website and this is the button component
[00:14:48] that we'll be able to use all right I
[00:14:49] can see our editor doesn't like this
[00:14:52] import right here and that's probably
[00:14:54] because Shad CN did not create this like
[00:14:57] it usually does so you might check to
[00:14:59] see if you have a lib directory next to
[00:15:02] your app directory it will be inside of
[00:15:05] this Source directory and if you don't
[00:15:08] you'll want to create that as well so
[00:15:10] let me click Source here and then inside
[00:15:13] of source I'm going to create a new
[00:15:15] folder all that lib then inside of lib
[00:15:19] we want a new file named utils
[00:15:23] dots now inside of the utils.py
[00:15:29] already if Shaden installed as expected
[00:15:32] but if not it's very simple I'll just
[00:15:35] show you what to put here so we'll have
[00:15:37] import and we import
[00:15:40] clsx we also import a type that is class
[00:15:44] value with a Capital C and a capital V
[00:15:47] and these both come from
[00:15:50] clsx okay after that we also import tww
[00:15:55] merge with a capital M that comes from
[00:15:59] Tailwind merge there you go after that
[00:16:03] we're going to export function CN and it
[00:16:09] receives dot dot dot inputs a colon and
[00:16:13] then we'll put class value and an empty
[00:16:17] array then inside the function so we
[00:16:19] have curly braces we'll have return
[00:16:22] tww merge
[00:16:25] clsx and then inputs inside the
[00:16:27] parentheses once again again this is
[00:16:30] something that usually comes with the
[00:16:32] initialization of Shad Cen I'm not going
[00:16:35] to go over the function or explain tail
[00:16:37] when merg so much as it's usually
[00:16:39] already there for you now if you didn't
[00:16:41] get this code and you don't want to type
[00:16:43] it out you could grab it from my course
[00:16:45] resources for lesson one as well it'll
[00:16:47] be inside the utils TTS file okay going
[00:16:51] back to our button. TSX notice it still
[00:16:54] has the red squigglies here you want to
[00:16:56] press control shift p to open open this
[00:16:59] command pallet and you could type out
[00:17:02] typescript and look for restart TS
[00:17:05] server that's what you want after you do
[00:17:07] this and go ahead and select that
[00:17:10] restarts the server then it realizes hey
[00:17:12] we've now created the directory that it
[00:17:14] was looking for all along or you could
[00:17:17] instead of restarting the server just
[00:17:19] delete this import and probably retype
[00:17:21] it it would probably do the same thing
[00:17:24] one thing earlier versions of nextjs
[00:17:26] installed that I am not seeing in the
[00:17:29] directory is or in the file tree I
[00:17:31] should say is a public directory and
[00:17:33] it's usually at the same level as the
[00:17:36] source directory so you can click on say
[00:17:38] the readme file which would be at that
[00:17:40] same level and then C uh click new
[00:17:43] directory there and after that let's
[00:17:45] name this public inside the public
[00:17:48] directory I need an images directory and
[00:17:52] that's where we can put the image that
[00:17:53] we'll use for the background on the
[00:17:56] homepage for example so you can get this
[00:17:59] image from the course resources under
[00:18:02] lesson one it will be in this images
[00:18:04] directory I'm just going to drag it over
[00:18:07] into that images directory now or you
[00:18:09] could use a different background but uh
[00:18:12] Dan from the computer shop wanted
[00:18:14] something kind of
[00:18:16] matrixyl like wallpaper makes you think
[00:18:20] tech computer store or at least that's
[00:18:23] what I got during the conversation we've
[00:18:25] got our background now and it is named
[00:18:28] BG dhome which could be a little bit
[00:18:31] confusing because the Tailwind
[00:18:34] background classes all start with BG as
[00:18:37] well so maybe we want to rename it let's
[00:18:40] maybe click this go with rename and go
[00:18:42] with home- IMG for home image that might
[00:18:47] be a little easier to remember and then
[00:18:49] we could name our class the same thing
[00:18:52] so now that we have that let's go down
[00:18:54] to the Tailwind config and we can extend
[00:18:58] the theme here for the background
[00:19:01] image want to use so we say background
[00:19:04] image is what we're
[00:19:05] extending a comma after that and then
[00:19:08] inside our object that we've got here
[00:19:10] we'll say this is home- image just like
[00:19:13] we named our file but this is actually
[00:19:16] what we're going to call the class now
[00:19:18] so when we use it it would be BG Dome D
[00:19:21] image and now out here we'll say URL and
[00:19:25] in parentheses we'll have slash images
[00:19:28] which is saying inside the public
[00:19:29] directory look in the images directory
[00:19:32] then look for the
[00:19:34] home- image file and it is a JPG if I
[00:19:38] remember correctly single quote there
[00:19:41] then close it out with the double quote
[00:19:42] and a comma and we should be good now
[00:19:45] we'll be able to put a background image
[00:19:47] on that homepage and now we're ready to
[00:19:49] work on that homepage that we fire up
[00:19:52] when our application fires up but it
[00:19:54] will just have that public information
[00:19:55] for the store so we'll find that in the
[00:19:58] app directory and then we'll go to page.
[00:20:02] TSX currently it has in all of the code
[00:20:05] that comes with the nextjs
[00:20:07] initialization so we'll just delete that
[00:20:09] image import and we'll delete everything
[00:20:12] inside of the return here on the page.
[00:20:15] TSX so we'll get rid of all of that
[00:20:18] including the div and we're left with an
[00:20:20] export default function home and a
[00:20:23] return So at the top we are going to use
[00:20:26] a link and that will actually be for the
[00:20:29] phone number because you can use a link
[00:20:31] with the phone and this will be public
[00:20:33] facing so that comes from next link
[00:20:36] after that what we return will be a page
[00:20:40] where we're going to use that wallpaper
[00:20:42] that we had for the Matrix and if not of
[00:20:44] course we can just put black behind that
[00:20:47] so this would be for the whole page now
[00:20:49] inside of that we'll create a column
[00:20:53] with a width like a Max width of 1,24
[00:20:56] pixels that would be Max Max width of
[00:21:00] 5xl in Tailwind for example so that
[00:21:03] would be a column and we'll Center that
[00:21:05] column so now we have the full page
[00:21:07] we'll see the wallpaper behind it and
[00:21:10] then in the column that is where we'll
[00:21:12] put some details so then we want to
[00:21:14] create the business card and have it
[00:21:16] centered in the middle of the page
[00:21:19] inside of this column so this would be
[00:21:22] another div when we're thinking about
[00:21:24] how we outline the page and then the
[00:21:26] information would go in this div so
[00:21:28] let's go ahead and do that put in a h i
[00:21:31] put a H2 by mistake I want to put an H1
[00:21:35] on this page this would be where put the
[00:21:37] title of the business this would be
[00:21:39] Dan's computer let's put a line break
[00:21:43] there and repair shop now because we're
[00:21:47] using eslint in this project unless we
[00:21:49] put in an exception this single quote
[00:21:52] would probably cause an error but we can
[00:21:54] use an HTML entity like that and put the
[00:21:59] apostrophe between the n and the S and
[00:22:01] this will not cause an error with the
[00:22:03] lint if we want to leave the the rules
[00:22:05] as they are with default and I'd prefer
[00:22:07] to do that so after we've got Dan's
[00:22:09] computer repair shop for the title let's
[00:22:11] put in the address for his business card
[00:22:14] that he requested here we'll just say
[00:22:17] 555 Gateway Lane make this a new line
[00:22:21] break and on the next line we'll say
[00:22:23] Kansas City Kansas
[00:22:26] 55555 for the ZIP code
[00:22:29] okay now underneath this we'll put in a
[00:22:32] paragraph and we'll say open daily this
[00:22:36] would be 900 a.m. to 5:00 p.m. and now
[00:22:40] let's use our
[00:22:42] Link Link needs hre and inside this hre
[00:22:47] we'll use the telephone so you can do
[00:22:50] this with a telephone number now let's
[00:22:53] just put in a fake number I'm going to
[00:22:54] go with
[00:22:56] 555 555
[00:22:59] 5555 that would be the length of at
[00:23:01] least a Us phone number and then let's
[00:23:04] put a class name here say equals and on
[00:23:08] a hover if you hover over this link then
[00:23:11] it will underline to let people know it
[00:23:14] is clickable now inside of here we'll
[00:23:17] put the actual number
[00:23:21] 555-555-5555
[00:23:23] okay we'll save our changes now let's go
[00:23:26] ahead and go to the terminal window with
[00:23:29] control in the back tick type npm runev
[00:23:33] to go ahead and start the project at
[00:23:35] Local Host 3000 I'll hold down control
[00:23:38] and click we don't have many styles
[00:23:41] applied this won't look great but
[00:23:43] there's our information now we'll be
[00:23:45] able to come back and look at this every
[00:23:47] time we apply some classes and change
[00:23:50] the page to see how it looks so we'll
[00:23:52] come up here to that top div where we
[00:23:54] can apply that wallpaper background so
[00:23:58] we'll say class name equals we'll say
[00:24:01] BG black at first so we'll have a black
[00:24:04] background if there's a Flash before the
[00:24:06] wallpaper would show up then we'll use
[00:24:09] BG home- image which is the name of that
[00:24:13] image we set up in our Tailwind config
[00:24:16] and it starts with BG then after that
[00:24:18] we'll say BG cover and BG Das Center as
[00:24:23] well let's save let's go back and look
[00:24:26] at the browser we don't see much yet
[00:24:28] because the information on the page is
[00:24:30] only pushing it down so far so let's go
[00:24:33] ahead and continue to make some changes
[00:24:35] here now on the main element put a class
[00:24:40] name set this equal to flex and it will
[00:24:43] be a flex colum and we will make sure
[00:24:46] everything's in the center with justify
[00:24:47] Center and we'll say text Center as well
[00:24:51] then a Max width which is maxw
[00:24:55] d5xl that should be 1,24 4 pixels it
[00:24:59] looks like 64 REM as well and mx- auto
[00:25:03] makes sure this column is actually
[00:25:05] centered and then after that I want to
[00:25:08] make the height h-
[00:25:11] dvh you can see that is equal to the CSS
[00:25:14] class of height 100
[00:25:16] dvh okay now let's save those changes
[00:25:19] and look back at the page once again now
[00:25:22] we have the full page we can't read our
[00:25:24] information too well unless I highlight
[00:25:26] it but we have the full background
[00:25:28] because we have the height of that
[00:25:30] column and all the information is in the
[00:25:33] center now let's continue to add some
[00:25:35] more classes here so on the next div
[00:25:37] this is the business card div let's make
[00:25:40] this a class name set this equal to
[00:25:44] flex Flex column once again a gap of six
[00:25:48] not 67 just six between the the lines of
[00:25:52] text that'll be inside put some padding
[00:25:54] on this business card uh padding 12
[00:25:57] might not be able to see the backing too
[00:25:59] well but I'm going to make the corners
[00:26:01] rounded so rounded
[00:26:03] DXL let's make the back of the business
[00:26:06] card Black so we can see the text which
[00:26:09] we'll make white I'll make it just a
[00:26:11] little seethrough with a setting of 90
[00:26:13] for the opacity and the width is going
[00:26:16] to be 4 fs and after that we'll say if
[00:26:21] the screen size this is a break point
[00:26:24] goes up go to a Max width of 96
[00:26:29] and then we'll set MX to Auto once again
[00:26:31] so it's centered inside of that column
[00:26:35] let's make the text white so we can see
[00:26:37] the text and once again a breakpoint
[00:26:40] here screen gets a little bigger we'll
[00:26:42] go to text-
[00:26:44] 2XL let's save those changes now and
[00:26:47] come back and look at our page once
[00:26:49] again there we go so we have our
[00:26:51] business card we have the information it
[00:26:54] is not flashy but this is all our
[00:26:56] stakeholder wanted he wanted just a
[00:26:59] business card page which is essentially
[00:27:01] what he was already paying for elsewhere
[00:27:03] but now we can build the application
[00:27:06] that his business needs on the back end
[00:27:08] of this website we won't even link to
[00:27:10] the page where employees need to go to
[00:27:12] log in they'll just know what page to go
[00:27:14] to one small addition I think we could
[00:27:17] add here is just to make the font a
[00:27:19] little bold and bigger on the H1 than it
[00:27:22] is on the rest of the page so let's go
[00:27:24] ahead and do that with a class name
[00:27:27] equals
[00:27:28] text- 4XL and let's also put in font
[00:27:33] bold save those changes let's go back
[00:27:36] and see how it looks one more time yeah
[00:27:38] I like that better where Dan's computer
[00:27:40] repair shop stands out just a little
[00:27:42] more even though it's all the same color
[00:27:44] it's clearly the header it's the title
[00:27:47] it's the name of the store and now we're
[00:27:49] back in VSS code we've completed the
[00:27:51] home page and that's public facing but
[00:27:54] now we're ready to start actually
[00:27:55] building the application that our
[00:27:58] stakeholder wants his employees to be
[00:28:00] able to use to track customers and
[00:28:02] tickets so now inside of the app
[00:28:04] directory let's create another new
[00:28:06] directory and I'm going to name this RS
[00:28:10] but put it in parentheses so this is a
[00:28:13] group you will not see the RS inside of
[00:28:17] the URL when we navigate to these pages
[00:28:20] but we can put directories inside of
[00:28:23] this group RS directory and we'll use
[00:28:28] this to organize essentially so it's
[00:28:29] part of the app router in nextjs and by
[00:28:33] using it inside a parenthesis it will
[00:28:35] not show up in the URL now inside of
[00:28:38] this we can put other files like the
[00:28:41] default layout for this route so I'll
[00:28:45] put layout TS here or actually TSX and
[00:28:48] now inside of this layout it's going to
[00:28:51] be very similar to what we saw in the
[00:28:52] root layout but I'll say export default
[00:28:55] async function and I'll call this RS
[00:28:58] layout of course the RS is just short
[00:29:00] for repair shop it will receive the
[00:29:03] children and then after that we can type
[00:29:06] out what the children are and so that is
[00:29:11] children and it would be
[00:29:12] react.
[00:29:14] react node okay we're ready to create
[00:29:18] the function now that we have that so
[00:29:20] let's go ahead and add the function here
[00:29:22] and it will have a return inside the
[00:29:26] return I'm going to put a
[00:29:28] div inside the div I'm going to have a
[00:29:31] header here eventually but I don't yet
[00:29:33] so I'm going to have another div for now
[00:29:36] and inside this div is where the
[00:29:39] children will be but a layout will let
[00:29:42] you apply a component like a header that
[00:29:44] I would be putting right here so just
[00:29:46] I'll put a comment that this is where
[00:29:48] the header is going to
[00:29:50] go and then this header would show up on
[00:29:54] every page inside of this RS route that
[00:29:57] we've created created here so this is
[00:29:59] what we'll use to apply the header
[00:30:02] essentially this will contain everything
[00:30:04] for the backend application and that's
[00:30:06] why we'll see the header across that and
[00:30:07] then the children are just passed
[00:30:09] through let's apply a few classes here
[00:30:12] from Tailwind while we're inside this so
[00:30:15] set this equal to
[00:30:17] mx- Auto also width full and a Max width
[00:30:23] here of 7 XL that should be 1280 pixels
[00:30:27] yeah 80 rim
[00:30:28] so just a little bit wider than we did
[00:30:30] on the public facing page now this div
[00:30:34] will also get a couple of classes and
[00:30:36] let's set this equal to a padding X on
[00:30:40] the left and right of four padding y of
[00:30:44] two so that's all we need for now until
[00:30:46] we create the header and we'll come back
[00:30:48] and put it inside of the layout now
[00:30:50] while we're here I'm going to press
[00:30:51] control a to highlight everything and
[00:30:54] then contrl C to copy everything going
[00:30:56] to create another nextjs file over here
[00:31:00] this one will be called template. TSX
[00:31:03] now the difference between a template
[00:31:05] and a layout is that the template
[00:31:07] rerenders every time the layout is only
[00:31:10] going to render when the application
[00:31:13] loads and then you won't see the header
[00:31:15] continue to load but a template will
[00:31:18] render every time so here I'm just going
[00:31:21] to paste this in because it's not a
[00:31:23] whole lot different I'm going to change
[00:31:24] the name template and then inside of the
[00:31:28] return here I'm only going to have one
[00:31:31] div around the children I'll delete the
[00:31:34] extra div and now let's change the
[00:31:37] classes on this div and the only class
[00:31:39] that it's going to have is one that we
[00:31:41] haven't created yet because we're going
[00:31:43] to use a small animation here that's
[00:31:46] just going to let the contents of each
[00:31:49] page when they change to a different
[00:31:50] page just kind of slowly fade in well
[00:31:53] not too slowly that would be annoying
[00:31:54] but you know what I mean just a nice
[00:31:56] little animation and the place to apply
[00:31:59] that is in a template because it will
[00:32:01] render now we will eventually go create
[00:32:03] this animate appear class inside of our
[00:32:06] Tailwind config but now we're still
[00:32:08] working inside of this group RS
[00:32:10] directory we don't have to uh create a
[00:32:13] page. TSX file inside of this directory
[00:32:16] if we don't want to and I don't want to
[00:32:18] I want to Route each Different Page
[00:32:20] request to a directory itself so let me
[00:32:23] create a new directory inside of that RS
[00:32:25] directory and I'll name this home
[00:32:28] now inside of home I'm going to create a
[00:32:30] page. TSX and inside of this let's just
[00:32:34] put a simple function for now so we know
[00:32:36] we're routing to the homepage so export
[00:32:38] default function home and inside of this
[00:32:42] homepage we'll just return an H2 that
[00:32:46] says homepage and that's all we need for
[00:32:49] now now I'm going to go ahead androl a
[00:32:52] to cop or to select all of that contrl c
[00:32:55] to copy let's click on the RS once again
[00:32:58] and let's create another route here
[00:33:00] called customers inside of this one
[00:33:04] we'll create another page. TSX I'm going
[00:33:07] to paste in what we had from the
[00:33:09] homepage and I'm just going to switch
[00:33:11] this and say customers and we'll change
[00:33:16] this home here to customers so it is the
[00:33:19] customers page let's save that and let's
[00:33:22] create one more like that for tickets so
[00:33:24] here is the tickets directory inside of
[00:33:28] tickets we'll create a page. TSX and
[00:33:31] inside of this we can paste in that same
[00:33:34] homepage I'm going to highlight the
[00:33:36] first home press contrl D to select the
[00:33:39] second one and then type tickets and I
[00:33:41] only have to type it once and save so
[00:33:44] now we've created our basic routing we
[00:33:46] have a customers page homepage and a
[00:33:49] ticket page all inside our group routing
[00:33:52] here with the RS directory that's
[00:33:54] essentially where our application for
[00:33:58] Dan's employees is going to live now
[00:34:01] let's go to our components directory and
[00:34:03] inside the components directory not
[00:34:05] inside of the UI directory that's in
[00:34:08] there though just in the components
[00:34:09] directory let's create a new file we'll
[00:34:12] call this header with a capital h. TSX
[00:34:16] inside this file let's say export
[00:34:20] function
[00:34:22] header and for now we'll just return the
[00:34:26] word header here in side of let's just
[00:34:28] put it in a paragraph so I'll say header
[00:34:31] and we'll know the header is loading
[00:34:33] where it should so now we need to go
[00:34:35] back inside of the app directory inside
[00:34:38] of this RS directory go to our layout
[00:34:42] import the header and then use it inside
[00:34:45] of our layout so we will
[00:34:48] import header from our component's
[00:34:51] header and this is where we'll put it so
[00:34:54] we'll just put that header component
[00:34:56] right here and save now we should be
[00:35:00] able to check our project if it's still
[00:35:03] running here and it looks like it is
[00:35:04] inside of the terminal so we should be
[00:35:07] able to check our project at localhost
[00:35:10] 3000
[00:35:11] slome for example and we should be able
[00:35:15] to see the header load and then the
[00:35:17] children which the children would be any
[00:35:18] one of these pages that we created so we
[00:35:21] should see it say header and then
[00:35:22] homepage it won't look great but we
[00:35:25] should be able to see that result so
[00:35:27] let's pull up the application now inside
[00:35:30] the URL we'll type
[00:35:32] slome press enter and here we go we have
[00:35:35] our header and our homepage and just the
[00:35:37] few Styles we have applied like padding
[00:35:40] you can see that that is set off
[00:35:41] differently there so everything is
[00:35:43] currently working as expected okay back
[00:35:46] in VSS code let's go back to the
[00:35:49] components directory where we have the
[00:35:51] header component and we want to make the
[00:35:54] rest of what we need for the header and
[00:35:55] we're going to start out by creating a
[00:35:57] another reusable component so let's
[00:36:00] create a new file here and name this nav
[00:36:04] button. TSX inside of nav button. TSX we
[00:36:08] are going to
[00:36:10] import Lucid icon and that comes from
[00:36:15] Lucid react now that gets installed as a
[00:36:18] dependency when we use Shad CN so you
[00:36:21] should have that after that we're going
[00:36:23] to import button and that comes from UI
[00:36:27] button how however when I tabbed over it
[00:36:30] did the dot slui and I want to use the
[00:36:34] at here for all of the Imports so it
[00:36:36] should be at SL components slui SLB
[00:36:41] button just to keep them consistent
[00:36:42] throughout the app after that I'm also
[00:36:45] going to import link that we've used
[00:36:48] before okay after the Imports are
[00:36:50] complete let's set up our type for props
[00:36:54] I'm going to set this
[00:36:58] and that is going to be Lucid icon after
[00:37:02] that we're going to have a label and
[00:37:04] that will be a string and after that
[00:37:06] let's have an href that is optional
[00:37:09] which is also a string so we may or may
[00:37:12] not use that href value when we use this
[00:37:15] component okay let's go ahead and now
[00:37:17] create the function for the component so
[00:37:19] export function let's call this nav
[00:37:22] button and it's going to receive those
[00:37:25] props so we'll have icon lowercase here
[00:37:28] and let's bring in the uppercase icon
[00:37:32] after that we'll have label and we can
[00:37:34] just put a comma because it'll have the
[00:37:36] same name and an hre which would be the
[00:37:39] same name and then this will be the type
[00:37:42] of props that we set above okay now
[00:37:45] we're ready for the body of our function
[00:37:48] which will have a return inside
[00:37:51] parentheses we're going to use the
[00:37:54] button component and I like to come down
[00:37:56] on a new line since we're going to have
[00:37:58] several different things we set here so
[00:38:01] this is with shad CN you can set these
[00:38:03] different prop values we'll set the
[00:38:05] variant equal to the Ghost type going to
[00:38:09] set the size equal to Icon because these
[00:38:12] are icons we're going to use in our
[00:38:14] header at the top of every page
[00:38:17] essentially in the application I'll set
[00:38:19] the ARA label which is always a good
[00:38:23] habit to use and we'll set that equal to
[00:38:25] the label value I also like to set a
[00:38:28] title and that's because when you Mouse
[00:38:31] over the icon then especially on a
[00:38:33] desktop you'll see the value there pop
[00:38:37] up so I'll use a title and use that same
[00:38:39] value for label class name I want to
[00:38:42] make these round so when we hover over
[00:38:45] them we're actually going to see a
[00:38:47] little circle and I've seen that on some
[00:38:49] other websites as well so rounded full
[00:38:52] then I'm going to need as child because
[00:38:55] we're going to use the button with a
[00:38:57] link or we're just going to have a child
[00:38:59] of an icon so after that we'll have
[00:39:02] slash and now inside of the button oh I
[00:39:06] guess we don't want the uh Slash there
[00:39:08] I'm sorry we're going to have a closing
[00:39:10] tag there we go so inside of the button
[00:39:13] now we need to decide if we have an hre
[00:39:15] or not so I'm going to use a turn area
[00:39:17] here so if I have an hre that exists
[00:39:21] then we're going to return the link
[00:39:23] component set the href equal to H
[00:39:28] rff close that out and inside the link
[00:39:31] this is where we're going to use the
[00:39:34] sorry not a question mark but a slash
[00:39:36] this is where we're going to use the
[00:39:37] icon that is passed in and that is that
[00:39:40] lucid icon up here so now we've got that
[00:39:44] but if we don't have an
[00:39:46] hre then we just want to have the icon
[00:39:52] itself okay that is our reusable
[00:39:55] component here for a nav button now we
[00:39:58] can use this several times inside of the
[00:40:00] header now we're ready to go back to our
[00:40:02] header component and use the nav button
[00:40:05] component and complete the header or
[00:40:07] almost complete the header so let's
[00:40:09] start at the top and let's import some
[00:40:12] icons here I want the home icon I also
[00:40:16] want a file icon and I want users round
[00:40:20] all three of those are going to come
[00:40:23] from Lucid
[00:40:25] react okay after that that then I want
[00:40:28] to import link once again that comes
[00:40:32] from next link after that import come
[00:40:36] down here and I'm going to
[00:40:38] import nav button that we created and
[00:40:42] once again this is coming from just the
[00:40:44] dot slash but I want to just be
[00:40:46] consistent and use the ATA
[00:40:50] slash components throughout the
[00:40:53] application oh and wait a minute I don't
[00:40:55] need the app I just need the at
[00:40:57] components there we go okay after nav
[00:41:00] button then I'm going to go ahead and
[00:41:02] start the function later I'm going to
[00:41:04] import something else but now inside of
[00:41:06] the header let's just delete this
[00:41:08] paragraph and let's start with an actual
[00:41:11] header element and we'll put some
[00:41:13] classes on this so class name equals and
[00:41:16] I'm going to put animate slide here
[00:41:18] remember we added animate appear to the
[00:41:22] template and now animate slide now this
[00:41:24] will only happen when the app loads but
[00:41:27] we need to create this animation and the
[00:41:29] animate up here that we put inside the
[00:41:31] template so we'll do that after we
[00:41:32] finish this header then I want a
[00:41:35] BG background so that'll be the default
[00:41:38] background that we've set up with shad
[00:41:40] CN we have
[00:41:43] h12 and padding of two that height would
[00:41:46] be about 48 pixels if I remember right
[00:41:49] border dasb and so that'll put a little
[00:41:52] border on the bottom I'm going to press
[00:41:53] alt Z to wrap this down as we're going
[00:41:56] off the screen after that I want to make
[00:41:58] this sticky so it stays at the top of
[00:42:00] the screen and doesn't scroll off that's
[00:42:03] our header will just stay put and so
[00:42:05] then I need to give it a z index I'll
[00:42:07] give it 20 to make sure that it stays on
[00:42:10] top of everything else okay inside the
[00:42:13] header I'm going to create a div and
[00:42:16] this div is going to be another
[00:42:18] container for everything so this is
[00:42:20] sticky up here for the header element
[00:42:23] and besides that it's got just a little
[00:42:25] bit of padding and we've set the height
[00:42:27] so now this will be inside of that so
[00:42:30] that padding will apply and now I'll use
[00:42:32] this div to contain everything else I'm
[00:42:35] going to have in the header so here I'm
[00:42:36] also going to have a class name set this
[00:42:40] equal to flex this would be a flex row
[00:42:43] which is by default so we don't need
[00:42:45] that I'm going to put the height just a
[00:42:47] little bit smaller I'll say items need
[00:42:49] to be centered and I'll say justify Dash
[00:42:54] between because we're going to have some
[00:42:56] on the left and some on the right and
[00:42:58] the width is full let's put a space in
[00:43:02] between those after that we can start
[00:43:05] putting what we want on the left and
[00:43:07] what we want on the right so we'll do
[00:43:09] that with divs as well so in the first
[00:43:12] div here I'll apply another class name
[00:43:16] set and set this equal to
[00:43:20] flex whoa somehow I got up there in the
[00:43:22] top and didn't mean to I want Flex items
[00:43:25] Das Center and then I'm going going to
[00:43:27] put a gap das2 here now we'll have
[00:43:32] another div down here and it will be
[00:43:36] similar say equals to flex and items
[00:43:42] Center I don't think I'm going to need
[00:43:43] the gap on this one because it'll have
[00:43:46] more buttons and they already have a
[00:43:47] little space built in but inside of this
[00:43:50] first one I'm going to use a link as
[00:43:52] well so that Gap might be needed so now
[00:43:55] let's go ahead and put in our first nav
[00:43:59] button and we'll set the hre equal to
[00:44:02] slome which would go to our home page
[00:44:05] route set the label equal to home and
[00:44:10] then after that we've still got an icon
[00:44:12] which will'll set equal to the home
[00:44:16] icon then we can close out our nav
[00:44:19] button now let's set the
[00:44:22] link this link is also going to link to
[00:44:26] slome
[00:44:27] home after that we'll say class name
[00:44:32] equals
[00:44:34] Flex justify Center and we'll say items
[00:44:39] Das Center Gap
[00:44:42] D2 margin left will be zero and the
[00:44:47] title for this link will also equal
[00:44:52] home oh I need to close that out first
[00:44:54] the title would be separate here we go
[00:44:56] title
[00:44:58] equals home now inside the link I'm
[00:45:02] going to put an
[00:45:03] H1 this would be the title for the page
[00:45:07] essentially but the H1 is going to have
[00:45:10] some classes as well let me go ahead and
[00:45:11] put
[00:45:14] computer repair shop so this will appear
[00:45:17] just to the right of the home icon if
[00:45:19] the page is large enough to have it and
[00:45:21] that's what we'll handle here with the
[00:45:23] classes so at first I'll set it to
[00:45:25] Hidden this would really only be if it
[00:45:27] did appear on a phone and we'll have
[00:45:30] small blocks which is about 640 pixels I
[00:45:33] believe as I Mouse over yes so that's
[00:45:36] when this will start to show up which
[00:45:38] would be on an iPad text- XL and we'll
[00:45:42] have font Das bold and we'll set the
[00:45:46] margins equal to zero and then a margin
[00:45:49] top of just one to give it just a little
[00:45:52] space there if that's needed we'll see
[00:45:54] if we like how that looks now over here
[00:45:57] in this second area we don't have
[00:46:00] anything yet but we could put something
[00:46:03] to just make sure it's showing up okay
[00:46:05] like I'll put the word write something
[00:46:08] like that so let's go with a paragraph
[00:46:11] and the word WR now of course we'll
[00:46:13] change that coming up but let's go ahead
[00:46:15] and take a look at the app control
[00:46:17] backtick it is still running so let's
[00:46:19] look at our homepage now in the
[00:46:22] application and now you can see what we
[00:46:24] did with the header here so we have our
[00:46:26] icon on and when I Mouse over it notice
[00:46:29] with that ghost button from Shad CN now
[00:46:32] we see a little different color and that
[00:46:34] rounded full rounded setting makes that
[00:46:37] a circle when we Mouse over here's the
[00:46:39] repair shop words and this should link
[00:46:41] to home here's our word that went right
[00:46:43] so this was the justify between between
[00:46:46] those two divs so if we do this we would
[00:46:49] go to the homepage which is where we are
[00:46:51] so if I click it it shouldn't really
[00:46:53] take us anywhere else so that is what we
[00:46:56] expected to get right now and you can
[00:46:58] see this also links so all's good let's
[00:47:01] go back and make a few more changes back
[00:47:03] in vs code let's go ahead and delete
[00:47:06] this paragraph with the word right let's
[00:47:08] move back up here and copy our nav
[00:47:11] button with the home icon with contrl C
[00:47:14] scroll down here into our second div and
[00:47:17] I'm going to paste it in I'm going to do
[00:47:20] that twice now we can go ahead and save
[00:47:22] here so it gets the proper formatting we
[00:47:24] might want to put some space in between
[00:47:27] of these just so it is easier to read
[00:47:30] here on the screen but we want to change
[00:47:32] where these link to so the first one's
[00:47:34] going to link to tickets and I'm going
[00:47:36] to highlight the word home and then
[00:47:38] press contrl D to highlight the word
[00:47:41] home again I'll just type out tickets
[00:47:45] and I've replaced both of those but now
[00:47:47] for the ticket icon going to use the
[00:47:50] file icon that we imported above now
[00:47:53] again I'll click the first home on the
[00:47:55] second button control D to select the
[00:47:57] second I'll change this to customers and
[00:48:00] here instead of the home icon I'm using
[00:48:02] the users round so now we've added those
[00:48:06] two extra buttons that should help us
[00:48:08] navigate to each of the pages we've
[00:48:10] created let's go back and look in Chrome
[00:48:12] to see what we have now we have both
[00:48:15] those icons way over here on the right
[00:48:17] and they should take us to the different
[00:48:19] pages so if I click the icon for
[00:48:22] customers we now get the customers page
[00:48:24] and the URL changes up here if I click
[00:48:27] the file icon we now get the tickets
[00:48:29] page URL changes so everything is
[00:48:33] working as we want it to as far as the
[00:48:35] navigation and we have our simple header
[00:48:38] for the application as well that
[00:48:39] continues to show no matter which page
[00:48:43] we go to back in vs code once again
[00:48:45] let's add those custom animations that
[00:48:47] we've already added to the files we had
[00:48:50] animate appear inside of the template
[00:48:52] and animate slide inside of a layout so
[00:48:55] we'll scroll down to our Tailwind config
[00:48:58] once again and once again in the extend
[00:49:01] area we will scroll down and find where
[00:49:04] we need to add key frames and our
[00:49:07] animations so after the Border radius
[00:49:10] we'll put a comma and here we'll add key
[00:49:15] frames and we'll start our object I'm
[00:49:18] going to scroll for a little more room
[00:49:20] so we can see everything we're adding
[00:49:22] easier and then we'll name it so here
[00:49:25] we'll have up
[00:49:27] here and this will have its own object
[00:49:30] and we'll set a from
[00:49:32] value and inside of this we'll set the
[00:49:35] opacity and we'll start at zero so it
[00:49:38] would be essentially hidden and it will
[00:49:41] fade in then we'll have a
[00:49:44] two and here we'll set the
[00:49:47] opacity to one so we'll go from
[00:49:50] essentially 0 to 100% or 0 to one and
[00:49:55] then after that we need to set another
[00:49:57] one for our slide
[00:50:01] animation here we'll have
[00:50:04] from and now we need to set
[00:50:08] transform and this is going to use
[00:50:11] translate X because we're going to slide
[00:50:14] in we'll have
[00:50:17] 100% inside of that and then after from
[00:50:20] we need a two as
[00:50:23] well so inside of the two we'll go ahead
[00:50:26] and
[00:50:27] set transform once again this would also
[00:50:32] be a translate X and now this would be
[00:50:38] 0% and that completes the key frames so
[00:50:42] after all of those I believe this would
[00:50:44] be the one we want that would start the
[00:50:46] key frames yes we still need to have the
[00:50:49] animations themselves that will use
[00:50:52] these key frames so this was the key
[00:50:54] frame setting after border radius
[00:50:57] then underneath the key frames going to
[00:51:01] set
[00:51:03] animation and inside of this object
[00:51:05] we'll
[00:51:06] set appear and this is how it will be
[00:51:09] animated so say
[00:51:12] appear 1 second and let's ease in
[00:51:17] out after that let's set one for slide
[00:51:21] and we'll say slide 750 milliseconds so
[00:51:25] not quite a second there ease in-
[00:51:29] out and maybe I
[00:51:32] missed a comma something it looks like I
[00:51:35] have an issue somewhere oh yes I missed
[00:51:37] a quote right here when I started the
[00:51:39] values so put a quote
[00:51:42] there quote at the end and a comma and
[00:51:46] that should be all we need oh it looks
[00:51:49] like I left an extra line there which I
[00:51:51] don't want so I'll just get rid of that
[00:51:53] blank line and add a comma there in case
[00:51:55] we wanted to add anything after
[00:51:57] animation but at this time I don't now
[00:51:59] let's go back to Chrome and take a quick
[00:52:01] look at our application and I'll reload
[00:52:03] the application and we had the slide
[00:52:06] occur here with the header so it slides
[00:52:08] in but when we navigate we won't see
[00:52:11] that remember that's only in the layout
[00:52:13] and the layout will not render when we
[00:52:16] navigate between Pages however the fade
[00:52:18] in should occur as you see the words
[00:52:21] slowly fade in for each page and that's
[00:52:24] because we set that animation the
[00:52:26] animate appear inside of the template
[00:52:30] I'm now on the Shad CN docs and we want
[00:52:33] to add light and dark mode options to
[00:52:36] the application and this is a great time
[00:52:38] to do it while we're working on the
[00:52:39] header and of course I always use dark
[00:52:42] mode and so that bright white page was a
[00:52:44] lot for me to take in I want to click on
[00:52:47] dark mode over here in the Shad CN docs
[00:52:50] and then nextjs and it will show us
[00:52:53] exactly how to use it and it says at
[00:52:55] first we need to to install next themes
[00:52:59] so if you remember earlier in this video
[00:53:01] I'm using the release candidate of next
[00:53:04] js15 and react 19 so I'm going to need
[00:53:07] to use that Legacy peer depths flag now
[00:53:11] if you're already using the release of
[00:53:13] NEX js15 which I expect to be again just
[00:53:16] probably about 10 days after I'm making
[00:53:18] this video you shouldn't even need to
[00:53:21] use that flag so it just depends if you
[00:53:23] have the release candidate or not this
[00:53:25] should be all you would need need once
[00:53:27] nextjs 15 is the official release so
[00:53:30] let's copy this and head back to vs code
[00:53:33] in VSS code I'm going to press contrl
[00:53:35] and the back tick to open a terminal
[00:53:37] window also contrl C to go ahead and
[00:53:40] stop the application for now I'll paste
[00:53:43] in that command and it already started
[00:53:45] running and yes I got an error so what I
[00:53:48] need to do because I'm using the release
[00:53:50] candidate is use that same command and
[00:53:53] then
[00:53:54] say-- Legacy Dash
[00:53:57] here- depths and go ahead and ENT enter
[00:54:01] and install next themes and now it
[00:54:03] installed for me with no problem back in
[00:54:06] the Shad CN docs for dark mode once
[00:54:08] again you can see step two is to create
[00:54:10] the theme provider and it goes inside of
[00:54:13] that components directory and then it
[00:54:15] says name it theme- provider. TSX so
[00:54:19] we'll just copy this code and now let's
[00:54:22] go back and create this file back in vs
[00:54:24] code I'll close the terminal window
[00:54:26] window let's scroll up to that
[00:54:28] components directory so I'll click that
[00:54:31] create a new file name this theme-
[00:54:35] provider. TSX and inside this new file
[00:54:39] I'll just paste the code we copied from
[00:54:41] Shad CN altz to wrap it down just so you
[00:54:43] can see everything and of course let's
[00:54:46] save the file but that's all we need for
[00:54:49] this file back on the Shaden website
[00:54:51] here is step three it says to wrap the
[00:54:54] root layout so we're going to add the
[00:54:56] theme provider to our root layout not
[00:54:59] the layout we have inside of our group
[00:55:01] RS route that we set but this would be
[00:55:03] the root layout it highlights two areas
[00:55:06] here but one thing it doesn't highlight
[00:55:08] that I want to point out is you need
[00:55:10] this suppress hydration warning as well
[00:55:13] so we're going to want to remember to
[00:55:15] add that as well as importing this and
[00:55:18] using the theme provider here so really
[00:55:21] what I'm going to do is highlight this
[00:55:23] part because it's the hardest for me to
[00:55:25] remember
[00:55:27] copy this and then I can just manually
[00:55:29] import the theme Provider from our
[00:55:32] component and I can also remember to add
[00:55:34] this suppress hydration warning back in
[00:55:37] vs code let's go to that root layout and
[00:55:40] now inside of the root layout where we
[00:55:41] didn't really clear out anything from
[00:55:43] the default install of nextjs I'll just
[00:55:46] leave that stuff for now but we want to
[00:55:49] import the theme
[00:55:52] provider theme provider that comes from
[00:55:55] the components there we go now inside of
[00:55:58] the HTML tag here is where we wanted the
[00:56:02] suppress hydration warning and after
[00:56:05] that we want to wrap the children with
[00:56:07] the theme provider now I copied that one
[00:56:09] part that was harder for me to remember
[00:56:12] I'll just take the closing tag of the
[00:56:14] theme provider and put it after the
[00:56:17] children and save and we should be good
[00:56:20] to go as far as providing the theme but
[00:56:22] we're not quite finished with the light
[00:56:24] and dark mode application yet back on
[00:56:27] the Shad CN website let's go past step
[00:56:29] three that we just completed to step
[00:56:31] four which says add a mode toggle and it
[00:56:35] gives us an example here and it gives us
[00:56:38] the code so we can just copy the code
[00:56:41] for this component notice that it is a
[00:56:43] client component I'm just going to copy
[00:56:46] this code and what did they name this
[00:56:49] they actually named this function mode
[00:56:51] toggle so we could name our component
[00:56:54] that as well and back in vs C code let's
[00:56:56] click on the components directory create
[00:56:58] a new file called mod toggle. TSX and
[00:57:04] inside of this we will paste the code
[00:57:06] that we got from the Shaden website
[00:57:08] we'll save it but we'll notice it's red
[00:57:11] there is an issue up here that is that
[00:57:14] it uses another Shaden component it uses
[00:57:17] the drop-down menu and back on the
[00:57:19] Shaden website if we click preview and
[00:57:22] we actually click the example you can
[00:57:23] see the drop- down menu that appears and
[00:57:26] you can choose what mode you are using
[00:57:29] from that drop- down menu so let's go
[00:57:32] ahead and look at the drop- down menu
[00:57:33] component over here on the left in the
[00:57:36] different menu for or the in the menu
[00:57:38] for the different components we click
[00:57:41] drop- down menu once again I'm going to
[00:57:43] need to install this manually because
[00:57:45] I'm using the release candidate of NEX
[00:57:48] js15 but if you are not using the
[00:57:50] release candidate later on you should be
[00:57:53] able to just install the drop- down menu
[00:57:55] with this Command right here I'm going
[00:57:58] to have to do this manually so I'm going
[00:58:00] to go into the manual installation and I
[00:58:03] need npm install radx UI react drop-
[00:58:07] down menu and I'll need to use that
[00:58:09] Legacy peer depths flag once again
[00:58:12] because as we noted before I'm pretty
[00:58:15] much using that with everything with the
[00:58:17] release candidate now in vs code I will
[00:58:19] open the terminal window again I'm going
[00:58:21] to paste that command in it's going to
[00:58:23] run and probably give me an error and I
[00:58:25] need to add that Legacy deps flag once
[00:58:28] again so
[00:58:30] Legacy
[00:58:33] dp-s press enter this should now install
[00:58:36] for me correctly and it has back to Shad
[00:58:39] CN for step two of installing the drop-
[00:58:42] down menu manually so now I'll go ahead
[00:58:46] and copy this code and we can create a
[00:58:50] file for that drop-down menu quite a bit
[00:58:52] of code there but what I really want to
[00:58:54] see is in the next example where are
[00:58:56] they importing that from and it says
[00:58:58] from dropdown Dash menu so that's the
[00:59:00] name of the file that I want to create
[00:59:02] next back in VSS code close the terminal
[00:59:05] window go inside of the UI directory
[00:59:08] here create a new file named dropd down-
[00:59:12] menu. TSX paste in that code that we got
[00:59:15] from the Shaden website now we have our
[00:59:19] drop-down menu component and it looks
[00:59:21] like all as well here with no errors
[00:59:24] I'll close that out and now we could
[00:59:27] restart that typescript server again or
[00:59:30] we could just retype the import so let
[00:59:32] me try that I'm at SL components slui SL
[00:59:38] drop- down menu and yes no restart
[00:59:41] needed if we just retype the import now
[00:59:44] while we're in the mode toggle component
[00:59:46] here let's make a couple of other
[00:59:47] changes just to make this button match
[00:59:49] our others so instead of the variant
[00:59:51] outline we were using ghost we'll still
[00:59:55] use the size icon but then let's add
[00:59:58] that class name
[01:00:01] equals rounded Das p and I can press alt
[01:00:06] Z to wrap that down again and save the
[01:00:09] file now we should be able to restart
[01:00:11] the application and light and dark mode
[01:00:14] should be able to be toggled from our
[01:00:17] header but we do need to add this yet to
[01:00:20] the header don't we let's click on the
[01:00:21] header component up here at the top
[01:00:24] underneath our nav button import we will
[01:00:27] import mode toggle and once again I want
[01:00:31] to change where that's imported from use
[01:00:33] the at symbol
[01:00:36] components and yes there we go now let's
[01:00:39] go ahead and put the mode toggle button
[01:00:41] after our two nav buttons here on the
[01:00:44] far
[01:00:46] right save that now let's open up the
[01:00:49] terminal window mpm
[01:00:52] runev should once again start running on
[01:00:55] Local Host
[01:00:56] and we'll go back and reload the page in
[01:00:58] the browser back in the browser I'm
[01:01:00] ready to reload our page we should once
[01:01:03] again see that animation once it renders
[01:01:05] the page on Startup there we go now I'm
[01:01:08] in dark mode by default and so we saw
[01:01:11] the color change right away if you're in
[01:01:13] light mode you didn't see that change
[01:01:16] but you've got the new button up here to
[01:01:18] toggle the mode and you can see it looks
[01:01:20] like our other buttons as far as when we
[01:01:22] hover over it I click this we get the
[01:01:25] drop menu my system is set to dark but
[01:01:29] if I can choose light here we're back to
[01:01:31] the light
[01:01:32] mode go to dark mode or just choose
[01:01:35] system and that said I'll probably leave
[01:01:38] this in dark mode for the rest of this
[01:01:40] journey because it's much easier on my
[01:01:43] eyes I prefer dark mode and we've
[01:01:45] reached the point early in the setup
[01:01:47] where we now want to install centry as
[01:01:50] part of our application Sentry not only
[01:01:52] helps us capture errors but also
[01:01:55] performance issues along the way during
[01:01:57] development and long after deployment
[01:02:00] and I will say we're not just going to
[01:02:02] console log errors in this tutorial like
[01:02:06] many tutorials you see this is going to
[01:02:08] be a real world application and we're
[01:02:10] going to handle errors and performance
[01:02:12] issues like we would in a real world
[01:02:14] application you want to start by
[01:02:16] creating a free Sentry account and you
[01:02:20] want to use the code Dave gray or use
[01:02:22] one of the links I've put in the
[01:02:24] description so click start for free you
[01:02:27] can fill in your information here and
[01:02:30] after that of course data storage
[01:02:32] location wherever you are but when you
[01:02:34] get down here and it says got a promo
[01:02:36] code redeem this is where you want to
[01:02:39] put in the code Dave gray before you
[01:02:42] create your account and you'll get three
[01:02:44] free months of the team plan on Sentry
[01:02:47] now after you have signed up for Sentry
[01:02:49] you'll want to click create a new
[01:02:51] project and from there you want to
[01:02:52] choose your platform and you can see
[01:02:54] under popular there is nextjs that's the
[01:02:57] one to pick and after we click on that
[01:03:01] we'll need to scroll down here where it
[01:03:02] asks a few other questions so it says
[01:03:04] alert me on high priority issues or you
[01:03:07] can create your own alerts later it's
[01:03:09] whichever you want to do you will get
[01:03:11] emails about issues and they definitely
[01:03:14] will occur during the development
[01:03:15] process so the default project name is
[01:03:18] Javascript Das nextjs but here I'm just
[01:03:22] going to delete that and I'm going to
[01:03:24] name this repair pair shop after that
[01:03:28] see what team we have you could create a
[01:03:30] team there and click create project and
[01:03:33] now we have the command we need to
[01:03:35] install with the Sentry Wizard and of
[01:03:38] course it has the flags here about what
[01:03:40] we named our organization and we named
[01:03:42] our project as well so if you've got the
[01:03:46] latest nextjs and you're doing this
[01:03:49] video long after I've created or even
[01:03:51] maybe just 10 days after I've created it
[01:03:54] and nextjs 15 is now not a release
[01:03:57] candidate but it's actually the official
[01:03:59] release you might be able to just copy
[01:04:01] this and use this since it's the release
[01:04:04] candidate I'm going to need to follow
[01:04:06] the manual configuration directions here
[01:04:08] so that's what we'll do next let's
[01:04:11] quickly note that if the wizard works
[01:04:13] for you and you're not using the release
[01:04:15] candidate then you don't need to do any
[01:04:18] of this which is going to take me some
[01:04:19] time so you can jump ahead into the
[01:04:21] video to the point where I have
[01:04:23] bookmarked it in the video description
[01:04:25] where I'm creating the error files where
[01:04:28] we will capture errors with Sentry since
[01:04:31] I'm using a release candidate here just
[01:04:33] a little early I'm going to need to go
[01:04:35] the manual configuration route so I will
[01:04:37] click and show those directions and it
[01:04:40] says set up the SDK manually and gives
[01:04:44] us a few steps here but I'm going to
[01:04:46] click this link and we'll go to those
[01:04:48] directions for the manual setup I can
[01:04:51] see the first thing I need to do is
[01:04:53] install at Sentry JS and I think if I do
[01:04:57] that with the Legacy perps flag I'll be
[01:05:00] good to go after I've installed that
[01:05:03] back in vs code I'll open up a terminal
[01:05:05] window contrl C to stop the server and I
[01:05:09] need to install with that command and it
[01:05:12] probably already started running it and
[01:05:14] I bet I get an error and sure enough I
[01:05:16] did so let me go ahead and do that again
[01:05:19] I don't need the D- saave but I do need
[01:05:22] D- Legacy Dash Pier Das deps let's
[01:05:27] install now and see if this works out
[01:05:30] yes and Sentry nextjs did install
[01:05:33] successfully with the Legacy peer deps
[01:05:35] flag since I'm using the release
[01:05:37] candidate of nextjs 15 back in the
[01:05:40] manual setup directions let's scroll
[01:05:42] down for the next step where we need to
[01:05:44] extend our nextjs configuration click on
[01:05:47] the esm if it defaults to the CJs we
[01:05:51] want to use the esm code and here you
[01:05:54] can see it has with Sentry config you've
[01:05:57] got your next config here and it says
[01:05:59] this should contain your existing nextjs
[01:06:01] configuration so if you have anything in
[01:06:03] there we don't want to overwrite that
[01:06:06] but we want to use most of this code so
[01:06:08] let's go ahead and copy this and go back
[01:06:11] to our project and we'll look at next.
[01:06:16] config.js back in vs code close the
[01:06:19] terminal window scroll down until we see
[01:06:21] our next config and I said JS it's
[01:06:24] actually MJ and that's fine notice we
[01:06:27] don't have anything inside the next
[01:06:29] config here so that's okay I don't want
[01:06:32] to delete this import either and I can't
[01:06:34] remember if that was at the top let's go
[01:06:37] ahead and just delete this because I
[01:06:39] think it was in the code that I copied
[01:06:41] as well so now that we've got that let's
[01:06:44] check out this yep we didn't have
[01:06:45] anything else in there but it looks like
[01:06:48] there is an issue with it so let's see
[01:06:51] what's going on here oh and the current
[01:06:53] issue is there are two default exports
[01:06:55] we've got export default here and then
[01:06:57] we still had the export default next
[01:06:59] config down here so let's just delete
[01:07:01] that export default next config and
[01:07:04] instead we're using with Sentry config
[01:07:07] as the default export and passing next
[01:07:09] config in you can see here it already
[01:07:12] added in my organization Dave gray and
[01:07:16] the repair shop name of the project so
[01:07:19] let's save this file and go back to the
[01:07:21] directions back in the Sentry directions
[01:07:23] for manual installment if I scroll down
[01:07:26] just a little bit it talks about
[01:07:27] extending the Sentry webpack plug-in
[01:07:30] options and you can look at those
[01:07:32] different options in the docs however I
[01:07:34] just know a couple that we want to put
[01:07:36] in we can put our new options here under
[01:07:38] silent so let's go ahead and add a
[01:07:40] couple of lines I'm going to say hide
[01:07:44] Source maps and we can set that to true
[01:07:47] now this setting hide Source maps from
[01:07:50] generated client bundle so it won't send
[01:07:52] it down to the browser also we want to
[01:07:56] disable logger and we can set that to
[01:07:59] true that automatically Tre shakes the
[01:08:01] Sentry logger statements and reduces the
[01:08:04] bundle size overall so just a couple of
[01:08:06] settings you can look into more as well
[01:08:09] if you're interested in the different
[01:08:10] settings available back in the Sentry
[01:08:12] directions once again for this manual
[01:08:14] installment since I'm using the release
[01:08:16] candidate right now we need to create
[01:08:19] three new files it says create
[01:08:20] initialization config files so there is
[01:08:23] a client that is Sentry doc i. config
[01:08:27] and we'll be creating the TS version of
[01:08:29] this the server and then the edge and
[01:08:32] notice it has this DSN address directly
[01:08:36] in here not using a environment variable
[01:08:40] for that value and down here it says we
[01:08:42] recommend you include your DSN directly
[01:08:45] in these three files alternatively you
[01:08:49] could pass in a public environment
[01:08:51] variable but at this point since it's
[01:08:54] recommended I'm going to go go with what
[01:08:56] they recommend so we can just copy the
[01:08:58] code for each one of these and create
[01:09:00] those files to save just a little bit of
[01:09:02] time I'm going to assume you do that and
[01:09:04] you can assume that I have done that to
[01:09:06] create those three files and now in VSS
[01:09:09] code you can see I've created all three
[01:09:11] of those required files Sentry doc.
[01:09:14] config.txt
[01:09:18] cry. edge.
[01:09:24] config.txt the next. config file and so
[01:09:28] on now let's go back to the docs real
[01:09:30] quick and there we see the next file we
[01:09:32] need to create is an
[01:09:34] instrumentation dots so let's go ahead
[01:09:37] and copy this now this file goes inside
[01:09:40] of our source directory not at the same
[01:09:43] level that we were at before with those
[01:09:45] other files so back in vs code now let's
[01:09:48] go into the source directory and let's
[01:09:51] create a new file and this would be
[01:09:54] instr uh if I could Spell correctly
[01:09:58] instrumentation TTS inside this file
[01:10:02] I'll paste instrumentation dots and I
[01:10:05] can see we have an issue because we're
[01:10:07] inside the source directory and this is
[01:10:09] saying it would be in the same directory
[01:10:10] so it possibly doesn't matter but in my
[01:10:12] previous projects I've had this file in
[01:10:15] the source directory and of course that
[01:10:16] Source directory is optional so if you
[01:10:19] didn't have it it would just have the
[01:10:20] one dot but now we need to go up a
[01:10:23] directory to find those Imports now if
[01:10:26] we look at the directions besides this
[01:10:28] file it also says we actually need to
[01:10:31] import this or have this set up it says
[01:10:34] we do need to import it but it says we
[01:10:36] need to have this set up by setting the
[01:10:38] experimental instrumentation hook in our
[01:10:41] nextjs config so let's go to our nextjs
[01:10:44] config and set that up as we see here in
[01:10:47] the nextjs docs under our nextjs config
[01:10:50] we have experimental then
[01:10:52] instrumentation Hook is set to true in
[01:10:55] vs code if I scroll down to the next
[01:10:57] config we can see we don't currently
[01:10:59] have anything in that next config but we
[01:11:02] can change that by coming down one and
[01:11:05] then we need to type
[01:11:09] experimental and then inside of the
[01:11:12] experimental object we can add
[01:11:18] instrumentation look and from there we
[01:11:21] should be able to set that to true now
[01:11:23] back in our manual directions we're
[01:11:25] pretty much finished except throwing a
[01:11:27] test error but I want to point out that
[01:11:29] it is using an O token here inside of
[01:11:33] this with Sentry config and we haven't
[01:11:36] added this Sentry o token to our env.
[01:11:41] local file yet that nextjs uses so
[01:11:43] you'll need to do that now I'm not going
[01:11:45] to show you the value for mine but
[01:11:48] inside of that environment variable file
[01:11:51] env. looc you set sentryo equal to and
[01:11:55] of course get the token value now if you
[01:11:57] scroll down further on this manual
[01:11:59] configuration page we should be able to
[01:12:02] find where well I saw it somewhere I
[01:12:05] thought it was at the bottom we should
[01:12:07] be able to find where it will generate
[01:12:08] one for us let me find exactly where I
[01:12:11] saw that at it does offer to generate
[01:12:15] one on this page here we go so you see
[01:12:17] Sentry o token equals this is what we
[01:12:20] would put this says EnV so maybe Sentry
[01:12:24] is going to look inside of a EnV instead
[01:12:26] of a EnV local file and you'll want to
[01:12:29] click to generate your token and then
[01:12:32] copy this code and put it in your EnV
[01:12:35] file I actually confirmed in another
[01:12:37] project I have Sentry in and it does use
[01:12:40] the env. local file that nextjs uses so
[01:12:45] again click to generate copy then put
[01:12:48] this in your Dov DOL file and I'll do
[01:12:51] that to mine right now back in vs code I
[01:12:54] should have mentioned you might need to
[01:12:56] create that file also as it's not just
[01:12:58] installed by default in our nextjs
[01:13:01] project so create a new file name it
[01:13:05] env. local and it should already be in
[01:13:09] your GI ignore so whoops we created it
[01:13:13] outside of that directory there we go we
[01:13:15] want it at the same level as the readme
[01:13:17] and everything else so now you've got
[01:13:20] the env. loal it's grayed out here in my
[01:13:22] file tree that means it's already listed
[01:13:24] in the the git ignore so you want to
[01:13:27] verify that as it should be by default
[01:13:29] because you don't want to include that
[01:13:32] in your git repository that you would
[01:13:34] send to GitHub for example so this is a
[01:13:37] secret and go ahead and put your value
[01:13:39] in now and now let's create the example
[01:13:42] route that once again if you were able
[01:13:43] to run the wizard with the new release
[01:13:46] of nextjs 15 then you should already
[01:13:50] have this route I'm just going to add
[01:13:52] one for those of us that are manually
[01:13:54] installing sry now so this would be
[01:13:56] under lowercase here but Sentry Das
[01:14:02] example- page and then inside of this
[01:14:05] Sentry example page directory we will
[01:14:07] create a page. TSX file we'll start with
[01:14:11] use client at the top of the page and
[01:14:14] after that let's just say
[01:14:16] export default function
[01:14:19] page and inside of this page we're just
[01:14:22] going to throw a new eror let's call
[01:14:26] this Sentry test error we could even say
[01:14:30] front
[01:14:32] end error and that's pretty much all we
[01:14:35] need a return wouldn't even happen it
[01:14:38] would exit at that point so we can save
[01:14:40] that now if you got the sample page from
[01:14:43] the Sentry wizard it is much nicer than
[01:14:46] this this is all this really does is
[01:14:49] throw the air and we will need to catch
[01:14:51] this yet inside one of our nextjs error
[01:14:55] pages in the nextjs docs we can see that
[01:14:59] there is a global error page now we'll
[01:15:01] use the typescript version here and this
[01:15:04] is used to specifically handle errors in
[01:15:06] the root layout that will not be caught
[01:15:09] with the other error files that we
[01:15:11] create that would typically catch them
[01:15:13] in the different branches of our router
[01:15:17] so what we'll do is put this up at the
[01:15:19] root of our project so I'm going to copy
[01:15:21] this code we will create Global d error.
[01:15:26] TSX back in VSS code now I'll close up
[01:15:29] that Sentry example there and here we
[01:15:31] are with our layout our page our Global
[01:15:34] uh CSS that we have there so this is
[01:15:36] where we want to create that Global Dash
[01:15:39] eror so here we go with global D
[01:15:43] error.
[01:15:45] TSX and inside we'll just paste that
[01:15:47] code we got from the nextjs docs and
[01:15:51] that grabs the global error now we
[01:15:52] haven't added Sentry to this yet but we
[01:15:55] will but first I want to go ahead and
[01:15:57] create an error page inside of our RS
[01:16:01] group also back in the next JS docs we
[01:16:04] can just scroll up from where that
[01:16:06] Global error was to the regular error
[01:16:09] file that we would typically use and
[01:16:11] here you can see this is error. TSX so
[01:16:15] we can also copy this now you can use
[01:16:17] this inside of any route you create in
[01:16:20] nextjs and it will catch all of the
[01:16:23] errors underneath it up to that point
[01:16:26] but it wouldn't catch the errors in the
[01:16:28] parent layout and that's what we needed
[01:16:30] that Global Das error file for so we've
[01:16:33] copied this let's go back and create our
[01:16:35] error. TSX back in VSS code I'll create
[01:16:38] a new file here and this will be error.
[01:16:41] TSX and I'll once again paste in the
[01:16:44] code from the nextjs documentation we
[01:16:47] now have our error file and now in this
[01:16:50] error file it is easy to capture those
[01:16:53] errors with sentries so let's go up here
[01:16:55] to the top and import Sentry we will
[01:16:59] import Aster which is all as Sentry from
[01:17:05] at Sentry nextjs now that we have that
[01:17:08] notice there's already a use effect here
[01:17:11] inside of this error example from the
[01:17:13] nextjs docs let's just add underneath
[01:17:16] the console error that nextjs has and
[01:17:19] put in Sentry do
[01:17:23] capture exception
[01:17:25] and inside of that capture exception
[01:17:28] we'll just pass the error and that's all
[01:17:30] there is to it now let's do the same
[01:17:33] thing inside of the global Das error so
[01:17:36] I'm going to copy this import for Sentry
[01:17:38] so I don't have to type it again
[01:17:40] underneath the use client paste that in
[01:17:43] and then we need the use effect here as
[01:17:46] well so I'll come back to this error
[01:17:48] should have just copied that import also
[01:17:50] but I can come back and forth real quick
[01:17:54] here's the use effect and now we need to
[01:17:56] put the use effect in place which is
[01:17:58] right after function starts so here it
[01:18:01] is we'll copy this and we'll put this in
[01:18:05] the global error here as
[01:18:08] well and now we are ready to capture
[01:18:10] errors even inside of this special
[01:18:12] Global D error file we're ready to start
[01:18:15] up our application and test things out
[01:18:18] so control back tick to open up the
[01:18:20] terminal window mpm runev to get
[01:18:23] everything started once again at Local
[01:18:26] Host 3000 we now see the instrumentation
[01:18:29] Hook is being used as well it notes the
[01:18:32] experiments and it's up and running so
[01:18:34] let's go ahead and look at our
[01:18:36] application in the browser let's go
[01:18:38] ahead and reload it make sure
[01:18:40] everything's working we should see this
[01:18:41] slide in after it compiles Dev mode once
[01:18:44] again after we restart has to recompile
[01:18:47] so it should take just a second but
[01:18:48] there it has the slide in now let's go
[01:18:53] to Central
[01:18:55] - example- page which in our case should
[01:18:59] throw an immediate error if you don't
[01:19:01] have that right away then of course you
[01:19:05] probably had the wizard work and you
[01:19:06] might have to click a button they had a
[01:19:08] little nicer page than I created so
[01:19:10] let's throw that error and we did throw
[01:19:13] an error you would think our Global
[01:19:15] error would catch this because we didn't
[01:19:18] put the Sentry example page I don't
[01:19:20] think inside of our RS route let me
[01:19:23] double check
[01:19:25] then we can go over why it did or why it
[01:19:27] didn't catch that so here's the RS no
[01:19:29] here's Sentry so we didn't put it inside
[01:19:31] of that so this error page would this
[01:19:34] error. TSX would not apply you'd think
[01:19:37] maybe the global would catch it but
[01:19:39] maybe not let's go back and quickly look
[01:19:42] at the docs and here we see even if a
[01:19:45] global Das error is defined it's still
[01:19:48] recommended to define a root error file
[01:19:51] as well so let's go ahead and Define
[01:19:54] that because that Global Das eror is
[01:19:57] specific really to the root layout it
[01:20:00] says it is the least granular even
[01:20:02] though it can be considered a catch all
[01:20:04] but we didn't seem to get that triggered
[01:20:07] when we threw that error so let's go
[01:20:09] back and put in another error. TSX file
[01:20:14] and see if that will help so here is our
[01:20:16] RS group take this error. TSX let's just
[01:20:21] copy and now let's create a new file
[01:20:25] inside of the root of the app here so a
[01:20:28] new
[01:20:29] file error. TSX there is well we'll
[01:20:33] paste in those same
[01:20:35] ingredients now let's go back to our
[01:20:37] application once
[01:20:39] again and we since that was unhandled oh
[01:20:43] now it's immediately handled it's
[01:20:44] already restarted since we saved the app
[01:20:46] and yes our new error file did catch the
[01:20:50] error so now we've thrown the error a
[01:20:52] couple of times let's check Sentry to
[01:20:54] see if if it has logged that error and I
[01:20:56] quickly wanted to show you in my email
[01:20:58] this is the email notice that I received
[01:21:01] here it says repair shop one error
[01:21:03] Sentry test frontend error came to my
[01:21:06] email at davg gray. codes so here is the
[01:21:09] error the alert I essentially received
[01:21:12] immediately I'm in the development
[01:21:14] environment even this is inside of my
[01:21:16] email it lets me know right away when an
[01:21:19] error has occurred now this is
[01:21:20] invaluable of course after deploying an
[01:21:23] application as well as when you're
[01:21:25] developing an application of course if
[01:21:27] you already had this deployed for a
[01:21:28] client you would want to know about
[01:21:29] errors immediately but it still could be
[01:21:32] very useful as you're working on an
[01:21:34] application so I wanted to show you this
[01:21:36] before we go to the Sentry Dash and now
[01:21:39] in my Sentry dashboard we can see the
[01:21:41] error that came in that we tested with
[01:21:44] so that is excellent that's exactly what
[01:21:46] we wanted and we'll learn more about
[01:21:48] Sentry as we go and we can dive into
[01:21:50] these errors and of course look at also
[01:21:53] performance issues there's even a Sentry
[01:21:56] replay which will help us get insights
[01:21:58] into our end users as they encounter
[01:22:01] errors so we'll look at all of that as
[01:22:03] we go through this tutorial series and
[01:22:06] we're almost finished with this first
[01:22:07] lesson but not quite we wouldn't be
[01:22:09] finished with our app setup if we didn't
[01:22:11] set up a not found page and of course
[01:22:14] that is not-f found. TSX since we're
[01:22:17] using typescript we can copy this code
[01:22:20] directly here from the nextjs docs and
[01:22:23] that's what I'll do do let's go back and
[01:22:25] set this up inside our app directory
[01:22:28] back in vs code I've on the error page
[01:22:31] in the app directory already so I'll
[01:22:33] just create another new page right
[01:22:34] beside it named not-f found. TSX paste
[01:22:39] in the code from the docs and while this
[01:22:41] would work I want to modify this just a
[01:22:44] little bit so instead of Link I'm going
[01:22:47] to
[01:22:49] import image from next SL image
[01:22:55] after that I'll create just a little bit
[01:22:57] of metadata here export
[01:22:59] const metadata set this equal
[01:23:03] to a title of page not
[01:23:09] found after that we've got our function
[01:23:12] here we're not using the link anymore
[01:23:14] we're going to use an image inside of
[01:23:16] here but I also want to just change this
[01:23:18] H2 from not found to page not found we
[01:23:23] could leave this paragraph but I'll
[01:23:24] remove it I want to use the image I was
[01:23:27] creating I also want to apply just a
[01:23:29] couple of classes here and then we can
[01:23:31] see how it looks afterwards so PX two
[01:23:37] width full then the H2 itself we could
[01:23:41] change just a little bit let's go class
[01:23:43] name and get a little bigger text here
[01:23:45] text-
[01:23:48] 2XL okay now the image so I need to add
[01:23:51] another image to the public directory
[01:23:53] here so you will be able to pull this
[01:23:55] out of the lesson one resources also so
[01:23:58] here is my not found image I'm dragging
[01:24:01] over and it's a sad computer so we can
[01:24:05] use that you can get that or use your
[01:24:07] own image if you want to so inside of
[01:24:09] this I'm going to switch over and use
[01:24:12] that nextjs image component now so image
[01:24:16] I like to put these different props on
[01:24:19] different lines so class name this is
[01:24:22] going to equal margin of
[01:24:25] zero let's get rounded Corners with
[01:24:27] rounded --xl after that let's set the
[01:24:30] source and this is going to be equal to
[01:24:33] slash images
[01:24:36] sl- found
[01:24:39] Das 1024 by 10
[01:24:44] 24.png is what I named that image after
[01:24:47] that let's just set the width equal to
[01:24:50] and this could be bigger if you want I'm
[01:24:52] just going with a static size width of
[01:24:55] 300 height also equals 300 it's a square
[01:25:00] image after that I'll set
[01:25:03] sizes equals 300
[01:25:07] pixels the alt attribute is page not
[01:25:14] found priority should equal true this
[01:25:17] would be above the fold almost all of
[01:25:19] the time I would expect and title is
[01:25:22] going to equal
[01:25:24] page not
[01:25:26] found okay after that I think we can
[01:25:28] just close that image tag and we've got
[01:25:31] our closing div so let's get rid of that
[01:25:33] empty
[01:25:34] line and save let's see if our project
[01:25:37] is running looks like it's running just
[01:25:39] fine let's go back to the web page and
[01:25:43] let's request a page that doesn't exist
[01:25:46] so let's go back to home first home
[01:25:49] loaded just fine so let's try to load a
[01:25:51] page Named Dave what do we get there we
[01:25:54] get page not found now this isn't
[01:25:58] centered like I would want it yet so
[01:26:00] maybe there's something we could add
[01:26:01] here back in VSS code we've got the 404
[01:26:04] when we requested Dave and we can see
[01:26:06] that here in the terminal let's close
[01:26:08] the terminal let's wrap this in one more
[01:26:12] div put the closing div after the image
[01:26:15] of course then we'll put a few classes
[01:26:18] on this wrapper div as well so now we'll
[01:26:21] add a class
[01:26:23] name I need to type class correctly
[01:26:26] class name and this is going to equal
[01:26:30] mx- Auto so it would be centered let's
[01:26:33] put some padding at the top let's make
[01:26:36] it flex and this would be a flex column
[01:26:39] if we had several things and I guess we
[01:26:42] do we have that title so we wouldn't
[01:26:43] want the page not found to the left or
[01:26:45] right so it would be a
[01:26:47] column justify Das
[01:26:50] Center let's wrap this down items -
[01:26:55] Center and a gap of four so that should
[01:26:59] Center everything up in a centered
[01:27:01] column as well so now let's go back and
[01:27:03] take another look and that's what we
[01:27:06] expect so really no matter what size of
[01:27:08] device we're using we have this at the
[01:27:09] top page not found back in vs code one
[01:27:13] more small change before we're finished
[01:27:15] today notice how we have metadata here
[01:27:17] and it says page not found let's go to
[01:27:20] our layout that should have some
[01:27:22] metadata in there by default as we
[01:27:24] installed nextjs and you can see that it
[01:27:27] does let's go ahead and change this to
[01:27:29] where it makes just a little bit more
[01:27:31] sense but instead of Title by itself we
[01:27:35] can make this an object and inside of
[01:27:38] this object we can provide template and
[01:27:42] this will handle how it handles metal
[01:27:44] metadata on the rest of the site I can
[01:27:46] put a percent s here and then I'm going
[01:27:49] to go ahead and put in a pipe symbol and
[01:27:52] inside of this I'll say
[01:27:56] computer repair shop so we'll see
[01:27:59] whatever value we had in other Pages
[01:28:02] here and then it'll also indicate that
[01:28:04] it's a computer repair shop then let's
[01:28:06] put a default in case we forget to put
[01:28:08] metadata anywhere that we would want it
[01:28:11] and here we can say this is just
[01:28:16] computer repair shop now we can provide
[01:28:19] a description as we'd want here but we
[01:28:21] don't really need to although we might
[01:28:23] want that on the homepage that's public
[01:28:25] facing so we could just say
[01:28:28] Dan's
[01:28:30] computer repair shop and then let's go
[01:28:34] ahead and put an application name now
[01:28:36] there are many more values we could put
[01:28:39] in here for metadata and you can look
[01:28:40] those up in the nextjs docs if you want
[01:28:43] to this is all I'm putting for now so
[01:28:45] here I'm also going to call this
[01:28:48] computer repair shop or let's just call
[01:28:51] the app itself
[01:28:54] paop and now if we jump back to that not
[01:28:57] found page where we saw some metadata on
[01:28:59] another page let's go ahead and copy
[01:29:01] this and let's go to one of our other
[01:29:03] routes we created inside of the RS here
[01:29:06] so inside of home maybe and then the
[01:29:08] page above our function here is where we
[01:29:12] would put that so let's click on the
[01:29:14] first line create a little space create
[01:29:17] our metad dat and here we'll just call
[01:29:21] this home and then of course I'll get of
[01:29:24] that extra line above when we load this
[01:29:26] up we can check the metadata to see if
[01:29:29] it actually gives the correct title in
[01:29:32] the tab of our browser back in the
[01:29:34] browser looking at our app once again
[01:29:36] let's go back to our homepage and now
[01:29:38] look at what we get if you can see up
[01:29:40] here it says home and then it gives here
[01:29:42] I can Mouse over I guess and it shows
[01:29:44] home then we had the pipe and the
[01:29:46] computer repair shop so you can see we
[01:29:49] are generating that title for the tab
[01:29:52] with our metadata as a expected back in
[01:29:55] vs code I'm going to copy this metadata
[01:29:57] go back into our customers page and add
[01:30:01] the same thing of course I'll change it
[01:30:03] to customers so paste that in change
[01:30:07] home to
[01:30:09] customers save that and then go to the
[01:30:12] tickets page and add the same here for
[01:30:15] tickets just be changing home to tickets
[01:30:20] and that completes a very long first
[01:30:23] tutorial in a very detailed Series so
[01:30:26] buckle up this is going to take some
[01:30:27] time in the very next video we'll be
[01:30:30] adding the login for employees to get to
[01:30:34] that application that we'll be using at
[01:30:36] the computer store so oth is up next a
[01:30:39] quick shout out to my patrons holy coder
[01:30:42] is a progress provider and then my
[01:30:44] junior patrons programming polyglot
[01:30:47] Isaac will Ernie Georgie Stacy Abe
[01:30:51] Javier Michael thank you all so very
[01:30:53] much you're helping me reach my goals
[01:30:55] find out more and how you can join at
[01:30:58] patreon.com davay remember to keep
[01:31:01] striving for Progress over Perfection
[01:31:03] and a little progress every day will go
[01:31:05] a very long way please give this video a
[01:31:08] like if it's helped you and thank you
[01:31:10] for watching and subscribing you're
[01:31:12] helping my channel grow have a great day
[01:31:15] and let's write more code together very
[01:31:16] soon
