Title: How To Make AWS Not Suck
Channel: Fireship
Published: 2024-09-20T18:18:57Z
Duration: PT6M38S
Description: In this video you're going to learn how to make cloud computing great again.

Try Docker Build Cloud for free: https://dockr.ly/4gx7mXa

ðŸ’¬ Chat with Me on Discord

https://discord.gg/fireship

ðŸ”¥ Get More Content - Upgrade to PRO

Upgrade at https://fireship.io/pro
Use code YT25 for 25% off PRO access 

ðŸŽ¨ My Editor Settings

- Atom One Dark 
- vscode-icons
- Fira Code Font

ðŸ”– Topics Covered

- Cloud computing
- Amazon Web Services
- Google Cloud
- Terraform
- Pulumi
- SST
- Docker Build Cloud

Transcript:

[00:00:00] in this video you're going to learn how
[00:00:01] to make cloud computing great again if
[00:00:03] you're a software developer that means
[00:00:05] you're on the Spectrum a spectrum that
[00:00:07] defines how dependent you are on big
[00:00:09] cloud platforms like AWS Google cloud
[00:00:12] and Azure on one end we have the based
[00:00:14] self Hoster this Dev does a million plus
[00:00:16] an annual recurring revenue and handles
[00:00:18] 5,000 requests per second with PHP and
[00:00:20] jQuery on a $5 FreeBSD VPS the thought
[00:00:24] of proprietary close Source software
[00:00:26] triggers their gag reflex and they pity
[00:00:28] the fools paying for Jeff beus yacht
[00:00:29] when Lambda HTTP request at a time but
[00:00:32] at the other end of the spectrum we have
[00:00:34] the SAS Som leer this Dev bought a $200
[00:00:36] template and now pays $20 a month for
[00:00:38] website hosting at $50 a month for
[00:00:40] postgress at $10 a month for a
[00:00:42] notetaking app and $20,000 for data dog
[00:00:45] all of which is funded by rewards credit
[00:00:46] cards instead of customer revenue and
[00:00:48] they had no idea all the things they
[00:00:49] were paying for are just rappers of AWS
[00:00:52] but being on either end of the spectrum
[00:00:54] is not ideal being two based is timec
[00:00:56] consuming and error prone and leads to
[00:00:58] superiority complex but not being based
[00:01:00] enough allows the AWS rapper industry to
[00:01:03] enslave you which will make you poor and
[00:01:04] reduce your te count luckily there is
[00:01:06] another path a path where you leverage
[00:01:08] big cloud at optimal efficiency with
[00:01:10] amazing DX and zero vendor lockin and
[00:01:12] there are some amazing open source tools
[00:01:14] that can help us get there but first why
[00:01:16] do I even need a tool well if you go on
[00:01:17] big Cloud's website you'll look around
[00:01:19] for the right tool for the job end up
[00:01:21] deploying a massive kubernetes cluster
[00:01:22] you don't need then forget about it and
[00:01:24] end up homeless if you're deploying on
[00:01:26] big cloud you should never do this and
[00:01:27] instead use infrastructure as code there
[00:01:30] are many tools that can get the job done
[00:01:31] with one of the most popular options
[00:01:33] being terraform but it's not open-
[00:01:34] source and requires its own special
[00:01:36] language a good alternative is palumi
[00:01:39] which itself is written in go but allows
[00:01:41] you to write your code in multiple
[00:01:43] languages like typescript python go the
[00:01:45] c or just damel taking a declarative
[00:01:48] approach like this is not only safer but
[00:01:50] just far more efficient like in this
[00:01:52] example here I'm using palumi to create
[00:01:54] a Google Cloud virtual machine I can
[00:01:56] Define all the machine settings here
[00:01:58] like the size and operating system as
[00:02:00] well as all the network and firewall
[00:02:01] settings and anything else you can
[00:02:03] imagine all of which is strongly typed
[00:02:05] and provides intellisense right here in
[00:02:06] the IDE now if I want to deploy it I can
[00:02:08] just do pumi up and it will
[00:02:10] automatically deploy this stuff to my
[00:02:12] Google Cloud account and likewise when I
[00:02:13] want to take it down I can do that with
[00:02:15] a single command in addition you can use
[00:02:17] their dashboard to keep track of all
[00:02:18] your projects and there's a bunch of
[00:02:20] templates for the most common use cases
[00:02:22] it's incredibly powerful but if you like
[00:02:24] palumi and also like typescript a tool
[00:02:26] you're really going to like is SST which
[00:02:28] stands for serverless Shen pans and Tom
[00:02:30] Foolery when I found out it was a rapper
[00:02:32] of palumi I thought it was just a scam
[00:02:34] but actually it's the most optimized IAC
[00:02:36] tool if you're a fullstack JavaScript
[00:02:38] developer you define all of your
[00:02:39] infrastructure and databases in a single
[00:02:42] typescript file and what's cool about it
[00:02:43] is that they've designed specific
[00:02:45] components or recipes for all the
[00:02:47] popular Frameworks like nextjs spel kit
[00:02:49] angular and so on like if I'm deploying
[00:02:51] a spel kit app I can define a server and
[00:02:53] then link other resources to it like an
[00:02:55] S3 storage bucket and now that all
[00:02:57] that's in place I can easily reference
[00:02:58] it in my application code because it's
[00:03:00] also written in typescript we can then
[00:03:02] deploy the app with a single command or
[00:03:04] set up the SST console to deploy on get
[00:03:06] push and it even works with Frameworks
[00:03:08] like nextjs which is notorious for
[00:03:10] trapping developers in a triangle that
[00:03:11] they can never leave it feels good to
[00:03:13] get pure uncut product by going directly
[00:03:15] to the supplier but one of the most
[00:03:17] powerful techniques to free your app
[00:03:18] from vendor lockin is containerization
[00:03:20] with Docker the sponsor of today's video
[00:03:23] we all use Docker but what you likely
[00:03:25] don't know about is Docker build Cloud a
[00:03:27] way to build Docker images way faster
[00:03:29] both locally and in continuous
[00:03:31] integration Docker is smart enough to
[00:03:32] know that when you run the build command
[00:03:34] it should only rebuild layers that have
[00:03:35] changed and use the cach for everything
[00:03:37] else the problem is that that cash only
[00:03:39] exists on your machine with build Cloud
[00:03:42] though this cash becomes available to
[00:03:43] every machine remotely that means if Bob
[00:03:46] builds an image in Tokyo Alice can take
[00:03:48] advantage of that cash in Austin
[00:03:49] instantly but most importantly it fixes
[00:03:51] the massively annoying bottleneck of
[00:03:53] waiting for your CI server to hurry up
[00:03:55] and fail the shared cach can make
[00:03:57] complex builds 39 times faster which
[00:04:00] means more developer happiness for
[00:04:01] individuals and potentially millions of
[00:04:03] dollars saved for a medium-sized company
[00:04:05] try out Docker build Cloud for free
[00:04:07] right now with the link below one thing
[00:04:09] that sucks about the cloud though is
[00:04:10] that it's utterly useless without an
[00:04:12] internet connection or credit card the
[00:04:13] good news is that there's a tool called
[00:04:15] local stack which emulates all the major
[00:04:17] services on AWS from a single container
[00:04:20] that you can run locally that means you
[00:04:21] can cat up and test all of your buckets
[00:04:23] lambdas and Dynamo DBS on a flight and
[00:04:25] then push them to production the moment
[00:04:27] you land that's impressive because AWS
[00:04:29] is a massive collection of stuff you
[00:04:31] don't need and while local stack doesn't
[00:04:33] cover everything it does cover a lot of
[00:04:35] things most importantly though it's a
[00:04:36] playground where you can over engineer
[00:04:38] your architecture without any real world
[00:04:40] consequences what I like to do is first
[00:04:42] create a diagram of my architecture
[00:04:44] using a tool like cloudcraft which can
[00:04:46] visually represent different services in
[00:04:48] 3D and how they connect to one another
[00:04:50] like I might have an S3 static website
[00:04:52] which has a form that triggers a Lambda
[00:04:54] function that uploads to another bucket
[00:04:56] which triggers a resizer Lambda which
[00:04:57] triggers the simple notification service
[00:04:59] to send an email with simple email
[00:05:01] service but to test out my prototype I
[00:05:03] can now use the AWS local CLI to create
[00:05:05] all my lambas and buckets locally but
[00:05:07] once deployed locally I can then go to
[00:05:09] the local stack dashboard and manage
[00:05:11] everything just like it was AWS I can
[00:05:13] even see my uploaded S3 files right here
[00:05:15] pretty awesome but I've saved the best
[00:05:17] for last The Encore of this video is a
[00:05:19] tool named Encore every developer should
[00:05:22] know how to use infrastructure as code
[00:05:23] tools but one drawback is that they're
[00:05:25] totally decoupled from the code that
[00:05:27] matters your application code in a
[00:05:29] perfect world we just build an app click
[00:05:31] deploy and never worry about it and
[00:05:33] Encore gets us pretty close to that
[00:05:35] world it's a tool that can help you
[00:05:36] provision infrastructure on AWS or
[00:05:38] Google Cloud but it's also a backend
[00:05:40] application framework that allows you to
[00:05:42] write your application code in go or
[00:05:44] typescript however the infrastructure
[00:05:46] semantics are built into the application
[00:05:48] code it can do this because at compile
[00:05:50] time it creates an application model
[00:05:52] where all the resources required to run
[00:05:54] your app are identified where you can
[00:05:56] then configure and customize them from
[00:05:58] Encore development dashboard board you
[00:06:00] get the benefits of IEC but without
[00:06:01] having to actually write the code and it
[00:06:03] automates all the other devops work like
[00:06:05] continuous integration and deployment
[00:06:07] observability tracing IM management and
[00:06:10] more it sounds too good to be true so
[00:06:12] what are the trade-offs the big
[00:06:13] trade-off is flexibility it assumes your
[00:06:16] application code is written in
[00:06:17] typescript or go that you're using a SQL
[00:06:19] database like RDS and that you adhere to
[00:06:22] OnCourse framework conventions in some
[00:06:24] cases it might be better to keep your
[00:06:25] infrastructure code separate it's
[00:06:27] opinionated but if you agree to those
[00:06:28] terms you could save yourself thousands
[00:06:30] of hours of development time and that
[00:06:32] concludes my Ted Talk on how to make AWS
[00:06:34] not suck thanks for watching and I will
[00:06:36] see you in the next one
